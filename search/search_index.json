{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Critical Making Studio CMCI STUDIO at CU Boulder Nothing is a mistake. There's no win and no fail, there's only make. ~ John Cage If you're a visitor to this site, follow us @criticalmakingstudio and @cmci.studio to see what we're up to! Spring 2021 Summer 2021 Fall 2020","title":"Home"},{"location":"#spring-2021","text":"","title":"Spring 2021"},{"location":"#summer-2021","text":"","title":"Summer 2021"},{"location":"#fall-2020","text":"","title":"Fall 2020"},{"location":"APRD-5005/","text":"Critical Making 1: Finding Your Superpower Through Digital and Physical Making Critical Making 1 is a first semester project-based studio course that provides a foundation in the creative process of making with new and emerging digital and physical technologies responsible for building the products and services shaping the world we live in. In this course students work towards becoming fluent with digital and physical tools and technologies supporting their creative visions for new products and services. This includes working with modern web technologies (languages, frameworks, API\u2019s) to produce functional prototypes, surveying Computer-Aided Design (CAD) tools for 3D modeling and visualization and leveraging digital fabrication tools (3D Printing, Laser Cutting, CNC Milling) to rapidly produce physical objects and prototypes. The course will culminate in a final project leveraging the various digital and physical tools, techniques, skills, and knowledge gained throughout the semester. Project examples include web-based applications, connected experiences, smart devices, everyday / enchanted / functional objects, media-based installations, and product-based experiences. Day and Time: APRD-5005-003 / AM Section - Monday, 9:30 am - 12:30 pm APRD-5005-001 / PM Section - Monday, 1:30 pm - 4:30 pm Location: We have adopted a hybrid (remote/in-person) class structure this semester due to COVID-19 . This means anyone can participate in person or virtually over Zoom anytime. The class schedule will indicate when class is to be held in person at the Studio or virtually over Zoom. The following Zoom link is to be used for all class sessions. The required password is provided in Slack. >> Zoom Meeting (Password Required) << Instructor: RJ Duran rj.duran@colorado.edu Slack: @rjduran. #cmstudio on cmcistudio.slack.com Office hours by appointment. Feel free to reach out to me via slack or email. Syllabus: This website is a real-time version of the course syllabus. It is updated weekly throughout the semester. A static version can be downloaded here . Course Resources This website is the primary resource for all Critical Making Studio courses. Some of the resources used across the different courses are divided up into sections found on the left sidebar. Course specific resources will be found within the course schedule page specific to each course, also found on the left sidebar. Do I need to know all of these tools? No! Think of these resources as maps containing many possible tools that could help you accomplish your work and from which you can choose some to learn and work with. There are pros and cons to any tool and all have a set of functionalities and a purpose. As with any tool and any kind of personal creative process you are free to choose anything that works for you. In addition to the tools found here in the digital space, you have access to physical tools for building anything you can imagine here at the studio, on campus at the Idea Forge , or in the community at BLDG61 . IMPORTANT: In this time of COVID-19, be sure to investigate any policies and regulations for all campus based or non-CU based resources before using them. Be safe. Our Studios CMCI Studio facilities include the large main room (West Studio) and adjacent smaller room (North Studio). Both rooms contain different functionalities for developing projects at varying scales and for varying audiences. Read through the Studio Handbook for learning about each room and accessing the various tools and capabilities we have on site. CMCI Equipment Resources CMCI has a large collection of media production equipment for students to use. The Armory Vault and ENVD Checkout reservation systems have many items for general purpose use. With each system there are conditions that must be met. Visit each page to learn more. Learn more about all the on campus resources available at https://www.colorado.edu/facilities/cmci-equipment/ . Armory Vault ENVD Checkout Idea Forge The Idea Forge is an on-campus design and fabrication facility open to all students located in the Fleming Building (near the Wolf Law Building at Broadway & Baseline Rd). In this course we will be making use of the tools and resources available to build projects and develop skills. Learn more at https://www.colorado.edu/ideaforge/ . Fall 2020 Operations CU Boulder Campus Map Hours Workshop Schedule BLDG61: Boulder Library Makerspace BLDG 61 is a free community workshop that provides maker education and technology to the public in a creative and inclusive environment. They are located nearby, just down the street from our studio. They offer a variety of free workshops and access to tools and knowledge within the larger Boulder community. I highly recommend becoming familiar with their space. Learn more at https://boulderlibrary.org/bldg61/ . Course Workload The CM1 is a 3 credit hour course. You should expect to dedicate at least 2-3 hours per credit hour. This translates into a 6-9 hours per week. Consider 6 hours a minimum expectation for one studio course and plan accordingly with your other studio courses. Assignments for the course consist of weekly blog posts demonstrating project-based and process oriented research and explorations in making . Assignment parameters will be based on the topic of the week and \"due\" the following week by the start of class time. Refer to the Course Deliverables section for more information. The course is organized into weekly meetings consisting of instructor led project-driven topics organized as workshops and studio work sessions. It is expected that all students are active participants in each session. Course Deliverables CM1 is a project based course and largely driven by student research and interests. As such, each deliverable is expected to vary based on the project parameters and requirements. The following outlines the general criteria for course deliverables throughout the semester. Assignments Assignments are given weekly and need to be submitted as a blog post published to your Critical Making blog. A minimum of 1 blog post per week is the expectation. Medium is widely used in other studio classes but any blogging platform may be used. Posts are to be submitted via slack #cmstudio by the specified due date each week. It is recommended that a post includes a variety of media and content to support the subject matter. For example: text, images, video, graphics, photos, mockups, screen captures, tutorials, 3d model viewers (sketchfab), sketches, code, gifs, references, etc. Anything that is required to effectively communicate the details of a project, process, prototype, or idea. The subject matter is in response to the topics of the week. Ideally, it falls in line with your interests, research area, project, creative process, etc. For example, you might consider doing a series of tutorials on a topic that interests you or a process/workflow you are currently exploring through the course. Posts should be written to the best of your abilities and for a public audience. The post and any accompanying visual content (images, video) may be shared on social media. Final Project Final Project Proposal (Submitted as a blog post) Final Project Presentation (Delivered live or as pre-recorded presentation) Final Project Documentation (Submitted as a blog post) Course Themes Building Creative Habits and Practices Emerging Tech Rapid Prototyping Product Development Materials Digital Fabrication Interactive and Immersive Digital / Physical Experiences Parametric Modeling and Design Visualization / Rendering Deconstructing Problems and Solutions Analyzing Systems of Logic Phase 1: Make Everyday Week 1: Overview Aug 28 (Friday) | Location: In Person + Zoom Meeting Intros / Course Overview ( Slides ) CM1 Student Questionnaire Making \"making\" a practice (aka Dailies, Everydays) Jonathan Harris - Today - Cowbird onepic_everyday by Allison Spiegel (C10) Beeple Everydays Things Organized Neatly Significant Nonsense 1 Second Everyday App Collecting Words by Brian Fouhy (C3) Getting Creative with Perlin Noise Fields House Numbers Styles Things Come Apart by Todd McLellan Codevember 52 Boxes in 52 Weeks CW 365 Days of OP-1 Methodologies for \"making\" Richard Serra Verb List (MOMA) / PDF Books Graphic Design: The New Basics The Art of Critical Making: Rhode Island School of Design on Creative Practice Got Skills? Lynda.com for students Processing Workshop We will go through a process of creating a simple poster sized 24x36 in using the Processing IDE. Download and Install Processing Sketch (Instructions on slides) Resources Processing Language Reference Learning Processing Visualizing Data: Exploring and Explaining Data with the Processing Environment Finding Inspiration Where do you find inspiration? Here are a few I frequent. MIT Technology Review Creative Applications Bantam Tools Podcast: The Edge - A great podcast about design and technology. CW&T / Instagram Instructables Radiolab Sleepwalkers Podcast - A podcast about AI, Machine Learning, Data, and Privacy. Creative Industries HardwareUX pdesign101 Age of Entanglement by Neri Oxman - An outstanding article and map / chart (The Krebs Cycle of Creativity). Tim Rodenbroeker - Input / Output Map Bauhaus Curriculum / Bauhaus || The School of Everything Designspiration The Coding Train Kurt Vonnegut on the Shapes of Stories (long version) / Kurt Vonnegut on the Shapes of Stories (short version) Four Tet: Looking Backward, Moving Forward Shapeways Material Guide McMaster Carr - TONS OF PARTS Assignment 0: Setup a \"maker\" blog Setup a dedicated blog to document your Critical Making experience. What if I already have a website/blog? Great! Just make sure you tag or categorize your posts with \"Critical Making 1\" so they are easy to locate. If you do not yet have a blog or wish to setup a dedicated site for this course, you have a plethora of options to choose from . Feel free to use whatever works for you to submit your work in blog post format. Many STCM students choose to use Medium because it's used to submit posts for RE Studio. Examples by previous students: Clayton Kenny (C11), Yvonne Danyluck (C11), Dave Laskowski (C11), Aitana Rothfield (C11), Gia Almuaili (C11), Tess Stevens (C11), Karen McClellan (C10), Allison Speigel (C10), Jonas Escobedo (C10), Sarah Cohen (C10), Diamond Alexander (C10), Kelly Phillips (C10), Hanshu Zhou (C10), Sarah Safranski (C9), Jim Murphy (C9), Matt Isola (C9), Nikki Cavalier (C9), Nick Balderston (C9) Examples of similar blogs: Chikara Inamura (HTMAA 2014) , Matt Keeter (HTMAA 2011) , Christos Tzamos(HTMAA 2014) , Zach Seibold (HTMAA 2014) , Merav Gazit (HTMAA 2014) , Dorota Orlof (FAB Academy 2018 Barcelona) Assignment 1: Know thyself Your first assignment consists of 2 parts: Part 1: Make a map Generate a map of some kind that communicates your journey to CMCI Studio. Such a map might be a timeline, visualization, info graphic, mind map, photographic series, video, written document, or any combination of these formats. Include your interests and pursuits in CMCI Studio. Questions: What led you to CMCI Studio? What is your question? Based on the survey, what do you feel strong in and what are you excited to learn more about through this course? Where do you see yourself by the end of the program? If you could design and build anything, what would it be? Resources Mind Mapping Part 2: Things I Like & Dislike Choose 3 things you like (or love) and 3 things you dislike (or hate) and describe what they mean to you and why. Possible choices might be products, objects, artifacts, or experiences. Be wary of pointing out behaviors in people or circumstances beyond your control or judgement. Focus on the tangible attributes that you can clearly articulate. Questions: What\u2019s their story? Who made them and why? Why do or did they exist? Why do you find them intriguing or despise them? Deliverable: Write and submit a blog post for Part 1 and Part 2 on your blog. Include any media in your post that supports your thoughts and ideas. Share a link to your post on Slack #cmstudio by Sept 7 (Labor Day). Due: Sept 7 Week 2: Tools for Development Aug 31 | Location: Zoom Meeting Today in class we will be working on setting up software and becoming familiar with some of the tools used for development. Questions Assignment #2 begins today Class Format over Zoom Break out rooms? Setting up your development environment What's that and why do we need it? What does a development environment look like? IDE's vs Text Editors, working code folder, Terminal, Node.js, NPM, Version Control. The combination of all these tools is what I refer to as a \"sandbox\" or local development environment. Terminal Workshop Hello Terminal Basic folder navigation and file creation Moving From Bash to Zsh: Terminal Changes in macOS Catalina Showing hidden files on your system \"dot\" files (aka a file with a dot or period at the beginning of it's filename is a hidden file) Install Git Github Workshop Version Control (aka a time machine for code/data) Setup Github account Create your first repo Markdown Demo: Local development environment Reference: Make a Sandbox (aka local dev server environment) Code: The Hidden Language of Computer Hardware and Software ASCII vs Binary Files ASCII - Data for a human to read/write Binary - Data for a computer to read/write Development Environment Lets get started by setting up a development environment. The most basic things you need for any web development tasks are a text editor and a browser like Chrome, Safari, or Firefox. Other tools such as the Terminal, Git, Github, and Node.js enable you to work with all sorts of libraries and frameworks, collaborate with others, and quickly prototype new ideas. All these tools come together under the idea of running a \"local development server\" or localhost on your machine. We will be setting up all these parts and will utilize them in different ways over the course of the semester. If you are curious about the history of electronics, computers, computer science, programming, and the Internet, check out the Histories section. I strongly advise you to start getting familiar with the various histories and technological underpinnings of the technologies you use every day. Remember, it's also about building awareness and understanding about the systems that run our world. These resources are meant to work through at your own speed and as you begin to ask deeper questions about why something works and how something works. I also highly recommend the book Code: The Hidden Language of Computer Hardware and Software by Charles Petzold. It is a foundational text on why computers are the way they are and how they work, beginning with code. Text Editors What is a text editor? What is it's purpose? How is it useful for development? When it comes to web development or software development work, you need a text editor capable of working with ASCII data and rich in features supporting development tasks. My editor of choice is currently Visual Studio Code (VSCode) . Will Microsoft Word, Google Docs, or Pages work? No! These are word processing applications that deal primarily with binary data because in addition to the actual text information stored in a .doc file, it encapsulates data such as font and formatting. Don't use these editors for this kind of work. You will be sad. Terminal Workshop What is the Terminal? What is it's purpose? How is it useful for development? Goals: Get familiar with the terminal by creating and manipulating files and folders on your system. Set up git to be able to use version control to manage projects on Github. Terminal 101 Location on MacOS: Applications/Utilities/Terminal.app For the Windows users: Cmder is a Terminal emulator that works in a similar way to the mac terminal. How to display hidden files on MacOS Customize your Terminal in Terminal > Preferences. It helps to make the text larger on most screens. Common commands: cd, ls, mkdir, rmdir, rm, mv, cp, pwd, man, touch . Think of all these commands as tiny applications that have no GUI. They are very old and have been around since the start of Unix based systems (Read this to learn more: Looking back at OS X's origins ). Look at MacOS/Linux/Unix Command Line Cheat Sheet to see more information about common commands. Working with directories and files: cd <folder> - Goto into a folder cd .. - Go up one level cd ../<folder> - Go up one level (to parent folder) and into a child folder cd ../.. - Go up two levels etc Tab completion - When you start typing in a terminal you can hit tab to complete the command if the file or folder you are going to use is available. If you hit Tab twice, you will see the contents of a folder. Getting out of or killing a process that is running in Terminal: ctrl + c Install Git You will likely not have Git installed on your machine by default. You will know if you have it or not when you type git into the Terminal. If you do have it installed you will see information about how to use it. If you don't, you will see the output \"command not found\". You may be prompted to install XCode Developer Tools when installing git. Accept the install and proceed. You have two options to install git: Install the XCode Developer tools (easy way) or download the installer from git-scm . After installing it the git command should work in the Terminal. This is essential to working with Github. Resources Learning Terminal - Cheetsheets and more! Learning Git How to use Terminal on Mac , How to use a Terminal on Windows Command Line Cheat Sheet by git-tower - This one is great for both git and terminal commands! Github Workshop Goals: Setup a Github account Create your first repository Publish some code to it How to Use Github Sign up for a Github account . Choose a username wisely. You might just be \"Internet famous\" someday. ( Stuck on choosing a username? Read this. A Tale of Github Usernames ) Create a hello-world repo on Github . If you check the box to add a README file it will include a README.md file in the repo. This is the main information file shown when you goto the repo URL Markdown = text file with special syntax that gets converted into HTML. Review Markdown Cheatsheet . Complete list of github markdown emoji markup Clone your repo using the terminal. Doing this will download a copy of your repository onto your machine. Clone Repo: git clone <repo url> . For Example, git clone git@github.com:rjduran/cm-sandbox.git . Note the URL and its use of \"git\" or \"https\". Use \"https\" to start. You need to go through the Github tutorial below in step #4 to connect to Github via SSH. Open VSCode and add the cloned folder to the workspace Make some changes to your README.md file using VSCode Stage the changes: git add . or git add README.md Commit the changes: git commit -m \"my message describing changes\" Push the changes: git push You will be asked for your username and password when attempting to push changes to your repo at this stage. Once the changes are uploaded you will see the changes on the Github page for the repo. Yay! Good times! Success! Pro tip: After setting up your Github account, read through Connecting to Github with SSH to setup your system to connect securely to Github and not require you to enter your username and password credentials each time you push changes. Assignment 2: Everyday Project Objective: Make something and capture a digital representation of it each day for the next 2 weeks. You should have at a minimum 14 objects. Thoughts on how to accomplish this: Choose any tool(s) at your disposal. Choose any theme or topic. Date Range: Monday Aug 31 to Monday Sept 14 Decide how you will document your project. For example, Instagram, blog post, a single image, a document, a Github repo commit, a video, etc. Consider how the result will travel digitally. Refer to the projects and practices you observed from last week. Questions: What do you already make and want to make more of? What new thing has peaked your interest and will you use to make something every day? Deliverable: Submit a blog post documenting your project process and outcome in Slack #cmstudio . Due: Sept 14 Week 3: Labor Day Sept 7 Labor Day, No Class Phase 2: The Modern Web In this phase we will talk about web development paradigms and practices and you will build your web development skills inside and outside of class. We will approach each topic with simplicity in mind and focus on understanding fundamental concepts. To build advanced skills with the tools we discuss you will need to dedicate time outside of class for further experimentation. We will approach topics in a hands-on workshop format so be prepared to dive in. If you do have some web development experience coming into the program think about some new aspects of development you are curious about such as libraries, frameworks, responsiveness, interactivity, animations, Javascript, types of tech stacks, or just how you can improve your skills in what you know through practice. The goal of this phase is to gain a sense of how you can utilize web technologies to solve problems. Week 4: Intro to Web Development Sept 14 | Location: Zoom Meeting Discussion CMCI Equipment Resources Assignments 1,2 Share Terminal, Git/Github Questions Github: How do I make a copy of a repo into another folder? Github: How do I assign a different remote to a repo? Repo for this phase: https://github.com/rjduran/cm1-web-dev The World Wide Web What is the World Wide Web and what is its purpose? The purpose of building websites and web applications is to make an idea accessible to people. While we won't look into the history of the Internet very much, it's still worth spending some time reading more about the innovations and contributions to the Internet as we know it today under the History of the Internet section. The Industry What do web developers do? Collaborate, write code, evaluate new tools, solve technical problems, synthesize, make prototypes. What do web developers need to know? At a minimum the 3 web languages, HTML, CSS, and JS. Beyond this it really depends on the project or idea. Many choose to specialize in different kinds of tech stacks supporting front-end development, back-end development, or full-stack development. Learning how to learn and apply technical skills is your best asset. How do you learn web development skills? Make lots of web things to practice. Make lots of mistakes to learn. Pick up books on the subject. Watch tutorial videos on development topics. Read blogs like those below and try everything you read about. In this ever evolving field you are constantly learning new tools and workflows. Stacks & Maps These resources are for you to investigate the world of development. Think of them as maps to learning about different roles and technologies. Front End, Back End, Full Stack\u2014What Does it All Mean? Front-End vs Back-End vs Full-Stack on Udacity A Guide to Becoming a Full-Stack Developer in 2017 - If you only read one of these, read this one. How it feels to learn JavaScript in 2016 - Read through this and see if you can begin to make sense of the current development ecosystem. (Note: Its complex and a little bit insane but this guy makes a good (fun) read of it.) The 2019 Roadmap To Fullstack Web Development The 2019 Web Developer Roadmap - Has some great flowcharts showing how different technologies relate / Github Source . - Look at these maps if you want to see the big picture. Web Languages Workshop | In Class, 45 mins Webpages are constructed in 3 languages - HTML, CSS, and Javascript. Modern browsers will render pages built in these languages more or less the same depending on the viewport size and device orientation. In the resources below you can find some learning pathways for building skills with these tools. Make time to read through the basics of all the languages and try things out. Most importantly, seek to apply the skills you are learning towards projects. How does a web language relate to what a user sees? HTML = Document Structure CSS = Visual Language (Layout, Identity) JS = Interactivity & Dynamics What IS the composition of a webpage? At a basic level all you need is a single index.html file with <html>...</html> and enclosing <body>...</body> tag to render a webpage. All the CSS and JS you may have can exist inside the same file embedded within <style>...</style> and <script>...</script> elements. It only becomes important to separate the 3 types of code when a project becomes too large to manage within a single file, which is very common. Best practices, modularity, and the need for regular maintenance have led developers and designers towards a current approach of establishing and using style guides or coding standards . Exercise 1: Hello HTML Goals: Understand how to make a basic HTML document using a text editor (VS Code) Understand how to structure a document for HTML, CSS, and JS Understand how to use the browser for viewing a page Instructions: Make a new folder called \"hello-world\" for your project files. Pro Tip: Setup a dedicated code folder for all your code based projects. I use one called code inside my home directory (/Users/rjduran or ~/). Open VS Code and add the \"hello-world\" folder to your workspace. Using VS Code make a new file called index.html in your project folder. Open Chrome and open the index.html file. You should see a blank page. This is your document without any content. In your index.html file, add the html, head, and body tags into the document. What are these tags used for? In your index.html file, add a few elements such as h1, h2, p, a, and img into the document body. What are these tags used for? Toggle between Chrome and VS Code to see your changes rendered in the browser. CMD + R to reload the page in Chrome. Exercise 2: Hello CSS Goals: Understand how to add CSS to a HTML document (internal & external) Understand how to use CSS selectors - element, .class, #id Get familiar with how to use CSS properties Instructions: Create a new file called style.css in your \"hello-world\" folder. We will use this in step 8. Create a <style>...</style> tag to insert css into. Which part of your document does this go into? Write your first selector to change the color of a h1 element from black to red. Notice that css allows plain english words used for color or hex values such as #FF0000. (What, hex values? How to Read Hex Color Codes ) Reload the browser to see your changes. Now write a class selector called .title and apply it to the h2 elements. Give the color property a value of green or #00FF00 . What happens when you reload the document? Now write an id selector called #space-cat and apply it to your img element. Lets give the cat pucture a solid border with a 5 pixel width and make it blue. Open your style.css file you created in step 1. We will be copying our css into that file now. Copy and paste the code contained within your <style>...</style> element into style.css file. In your index.html file, insert the link tag to specify the external css file. <link rel=\"stylesheet\" href=\"style.css\"> . This tells the index file to use the css it finds there. What happens if you load a css file and have css in your index file? Which selectors are used? Reload in the browser to see changes. Resources W3 Schools HTML Reference W3 Schools CSS Reference BREAK - Take 10 min Website Analysis Workshop | Breakout Rooms, 20 mins Goals: Get familiar with the Elements tab in Chrome development tools Understand the general structure of a HTML document Understand how HTML and CSS create visual heirarchy and organization Instructions: Choose one of the Bootstrap examples to inspect. Using the Chrome development tools, inspect the site. Look at the HTML elements and the overall structure of the page. Chrome Developer Tools (Inspector for debugging). Access via: View > Developer > Developer Tools within Chrome. What do you notice? Discuss with your group. Make a quick wireframe sketch on paper of the page you are inspecting. Label the different parts of the page using common terminology (ie. header, sidebar, footer, post, etc) and HTML tags with opening and closing characters( < , > ). What do you notice? Discuss with your group. Identify 2-3 HTML tags and look up their meaning on W3 Schools HTML Element Reference . Share your findings with the group. Exit breakout room and discuss your findings. Local Development Workshop | In Class, 30 mins Goals: Setup a local development server aka Sandbox. We will follow the instructions under How to build a Sandbox . Get familiar with starting / stopping a local server in the terminal Understand the development workflow Instructions: Once your live-server is setup, launch an instance and open the browser. Make an edit to your index.html file and view the changes in the browser. Try launching a second server from another terminal window. What happens? Resources Example: hello-live-server Assignment 3: Ode to Things Choose one (or more) every day object(s) in your life and make a simple website for it / them. You might consider the site as a container for a favored item or collection of things, a product to sell, or simply a site that pays tribute to the item or object and what it means to you in life. This idea was inspired by the website Ode to Things , which is an e-commerce store and curated collection of physical every day products. Thoughts on how to accomplish this: Build a webpage from scratch that makes use of HTML elements and CSS selectors. Use necessary html elements that act as containers for different types of content and page heirarchy: text, images, video, etc. Develop your webpage using a local development environment aka live-server. When done, make a repository on Github for your project and commit the required index.html file and and any media files to it. I should be able to clone your project repo and run it in a localhost on my machine to see the same result without changing filenames or folders. Hint: The repo should look similar to the hello-world folder and files you created in class. It should also include a README.md file since you always include this text file with any Github repo you create. Video: CM1 Assignment 3 Tip: Github, VSCode & Terminal Workflow Advanced Option: If you are feeling comfortable with HTML and CSS, explore an aspect of HTML or CSS that is new to you or take the leap into Javascript or using a front-end framework. Deliverable: A short 1-2 min video screen capture demonstrating your website running in a local development environment as setup in class. Be sure to briefly introduce yourself and your project, provide an overview of what you made and how it works. Embed the video into your blog post. Pro Tip: If you are new to screen capture tools, look into using Screencast-o-matic or the built in screen capture tools of MacOS (CMD + Shift + 5) to document your workflow. Create an account with Youtube and upload your video. Include a link to your Github repo for the code written. A brief writeup on your blog about your learning experience. What hurdles did you encounter and how did you overcome them? What worked and what didn't? What new tools did you try? How would you explain what you've done to someone that doesn't know anything about web development and the tools used? Submit a link to your post on Slack #cmstudio by EOD. Due: Sept 21 Week 5: Web Applications & Frameworks Sept 21 | Location: Zoom Meeting Discussion | 20 mins Assignments 3 Share / Questions Project Management Tips Use a .gitignore file or (better way) create a global .gitignore file that ignores .DS_Store. This is a junk file on macOS that creeps into Github projects all the time. Rename files to something short and simple when possible. Replace spaces in filenames with \"-\" or \"_\" characters. When sharing the Github repo you only need to share the URL from the browser. Omit the .git extension. For example, https://github.com/rjduran/cm1-web-dev . File paths - Be sure to only reference files in folders within your project folder. For example, do this /img/image1.jpg and not this /Users/rjduran/Desktop/image.jpg . Relative vs Absolute file paths ( HTML File Paths ) Agenda Javascript Workshop Frameworks & Libraries Break Front-End Workshop Web Applications Javascript Workshop | In Class, 20 mins Javascript is an enormous topic and we will only begin to scratch the surface of it today. I highly recommend working through some of the resources below and looking at the resources under the Learning JS section. There are several great books and tutorial series that can give you a foundational understanding of the language and it's many uses. If you were to learn one programming language, I would recommend this one. Goals: Understand how to add JS to a HTML document (internal & external) Get familiar with how JS can modify the contents of a page Get familiar the Chrome Dev Tools console Instructions: Create a new file called script.js in your \"hello-world\" folder. We will come back to this at a later step. Add the <script>...</script> tag in your document. Where should you place it? Discuss. Inside <head> = load before body contents Just before </body> tag = load after body contents Call the alert function and give it a string of text. What happens when you reload the page? alert(\"hello spacecat!\"); Decalare a variable and give it the same string of text as a value. Now use the variable in the alert. What happens? var message = \"hello spacecat!\"; alert(message); Comment out the alert with a single line comment. Now, print the value to the console in the browser using the console.log() function. What happens? Copy and paste contents of <script> tag into the script.js file and comment out everything inside of <script> . What happens? Resources JS for Cats - This one walks you through the basics of JS using the Developer Tools Console in Chrome. I recommend this one first. JavaScript Tutorial for Beginners: Learn Javascript in 5 Days - This goes a bit deeper but worth the time spend to understand the basics. I recommend this second. freeCodeCamp - Introduction to Javascript - This tutorial series walks through many common examples and use cases. I recommend it third. W3 Schools JS Tutorial - I recommend this resource as a reference and for the tutorial series. A Study Plan To Cure JavaScript Fatigue (2016) Programming Terminology - A Wikipedia for Programming, Computer Science, and Much More. Don't know a term? Look here. Eloquent Javascript - This is a great free book to learn more about JS language fundamentals. DOM (Document Object Model) The DOM is a standard object model and programming interface created by the browser when a webpage is loaded. It is essentially your HTML page but in a different format now accessible through a browser based programming interface and language (Javascript). In general, JS can manipulate (get, change, add, delete) any part of the DOM (ie. any part of a page or document). Here's a great image of the DOM DOM Tree Visualization Example on CodePen Try opening the Chrome Developer Console and typing document or window . What does it return? How does it relate to the DOM image above? JavaScript DOM Tutorial Series (Video Playlist) - A great series of videos introducing the DOM and how to manipulate it with Javascript. It totals 2 hrs in duration but is extremely helpful to understand some aspects of the Javascript language and how it can be used. Eloquent Javascript: CH 14 - The Document Object Model JS Events and the DOM Frameworks & Libraries What is a framework? What is a Library? Library A library is a collection of code containing objects, functions, and methods that you can use in an application or project. It can be written in CSS, Javascript, or some combination of both. Some common libraries: Google Fonts , Animate.css , Draggable.js , masonry.js , p5.js , D3.js , and Three.js . Framework A framework can be everything you use in application development. It can consist of both front-end and back-end toolsets. It can be a library, a collection of libraries, a collection of scripts, or any piece software you need to create an application. It's best to think about a framework as something that is mostly ready to use out of the box, but still requires an understanding of the terminal, version control, and the web languages: HTML, CSS, and JS. Some common frameworks: Bootstrap , W3.CSS , Materialize , Shoelace , React , Express , and Electron Framework . Evaluating a Library or Framework There are several questions you might ask yourself when choosing to use an existing library or framework. You typically start by looking at the documentation to compare similar features and components and to see if it does something you would like to incorporate into a project. What does it do? What's the benefit of using it? How do you use it? Pros and cons? Are there examples to follow? Is there a large community? Where can I get help? Resources Front-End Case Studies - A great collection of case studies about development tools and practices across the industry. The State of JS 2019 - A great resource showing the state of various JS based frameworks. Top Bootstrap Alternatives Bootstrap Alternatives: The top 36 options in 2020 BREAK - Take 10 min Front-End Workshop | In Class, 45 mins In this workshop we will walk through building a filterable student list from scratch. It will use Bootstrap as the front-end framework and vanilla javascript to filter. References: Figma Design , Github Repo Goals: Learn how to incorporate a front-end library or framework into a project. Understand how to structure a document based on the framework used. Learn how to utilize Javascript to filter a list of items. In this case student names. Instructions: Create a new project folder called \"student-list\". Create an index.html file inside the folder. This will be your primary document. Open Terminal and start a live-server instance inside your project folder. Naviagate to the Bootstrap documentation and look for the Starter Template code. Copy and paste it into your index.html file. You should see an empty page that says Hello, World! in your browser automatically as long as live-server is running. Add a div element with the class=\"container\" inside your body element. All your content will go in here. Below the container div and just ablve the closing body tag, add a <script>... </script> element. This is where we will put all our Javascript code. Refer to the Figma Design to see what the page should look like. What elements will you need to make your document reflect the design in Figma? Tip: Look at the components section of the Bootstrap documentation. Once you have the general structure of the page, we can proceed to make it interactive when typing into the search field by using javascript. Proceed to implement a filter algorithm as described in class. Questions / Next Steps How do I add more data to the page? How do I update the data? Where is the data stored and how do I access it? Resources W3 Schools Bootstrap 4 Tutorial Bootstrap Figma - Signup for a free account with your @colorado.edu email address and apply for a free Education team . Bootstrap Design 1.0 (UI Kit) ($12) - A great BS4 UI kit for Figma. Javascript Language References DOM Document Functions document.createElement() HTML DOM className Property Web Applications What makes a web application? The modern term \"web application\" applies to a variety of systems or stacks. Typically, these systems communicate with one or more servers for access to system resources like memory, databases, and cpu or gpu. ie. speed, power, and connectivity. It may have more than one type of client interface. ie. Mobile, desktop, API, or another application. What are some common types of websites or web applications? Static Website - Basic websites, blogs, etc Native or Mobile App Progressive Web App (PWA) - A responsive mobile website that mimics the behavior of native or mobile apps. Single Page App (SPA) - An application that is dynamic and interactive without reloading the entire page. Resources Web Application Architecture - Summary of the components found in various kinds of web apps. Assignment 4: Digital Legos Choose one or more libraries or frameworks and make something with it. Thoughts on how to accomplish this: If you have project in mind for your final project or another project, begin to identify what tools you might use to build that project and attempt to work on a piece of it. What functionalites does the project need? (Maybe there's a library for it) How do you see the project working from the user experience? What design elements can you identify and how might they be coded? Investigate libraries that seem interesting to you. Assess their capabilities and how you can apply it to a project. Begin by looking over examples found in the documentation. Look for \"getting started\" documentation about a library or framework. Work through it and see where it takes you. Google is your best friend. Try to be as specific as possible when invesitgating a library or framework. What is your motivation for learning it and what do you want to accomplish with it? Identify some specific uses of it and focus. Start simple. Dont try to understand it all. If you copy and paste code from somewhere, copy one line at a time and learn what it does. Then add more code and repeat. It's easier to start simply and build up complex functionlaity than to work the other way. Use comments (in JS, HTML, or CSS) to write notes to yourself. Work together! Share code, ideas, and libraries you find with eachother. Have fun with it! Make a repository on Github for your project and commit all project files to it. I should be able to clone your project repo and run it in a localhost on my machine to see the same result without changing filenames or folders. Note: Your repo should always include a README.md file with instructions about it's use and what it does. Deliverable: A short 2-4 min video screen capture demonstrating your project running in a local development environment. Be sure to briefly introduce yourself and your project, provide an overview of what you made and how it works. Embed the video into your blog post. Include a link to your Github repo for the code written. A brief writeup on your blog about your learning experience. What hurdles did you encounter and how did you overcome them? What worked and what didn't? What new tools did you try? How would you explain what you've done to someone that doesn't know anything about web development and the tools used? Submit a link to your post on Slack #cmstudio by EOD. Due: Sept 28 Week 6: Data, API's & Connectivity Sept 28 | Location: Zoom Meeting Discussion | 20 mins Assignment 4 Share Questions on projects, tools, languages - HTML, CSS, JS, etc Working together Agenda APIs - What and Why API Mashup Session - 30 mins Break - 10 mins Data - How API Workshop - 45 mins API's What is an API? What is the purpose of an API? How do you use them? How do you make your own? Most importantly, as a designer of the future, what does one need to know to work with APIs? The best place to start is by looking at what kinds of APIs exist and how they have been used to build products. Popular APIs Google Cloud Platform Google Maps Embed API Instagram Platform (API) - Start with Instagram Basic Display API Twitter Slack Youtube Soundcloud Spotify Google Sheets New York Times ( Dan Shiffman Tutorial ) Goodreads Numbers API Wordnik Discogs Pandora NASA Marvel Comics Yelp Uber RTD Denver US Patent Office (USPTO) Voice APIs Google Text-to-Speech Amazon Polly Hardware APIs Google Nest Amazon Echo & Alexa Devices API Mashups What's a mashup? It's an application that utilizes one or more APIs in combination to provide a solution to a problem or ask new questions. What is an API Mashup? Programmable Web Mashups HousingMaps (2005) was the very first Google Maps mashup, created before there was a Google Maps API. It overlaid Craigslist apartment and housing listings on a map, for some 30 US cities plus London. We Feel Fine by Jonathan Harris (2006) - New media art project that explores human emotion on a global scale. Radiolab: Insomnia Line - Recent episode that explores the use of voice mail to connect with people experiencing insomnia. I thought this was an interesting parallel and accessible form of crowd sourcing data relating to emotional states. #Elkbot (2011) / Demo WIP Video - by RJ Duran & Chris Znerold INFOGRAPHIC \u2014 A History of Modern API Mashups TOP 15 MUSIC APIS TO POWER YOUR NEXT MASHUP Mapping World Literature with Mapbox by Tess Stevens (C11) API Based Platforms These are platforms that utilize APIs in their products. The use of one or more APIs is core to their busoiness model. later.com - Instagram Marketing Slack Apps - Apps for Slack ecosystem Zapier - Connects anything to anything else Where to Discover APIs Public APIs - A collective list of free APIs for use in software and web development. Programmable Web - This is a great resource for discovering APIs and learning how to use them. API University Free Public APIs for Developers APIs 14 Most Popular Art APIs 30+ Most Popular APIs for Web in 2020 Top 10 Artificial Intelligence APIs for 2020 Top 50 Most Popular APIs on RapidAPI (2020) 6 Interesting APIs to Check Out in 2020 API Mashup Session | Breakout Rooms, 30 mins In teams, brainstorm a concept or solution that makes use of 2 APIs. Spend some time researching the APIs of interest and brainstorming how they could be used to solve a problem or simply have some fun. Make a list of questions concerning that arise in the process. Place all your ideas into the shared API Mashup board board in Milanote. Your will need to signup for an account to work in this shared board. Some things to think about when brainstorming and researching APIs: At a high level: What kind of possibilities emerge when you combine chosen APIs? Whats unique to each API? What features does it have? How do the APIs chosen complement eachother? At a lower level: What kind of data is available? What kind of access is required to make the API work? What does your product or website need to ask of a user? What kind of permission? And what does that mean for how the API is used? When time is up we will come back together and discuss then take a break. BREAK - Take 10 min Data What is Data? How is it represented? JSON, CSV, TXT How do I make a database? What is a database? Web applications read/write into databases on servers using data formatted in JSON. Web applications communicate using JSON. Overviews How to Use an API: Just the Basics JSON is Clearly the King of API Data Formats in 2020 Building Databases / APIs I have an idea for a database or API. How do I begin put something together? What tools can I use? Building an App the Simple Way: 6 Database-Powered App Builders (2015) - List of tools to build databases. 11 Best Tools to Test and Build API Faster Strapi - Node.js based headless CMS Firebase - Dan Shiffman's Firebase Tutorial - This is a great resource for going deeper into JS, APIs, and related programming topics in general. Sheetsu - Makes it easy to access a Google Sheet through an API Postman - A great tool for testing all types of requests to/from APIs hoppscotch - Similar to Postman but web based Additional Resources REST, CRUD HTTP/HTTPS, Ports, URL HTTP HTTP: The Protocol Every Web Developer Must Know - Part 1 Understanding Application Layer Protocols HTTP Request Methods Ports List of ports . For example, http uses port 80, https uses port 443. CRUD What is CRUD? URLs Whats in a URL? protocol, host, port, resource path, query ( Image ) REST What is REST What exactly is RESTful programming? Understanding And Using REST APIs - Great overview of APIs and using them. Javascript Shiffman - Data, Libraries and APIs - A great section of Dan Shiffmans Programming from A to Z Course covering APIs, data, and p5.js. Fetching data from a server - Explains how to use Fetch API (fetch()) vs jQuery.ajax() vs XMLHttpRequest . JS Datatypes Understanding Data Types in Javascript Arrays Data Type: Arrays Arrays Quick Reference Array vs Set vs Map vs Object\u200a\u2014\u200aReal-time use cases in Javascript (ES6/ES7) Objects Data Type: Objects Debugging: Using typeof . typeof \"a string\" Objects Quick Reference Javascript Built-In Object Reference Eloquent Javascript - This is a great book to learn more about the language and how to use Objects. JSON JavaScript Object Notation (JSON) - A syntax for storing and exchanging data. JSON Syntax API Workshop | In class, 45 mins Example 1: Reading data from a Google sheet Ways to read data from a Google Sheet as your database. Method 1: Google Sheets Reader Requires: Node.js Method 2: Tabletop.js Method 3: Sheetsu - Sheetsu makes it easy to access a Google Sheet through an API. Example 2: Requesting data from an API This will use the student list database I setup in Strapi . We will look at how it is setup and how it is pulling data from the database into the page. We will also look at how to make a localhost accessible to anyone on the web using ngrok and localhost.run. The code is available under week6/student-list-strapi in the class repo. Tools we will look at: JSON Formatter makes it easy to see JSON data in the browser. Postman - Allows you to send requests to an API How to share a database or localhost over the Internet: Method 1: ngrok - Requires node.js. Sessions limited to 8 hrs. To use: In Terminal, type ngrok <protocol> <port> . For example, to share a localhost running on port 8080, enter the following. Note this process uses two Terminal windows. Once the connection is established, you will get a public URL to use. ngrok http 8080 Method 2: localhost.run - No install required. SSH Keys required. To use: In Terminal, type ssh -R 80:localhost:8080 ssh.localhost.run . For example, to share a localhost running on port 8080, enter the following. Note this process uses two Terminal windows. Once the connection is established, you will get a public URL to use. ssh -R 80:localhost:8080 ssh.localhost.run Assignment 5: Connect The Dots This week I would like you to explore the world of APIs in two ways: Design a mashup concept that attempts to solve a problem. Choose an API to get familiar with and attempt to make something using it. Thoughts on how to accomplish this: Continue down the path you came up with during class or develop a new approach. Spend some time researching APIs that are in line with products or services you are familiar with and use often. Research mashups that use an API you are exploring. What was done? Can it be improved? What are some of your hobbies and interests? Is there an API for it? If not, what if there was? Whats possible then? Write down the names of a bunch of APIs you research and put them into a hat. Stir it around and pull out two. Repeat this process for a time and write down all the combinations. What's interesting? Look for recent tutorials that make use of an API you are curious about. Attempt to recreate the workflow. Start with simple GET requests and increase the complexity of your queries as you get more familiar with the documentation and API. Work through the class examples and develop a workflow that enables you to work with data in a new way. For example, using Google Forms (for user data input) to generate a database (Google Sheet), which you then can pull data from via API. Experiment with an API and ask \"what if?\" questions in the process. WORK TOGETHER! Make time to work together outside of class. Have fun with it! Make a repository on Github for your project and commit all project files to it. I should be able to clone your project repo and run it in a localhost on my machine to see the same result without changing filenames or folders. Note: Your repo should always include a README.md file with instructions about it's use and what it does. Deliverable: A blog post describing your ideas and sharing any visuals created or referenced to illustrate the concept. You can record a short video presentation with slides if that helps to share the concept. Embed your video into your blog post. Include a link to your Github repo for any code written. Submit a link to your post on Slack #cmstudio by EOD. Due: Oct 5 Phase 3: Digital Design Foundations Source: 7 Days, 700 Pens: Parametric Design for Customized Conference Swag by Formlabs In this phase we will look at tools and workflows that support 2D and 3D digital design. We will approach each topic with simplicity in mind and focus on understanding fundamental concepts. To build advanced skills with the tools we discuss you will need to dedicate time outside of class for further experimentation. We will approach topics in a hands-on workshop format so be prepared to dive in. The goal of this phase is to learn how to utilize digital design tools to create and represent concepts. Week 7: Intro to CAD Oct 5 | Location: Zoom Meeting Discussion | 30 mins Assignment 5 Share Questions Agenda CAD Overview Intro to Tinkercad Intro to Rhino Break - 10 mins Intro to Fusion 360 Computer-Aided Design (CAD) What is CAD? Why is it useful? ( Hint: Look around. What do you see? Almost everything in our human built environment is made using an industrialized CAD/CAM process. ) History of CAD Vintage Photos: Life Before AutoCAD 60 Years of CAD Infographic: The History of CAD since 1957 The Engineering Design Revolution: The People, Companies and Computer Systems That Changed Forever the Practice of Engineering By David E. Weisberg . Chapter 2: A Brief Overview of the History of CAD CAD vs CAM - What's the difference? (We're working towards CAM in Phase 4: Becoming Physical ) CAD = Computer-Aided Design (Input: Idea for 3D model; Output: 3D model and/or instructions for CAM.) CAM = Computer-Aided Manufacturing (Input: Toolpath file / machine code; Output: Physical Object) CAD Tools 2D - Adobe Illustrator , Adobe Photoshop , etc 3D - Fusion 360 , Rhino , Tinkercad , Autocad , Inventor , Solidworks , Blender , Cinema4D , etc File Formats 2D Raster - JPG, PNG, TIFF Vector - AI, EPS, DXF, SVG, PDF 3D - OBJ, STL, STEP, IGES, GLTF 3D Meshes A polygon mesh is a collection of vertices, edges and faces that defines the shape of a polyhedral object in 3D computer graphics and solid modeling. The faces usually consist of triangles (triangle mesh), quadrilaterals (quads), or other simple convex polygons (n-gons), since this simplifies rendering, but may also be more generally composed of concave polygons, or even polygons with holes. Source: Wikipedia Besides designing a 3D model directly in CAD, what other ways can you get a 3D model or mesh? Downloading a model from Thingiverse 3D Scanning - Structure Sensor 3D Scanner Photogrammetry - Metashape Pro Data Driven - Microscape , Tutorial on making 3D printed maps Algorithmic / Generative - Nervous System , Form+Code in Design, Art, and Architecture fMRI, CT (Medical Imaging) - 3D print of my brain and skull from MRI data Confocal, etc (Biological Imaging) - Imaris Utilities These tools help you easily view 3d models (stl / meshes). Meshlab Meshmixer Typical Digital Design to Fabrication Workflow Step 1: Design with one or more CAD tools for the desired production method(s). For instance, laser cutting requires 2D vector or raster artwork and 3d printing requires a 3D model. Step 2: Fabricate by hand or machine or some combination of both. Return to step 1 and repeat as needed. Hand: - cut, carve, bend, sand, etc Manual Machines - Mill, Lathe, Saw, Drill, etc Computer Numerically Controlled (CNC) Machines - CNC Mill, CNC Router, 3D Printer, Laser Cutter, Plasma Cutter, Water Jet Cutter, etc In general, most workflows consist of a series of steps where specific tools and knowledge are put into action to complete the step and move to the next step in the process. In terms of digital to physical workflows, we're always dealing with data in some form / file format. Its good practice to get familiar with input and output formats for any CAD tool you work with because you then know what the tool is capable of and how other tools can interface with it. Most CAD environments can work with a variety of 3D file formats such as STL, OBJ, STEP, and many others. Workshops We will survey a few different CAD tools with the goal of understanding some of the similarities and differences in workflow. There is no single CAD tool that does anything and everything. The most power workflow I can suggest comes from working with a variety of 2D/3D tools to realize an idea. As with most tools we encounter as designers, each one has a learning curve with some aspects being steeper than others, but with practice, they will become easier to use. I highly recommend spending the time this week exploring the learning resources available below. Intro to Tinkercad Interface / Navigation Drawing Geometry Modes - 3D Design, Blocks, Bricks Importing / Exporting Intro to Rhino Workshop Intro to Fusion 360 Workshop Resources Rhino Resources Rhino Tutorials Think Parametric: Rhino 101 - Fundamentals of 3D Modeling Plethora Project Rhino 6 Essential Training - Linkedin Learning Login Required Learning Rhino 6 for Mac - Linkedin Learning Login Required Create a Pattern on Vase Surface - Neat beginner tutorial showing how to apply a pattern to a surface. Modeling an Espresso Cup and 3D Print with Shapeways - A great design to fab workflow demonstrating how to take a model created in Rhino and upload to Shapeways to evaluate material options, print cost, and 3D print. Step by Step Tutorial of Modeling a Mug - A great beginner tutorial walking through modeling a mug from references images. If you are completely lost with Rhino, start here and work through the whole tutorial. Fusion Resources Fusion 360 Gallery Fusion 360 Manual Learn Fusion 360 in 60 Mins Fusion 360 Design Academy Fusion 360 Adoption Portal Fusion 360 Forum - Need help? Check here. Tutorials Arduino UNO Enclosure Tutorial ( Arduino UNO Model , Arduino Drawing ), Shorter version Parameter Driven Project Enclosure Bookshelf Tutorial - Watch to get a good walkthrough of sketching basics. Making Parametric Models in Fusion 360 Easy Snap Fit Cases Udemy: Product Design in Autodesk Fusion 360 from idea to prototype Udemy: Designing for 3D Printing with Fusion 360 Assignment 6: From Sketch to Model This week I would like you to explore CAD tools by creating a 3D model from a sketch. Thoughts on how to accomplish this: Spend time sketching out ideas on paper or making something physically with paper, cardboard, or other materials. Attempt to translate the shapes you put together into 3d in CAD. Think in terms of problems (as design opportunies) and solutions. Where do you see a need for making something using a CAD tool? Spend time looking through the resources listed above. There are several tutorials that can be worked through. Work through Linkedin Learning lessons and focus on applying a few tools or techniques to create your model. Inspect models you find and attempt to recreate the model in your CAD tool of choice. If you use a tutorial to guide the design process, make it a point to deviate from the instructions to make the design your own. Simplify your design to make use of basic shapes you know how to manipulate. Then increase the fidelity. Measure something real and physical to get the dimensions. Attempt to draw something that matches the specifications. Read the documentation or manual for the tool. WORK TOGETHER! Make time to work together outside of class and share modeling tips. Have fun with it! Deliverable: A blog post describing your design process from sketch to 3D model. What did you design and why? What challenges did you face while making your model? What resources did you use? Export a mesh (STL File) of your model and upload it to Sketchfab (You will need to make an account). Once uploaded to Sketchfab, embed your uploaded model into your blog post. Here's a tutorial about how to do this . This is the same as embedding a Youtube video into a blog post, but with a 3D viewer window containing your model, which you can manipulate and even visualize in VR! Cool eh!? Check out these examples from past students . Be sure to include any screenshots and visuals created or referenced to illustrate your ideas. You can record a short video presentation or process walkthrough if that helps to share your project. Embed your video into your blog post. Submit a link to your post on Slack #cmstudio by EOD. Due: Oct 12 Week 8: Parametric Design Oct 12 | Location: Zoom Meeting Assignment 6 Share It's great to see the variety of approaches to this project. Leveraging available resources is key for working quickly on a concept while ramping up on a new skillset or toolset. Export FBX files to retain basic color information when importing into Sketchfab. Textures can not be exported in any format. Agenda Parametric Modeling vs Direct Modeling Examples of Parametric Design Break Fusion 360 Work Session Rhino & Intro to Grasshopper Work Session? - How many people experimented with Rhino? Parametric Modeling vs Direct Modeling Parametric Modeling Parametric Modeling (aka Parametric Design) is a process based on algorithmic thinking that enables the expression of parameters and rules / constraints that, together, define, encode and clarify the relationship between design intent and design response. This approach follows a step by step process and may require careful planning to design a model. Parametric modeling is extremely useful for products that are driven by dimensions\u2014think standard office fare like desks and shelving or tools that can vary in size. With the parametric approach, engineers can quickly and easily create different configurations of their designs. Direct Modeling Direct modeling empowers you to define and capture geometry quickly, without spending time worrying about features, constraints, and original design intent. It is often compared to working with modeling clay. Simply push and pull the geometry until you arrive at just the shape you want. In direct modeling, designers can push and pull on their model to change it. One benefit of this capability is the ease with which designs can be altered, enabling rapid iteration and prototyping. For that reason, direct modeling has found a niche in the world of industrial design, where fluid curves and bold aesthetics play a big role. So...what is Rhino and Fusion 360? Fusion 360 Parametric Modeling History-based Does not have a node-based visual editor similar to Grasshipper built-in to Fusion (yet). The closest solution would be to use Dynamo Studio and plugin Dynamo for Autodesk\u00ae Fusion 360\u2122 . Rhino Direct Modeling History-free, unless it's enabled for specific operations. See History . Has node-based visual editor Grasshopper (aka Explicit-history) built-in. Through Grasshopper, parametric design is possible, taking form as a \"definition\" which consists of the design history and thereby the object. Others In the past few years, many other types of CAD-like hybrid environments have come to term such as Onshape , a CAD based prodcut design platform. Similarly, node-based editors or plugins for CAD environments offer designers open-source and accessible alternatives to Grasshopper and Dynamo. Tools such as Sverchok and Sorcar for Blender are paving the way. References: Parametric Design (Wikipedia) , What\u2019s the Difference Between Parametric and Direct Modeling? Introduction Grasshopper and History Parametric vs Direct Modeling What is Design Intent? Examples What types of objects can be considered \"parametric\"? Just about anything really. Some examples: Cups, Vases, Pitchers, Bottles, Bells, Bowls, Clothing, Furniture, Lighting, Cars, Personal Items, Buildings!... what else? Parametric Design Examples CW&T 100 Dropped Pendant Lights (2017) Formlabs Digital Factory Pens (2017) Gillette Uses 3D Printing to Unlock Consumer Personalization (2018) #100bottles100days by Anna Whitehouse - \"Touch Clay Everyday\" Nervous System Design Apps , Kinematics @ Home WOVNS , Processing Tutorial Opendesk Mercedes Grille Patterns Fusion 360 Work Session Open your projects for this week and lets look at issues you ran into. What gave you trouble? Assignment 7: Mass Customization Design a parametric model and produce 3 variations that meet the needs of 3 different users. For example, 3 different chairs made to fit 3 sizes of human bodies - small, medium, large. The chairs all posses the same characteristics except the size. Thoughts on how to accomplish this: Spend time sketching out ideas on paper or making something physically with paper, cardboard, or other materials. Attempt to translate the shapes you put together into 3D in CAD. Iterate on your previous project. How can you make the model fully parametric? What parts of your model need to be parametric? Hint: If you are using Fusion 360, you will likely want to make use of Constraints and Dimensions in your sketches and entering values into the Parameters Window. If you are not using Fusion 360, how can you make your model parametric? What's your approach? Measure something real and physical to get the dimensions. Attempt to draw something that matches the specifications. WORK TOGETHER! Make time to work together outside of class and share modeling tips. Have fun with it! Deliverable: A blog post describing your design process from sketch to 3D model. What did you design and why? What makes your design parametric? ie. what are the parameters of your design? What challenges did you face while making your model? What resources did you use? Export a 3D model file (STL or FBX) and upload it to Sketchfab . Be sure to include any screenshots and visuals created or referenced to illustrate your ideas. You can record a short video presentation or process walkthrough if that helps to share your project. Embed your video into your blog post. Submit a link to your post on Slack #cmstudio by EOD. Due: Oct 19 Week 9: Visualizing Products Oct 19 | Location: Zoom Meeting Upcoming Phase 4: Next week we will start looking at digital fabrication tools and workflows. Week 12 (Nov 9) - Final project Proposal Due Assignment 7 Share What did you make and how did you make it parametric? Questions Agenda Representing Concepts Questions Concerning the Visualization Process Examples General Workflow Workshop: Adobe Dimension Representing Concepts Visualizing a product be it large or small, digital or physical, is an involved process that requires constant iteration and feedback from stakeholders. For our purposes we will begin by exploring some questions that arise in the process of designing products. Here are a few types I have encountered. I deal with several of these forms of representation everyday. What other forms of visualization can you name? Digital Designs Digital Mockups Digital Wireframes Line Drawings Physical Prototypes Animation Schematics Questions Concerning the Visualization Process What digital and/or physical representations need to be used to effectively communicate design intent? What is your idea? How do you imagine it to be? What kind of materials does your design or idea require? Is it physical or digital or both? Who is your audience? Who will be viewing the images and making a decision through it? What meaning do I wish to convey through an image or animation? How realistic does my image need to be? Do I need a render or a photo? How much time do I have to make a render? What kind of fidelity is required? Does it move or require showing functionality through animation or diagrams? Examples We will take a look at some recent examples of projects using different approaches to visualize a concepts. General Workflow In this class we are interested in assembling workflows that produce a result. Sometimes the workflow you use to accomplish a task is possible within a single program or it's constructed through a series of operations provided by several programs. Below is a general workflow for visualizing a product. Create design files in 2D or 3D. These are your design assets. Export models in a 3D format that allow for applying color, materials, textures to individual components (ie. FBX, STEP, OBJ, STL). Create 3D scene with assets, environment, and lighting in render tool of choice. In some cases, the CAD environment provides basic rendering tools. Make test renders or preview results with lower quality settings. High quality renders take longer and use more resources. Expect to wait. Repeat the process to produce quality images that can be further processed or composited. BREAK Workshop: Adobe Dimension | In Class, 45 mins In this workshop we will walk through designing a scene with objects in it. We will then explore environment, lighting, materials, and rendering. Goals: Get familar with the Adobe Dimension interface and scenes Get familiar with environment, camera, models, and materials Get familiar with basic render settings Resources Adobe Dimension Getting Started with Adobe Dimension - Official Youtube playlist with tutorials showing how to use the program. Start here. File Formats ( Importing 3D Models ) 3D Model Formats - OBJ, FBX, STL, SKP Material Formats - MDL, SBS, SBSAR Tutorials by Dansky - Playlist of tutorials showing how to use Dimension in various workflows. Create Easy 3D Illustrations in Adobe Dimension - Onboarding Tutorial - Great intro tutorial showing how to use Dimension and XD in a workflow. Creating packaging and prototypes with Adobe Dimension Fusion 360 Export format options for Fusion 360 Assignment 8: Product Visualization Using Adobe Dimension, generate 3 renders of a product or design concept you created in CAD. What does this mean? This could be 3 unique instances of a single design concept (parametric design) or it could be 3 different visual representations of a single design instance, paying special attention to exploring different environments, lighting configurations, and materials to create different moods. Project Details: The images you produce will be shared on Instagram @criticalmakingstudio . They will likely be reshared on the official CMCI Studio ( @cmci.studio ) account as well. Canvas Sizes - Choose story or square formats. Story size can be cropped to square. Instagram Story - 1080 x 1920 px Instagram Square - 1080 x 1080 px Project Title Give your project a title and short description. This will be included in each post. Your Instagram username Thoughts on how to accomplish this: Spend some time working with Adobe Dimension to get familiar with the interface and workflow. Look through some of the Adobe tutorials to start. Export different model formats form your CAD tool. Start with FBX and STL files. Then import your models into Dimension. Find a workflow that agrees with your models. Read the User Guide. Read about Supported file types and Materials . Note: Depending on your computer hardware, producing renders can take awhile. Plan ahead to make sure you have time to produce the best quality renders you can. WORK TOGETHER! Make time to work together outside of class and share rendering tips. Have fun with it! Deliverable: A blog post describing your process beginning with exporting from CAD tool to setting up your renders to producing final images. What kind of workflow did you come up with? What worked and what didn't? What challenges did you face? What resources did you use? Produce 3 high quality images of product concepts you designed. Include these images in your blog post with a brief description for each image. Place your images into the Milanote board linked below as well. Assignment 8 Milanote Board You can record a short video presentation or process walkthrough if that helps to share your project. Embed your video into your blog post. Submit a link to your post on Slack #cmstudio by EOD. Due: Oct 26 Phase 4: Becoming Physical Source: Laser Cut Parametric Triangles by RJ Duran In this phase we will look at tools and workflows used in digital fabrication. We will approach each topic with simplicity in mind and focus on understanding fundamental concepts. To build advanced skills with the tools we discuss you will need to dedicate time outside of class for further experimentation. We will approach topics in a hands-on workshop format so be prepared to dive in. The goal of this phase is to learn how to utilize digital fabrication tools to create physical objects from digital designs. Week 10: No Class Oct 26 Class canceled due to weather. Week 11: Intro to Digital Fabrication Nov 2 | Location: Zoom Meeting Updates Projects - A page dedicated to past proejcts done in Critical Making courses. Final Project Proposal - Due: Monday Nov 9 by EOD Assignment 8 Share Milanote Board Questions Agenda Overview Finding Inspiration Outsourcing Fabrication BREAK Digital Fabrication Worklfows 3D Printing Laser Cutting Vinyl Cutting Digital Fabrication Digital fabrication is a type of manufacturing process where the machine used is controlled by a computer. The most common forms of digital fabrication are CNC Machining, Laser Cutting, and 3D Printing. ( Source: Open Desk ) CAD & CAM CAD = Computer-Aided Design Input: Idea for 3D model Output: 3D model and instructions for CAM CAM = Computer-Aided Manufacturing Input: Toolpath file to control machine process Output: Physical object Where to Begin In general, every digital fabrication process works in a similar way: A digital file is created (ie. toolpath) to deliver instructions to a machine (ie. fabrication method) engaging with a piece of material (ie. stock) to produce a specific result. Intro to Digital Fabrication (Miro Board) When encountering these tools, I find most people begin in one of the following groups with the following question: Idea - I have an idea. Which digitial fabrication tool(s) enable me to make it? Process - I am interested in a digital fabrication tool or process. What can I make? Finding Inspiration Digital Fabrication on Pintrest Thingiverse 2020 Best Sites for Free STL Files & 3D Printer Models Ultimaker Applications Formlabs Blog - They feature lots of interesting projects and case studies. Projects Creative Applications Autodesk Pier 9 Residency Projects - Wayback Machine link from Dec 2018 @HardwareUX @pdesign101 Embla Candles / Instagram - Fun brand utilizing 3d printing to make candles. Uppgradera - Upgraded IKEA experiences 3D Printed Arduino CNC Drawing Machine by DIY Machines - I'm interested in building one of these. Similar to the Axidraw . #axidraw to see examples. CNC Wood Joinery Dom Riccobene - CNC Wizard Bantam Tools Podcast: The Edge - A great podcast about design and technology. The 3D Printing Handbook Outsourcing Fabrication 3D Hubs - CNC Machining, 3D Printing, Injection Molding Shapeways - 3D Printing Fictiv - CNC Machining, 3D Printing BREAK Workshop: Digital Fabrication Workflows We will spend the rest of the time getting familiar with the software workflows for 3D printing, laser cutting, and vinyl cutting. Remember: To get something 3D printed or laser cut at the Idea Forge, you need to follow the instructions for 3D Printing & Laser Cutting Fabrication Requests . 3D Printing with Ultimaker 3 Save print ready STL from CAD Load STL file into Cura Choose PLA material for Extruder 1 and PVA for Extruder 2 (If using support material) Choose a print profile (aka Layer Height: Start with Fast or Normal options) Choose an infill (Density) Save GCODE file and copy to USB drive to insert into Ultimaker 3 Things to consider: Material - PLA and ABS are the most common materials but there are many others out there that work with FDM machines like the Ultimaker. If you are outsourcing a print job, you will need to investigate the material options provided by the print service. Outsourcing has the advantage of printing with a variety of machines and materials. Scale - How large of a print do you need? Can your object be printed in parts and assembled? Printability - Does your model need to be printed? Is this the best method? Is there another method better suited for the task? Slicing tools like Cura convert a 3D mesh (STL) into GCODE to run the printer. This is not to be confused with the Autodesk tool - Slicer for Fusion 360 . That is a tool for converting 3D models into 2D pieces that can be cut on a laser cutter with 2D sheet material to assemble into a 3D model. Additional resources for printing can be found under Design for 3D Printing . Laser Cutting Make a 2D vector graphic design file in Illustrator Prepare layout in file. Match the size of material you wish to cut and the machine you wish to use. Submit laser cutting fabrication request at Idea Forge. Vinyl Cutting Make a 2D vector graphic design file in Illustrator Define your Artboard size to be the dimensions available within the left and right margins of the rollers. The width will be shown on the vinyl cutter display once you load material. Configure print settings in Window > Extensions > Roland CutStudio Select GX-24 Load material into machine Outline text/shapes Print/Cut Assignment 9: Final Project Proposal Submit a Final Project Proposal by EOD. Due: Nov 9 Phase 5: Final Project Week 12: Final Project Nov 9 | Location: Zoom Meeting Meeting Signup: https://calendly.com/rjduran Week 13: Final Project Nov 16 | Location: Zoom Meeting Meeting Signup: https://calendly.com/rjduran Week 14: Final Project Nov 23 | Location: Zoom Meeting Meeting Signup: https://calendly.com/rjduran Week 15: Final Project Nov 30 | Location: Zoom Meeting Meeting Signup: https://calendly.com/rjduran Week 16: Final Project Presentations Dec 7 | Location: Zoom Meeting Last Day of Class Final Project Presentations Final Project Documentation Due by Weds Dec 9th, 2020 Final Project Documentation 3D Printed Car: Final Form by Mark Banzhoff A Bike For a Lifetime by Mateo Barroetavena Drynamic Bag Creation by Cal Brackin Novel breast MRI system and the B.R.A.V.E. by Arielle Castro RuffGuy Dog Apparel by Karlie Cronin Web Portfolio Design Final Project by Hudson Fega Design Portfolio from Scratch by Bella Fidjeland The Ultrasonic Selfie Stick by Caleb Hammel All Your Holiday Needs in a Box! by Natalie Jackson Chameleon Prosthetics by Cody King I Couldn\u2019t Find the Perfect Commuter Backpack, So I Built One. by Heather Kraft Welcome to Stems: A Site for Plant Lovers by Katie Kreider HM Designs Website Portfolio by Haley Mordini Home Made Hand Soap by Mye Ponrattanasiri Color Me In: An Interactive Exploration of Abstraction and Play by Devva Saunders Beatbox to Real Drums by Max Vecchitto Brown Recluse on the Big Screen by Jacque Walo Chinese Moon-shaped Fan by Renee (Yuan) Zhuang","title":"CM1 Schedule"},{"location":"APRD-5005/#critical-making-1-finding-your-superpower-through-digital-and-physical-making","text":"Critical Making 1 is a first semester project-based studio course that provides a foundation in the creative process of making with new and emerging digital and physical technologies responsible for building the products and services shaping the world we live in. In this course students work towards becoming fluent with digital and physical tools and technologies supporting their creative visions for new products and services. This includes working with modern web technologies (languages, frameworks, API\u2019s) to produce functional prototypes, surveying Computer-Aided Design (CAD) tools for 3D modeling and visualization and leveraging digital fabrication tools (3D Printing, Laser Cutting, CNC Milling) to rapidly produce physical objects and prototypes. The course will culminate in a final project leveraging the various digital and physical tools, techniques, skills, and knowledge gained throughout the semester. Project examples include web-based applications, connected experiences, smart devices, everyday / enchanted / functional objects, media-based installations, and product-based experiences. Day and Time: APRD-5005-003 / AM Section - Monday, 9:30 am - 12:30 pm APRD-5005-001 / PM Section - Monday, 1:30 pm - 4:30 pm Location: We have adopted a hybrid (remote/in-person) class structure this semester due to COVID-19 . This means anyone can participate in person or virtually over Zoom anytime. The class schedule will indicate when class is to be held in person at the Studio or virtually over Zoom. The following Zoom link is to be used for all class sessions. The required password is provided in Slack. >> Zoom Meeting (Password Required) << Instructor: RJ Duran rj.duran@colorado.edu Slack: @rjduran. #cmstudio on cmcistudio.slack.com Office hours by appointment. Feel free to reach out to me via slack or email. Syllabus: This website is a real-time version of the course syllabus. It is updated weekly throughout the semester. A static version can be downloaded here .","title":"Critical Making 1: Finding Your Superpower Through Digital and Physical Making"},{"location":"APRD-5005/#course-resources","text":"This website is the primary resource for all Critical Making Studio courses. Some of the resources used across the different courses are divided up into sections found on the left sidebar. Course specific resources will be found within the course schedule page specific to each course, also found on the left sidebar. Do I need to know all of these tools? No! Think of these resources as maps containing many possible tools that could help you accomplish your work and from which you can choose some to learn and work with. There are pros and cons to any tool and all have a set of functionalities and a purpose. As with any tool and any kind of personal creative process you are free to choose anything that works for you. In addition to the tools found here in the digital space, you have access to physical tools for building anything you can imagine here at the studio, on campus at the Idea Forge , or in the community at BLDG61 . IMPORTANT: In this time of COVID-19, be sure to investigate any policies and regulations for all campus based or non-CU based resources before using them. Be safe.","title":"Course Resources"},{"location":"APRD-5005/#our-studios","text":"CMCI Studio facilities include the large main room (West Studio) and adjacent smaller room (North Studio). Both rooms contain different functionalities for developing projects at varying scales and for varying audiences. Read through the Studio Handbook for learning about each room and accessing the various tools and capabilities we have on site.","title":"Our Studios"},{"location":"APRD-5005/#cmci-equipment-resources","text":"CMCI has a large collection of media production equipment for students to use. The Armory Vault and ENVD Checkout reservation systems have many items for general purpose use. With each system there are conditions that must be met. Visit each page to learn more. Learn more about all the on campus resources available at https://www.colorado.edu/facilities/cmci-equipment/ . Armory Vault ENVD Checkout","title":"CMCI Equipment Resources"},{"location":"APRD-5005/#idea-forge","text":"The Idea Forge is an on-campus design and fabrication facility open to all students located in the Fleming Building (near the Wolf Law Building at Broadway & Baseline Rd). In this course we will be making use of the tools and resources available to build projects and develop skills. Learn more at https://www.colorado.edu/ideaforge/ . Fall 2020 Operations CU Boulder Campus Map Hours Workshop Schedule","title":"Idea Forge"},{"location":"APRD-5005/#bldg61-boulder-library-makerspace","text":"BLDG 61 is a free community workshop that provides maker education and technology to the public in a creative and inclusive environment. They are located nearby, just down the street from our studio. They offer a variety of free workshops and access to tools and knowledge within the larger Boulder community. I highly recommend becoming familiar with their space. Learn more at https://boulderlibrary.org/bldg61/ .","title":"BLDG61: Boulder Library Makerspace"},{"location":"APRD-5005/#course-workload","text":"The CM1 is a 3 credit hour course. You should expect to dedicate at least 2-3 hours per credit hour. This translates into a 6-9 hours per week. Consider 6 hours a minimum expectation for one studio course and plan accordingly with your other studio courses. Assignments for the course consist of weekly blog posts demonstrating project-based and process oriented research and explorations in making . Assignment parameters will be based on the topic of the week and \"due\" the following week by the start of class time. Refer to the Course Deliverables section for more information. The course is organized into weekly meetings consisting of instructor led project-driven topics organized as workshops and studio work sessions. It is expected that all students are active participants in each session.","title":"Course Workload"},{"location":"APRD-5005/#course-deliverables","text":"CM1 is a project based course and largely driven by student research and interests. As such, each deliverable is expected to vary based on the project parameters and requirements. The following outlines the general criteria for course deliverables throughout the semester.","title":"Course Deliverables"},{"location":"APRD-5005/#assignments","text":"Assignments are given weekly and need to be submitted as a blog post published to your Critical Making blog. A minimum of 1 blog post per week is the expectation. Medium is widely used in other studio classes but any blogging platform may be used. Posts are to be submitted via slack #cmstudio by the specified due date each week. It is recommended that a post includes a variety of media and content to support the subject matter. For example: text, images, video, graphics, photos, mockups, screen captures, tutorials, 3d model viewers (sketchfab), sketches, code, gifs, references, etc. Anything that is required to effectively communicate the details of a project, process, prototype, or idea. The subject matter is in response to the topics of the week. Ideally, it falls in line with your interests, research area, project, creative process, etc. For example, you might consider doing a series of tutorials on a topic that interests you or a process/workflow you are currently exploring through the course. Posts should be written to the best of your abilities and for a public audience. The post and any accompanying visual content (images, video) may be shared on social media.","title":"Assignments"},{"location":"APRD-5005/#final-project","text":"Final Project Proposal (Submitted as a blog post) Final Project Presentation (Delivered live or as pre-recorded presentation) Final Project Documentation (Submitted as a blog post)","title":"Final Project"},{"location":"APRD-5005/#course-themes","text":"Building Creative Habits and Practices Emerging Tech Rapid Prototyping Product Development Materials Digital Fabrication Interactive and Immersive Digital / Physical Experiences Parametric Modeling and Design Visualization / Rendering Deconstructing Problems and Solutions Analyzing Systems of Logic","title":"Course Themes"},{"location":"APRD-5005/#phase-1-make-everyday","text":"","title":"Phase 1: Make Everyday"},{"location":"APRD-5005/#week-1-overview","text":"Aug 28 (Friday) | Location: In Person + Zoom Meeting Intros / Course Overview ( Slides ) CM1 Student Questionnaire Making \"making\" a practice (aka Dailies, Everydays) Jonathan Harris - Today - Cowbird onepic_everyday by Allison Spiegel (C10) Beeple Everydays Things Organized Neatly Significant Nonsense 1 Second Everyday App Collecting Words by Brian Fouhy (C3) Getting Creative with Perlin Noise Fields House Numbers Styles Things Come Apart by Todd McLellan Codevember 52 Boxes in 52 Weeks CW 365 Days of OP-1 Methodologies for \"making\" Richard Serra Verb List (MOMA) / PDF Books Graphic Design: The New Basics The Art of Critical Making: Rhode Island School of Design on Creative Practice Got Skills? Lynda.com for students Processing Workshop We will go through a process of creating a simple poster sized 24x36 in using the Processing IDE. Download and Install Processing Sketch (Instructions on slides) Resources Processing Language Reference Learning Processing Visualizing Data: Exploring and Explaining Data with the Processing Environment Finding Inspiration Where do you find inspiration? Here are a few I frequent. MIT Technology Review Creative Applications Bantam Tools Podcast: The Edge - A great podcast about design and technology. CW&T / Instagram Instructables Radiolab Sleepwalkers Podcast - A podcast about AI, Machine Learning, Data, and Privacy. Creative Industries HardwareUX pdesign101 Age of Entanglement by Neri Oxman - An outstanding article and map / chart (The Krebs Cycle of Creativity). Tim Rodenbroeker - Input / Output Map Bauhaus Curriculum / Bauhaus || The School of Everything Designspiration The Coding Train Kurt Vonnegut on the Shapes of Stories (long version) / Kurt Vonnegut on the Shapes of Stories (short version) Four Tet: Looking Backward, Moving Forward Shapeways Material Guide McMaster Carr - TONS OF PARTS","title":"Week 1: Overview"},{"location":"APRD-5005/#assignment-0-setup-a-maker-blog","text":"Setup a dedicated blog to document your Critical Making experience. What if I already have a website/blog? Great! Just make sure you tag or categorize your posts with \"Critical Making 1\" so they are easy to locate. If you do not yet have a blog or wish to setup a dedicated site for this course, you have a plethora of options to choose from . Feel free to use whatever works for you to submit your work in blog post format. Many STCM students choose to use Medium because it's used to submit posts for RE Studio. Examples by previous students: Clayton Kenny (C11), Yvonne Danyluck (C11), Dave Laskowski (C11), Aitana Rothfield (C11), Gia Almuaili (C11), Tess Stevens (C11), Karen McClellan (C10), Allison Speigel (C10), Jonas Escobedo (C10), Sarah Cohen (C10), Diamond Alexander (C10), Kelly Phillips (C10), Hanshu Zhou (C10), Sarah Safranski (C9), Jim Murphy (C9), Matt Isola (C9), Nikki Cavalier (C9), Nick Balderston (C9) Examples of similar blogs: Chikara Inamura (HTMAA 2014) , Matt Keeter (HTMAA 2011) , Christos Tzamos(HTMAA 2014) , Zach Seibold (HTMAA 2014) , Merav Gazit (HTMAA 2014) , Dorota Orlof (FAB Academy 2018 Barcelona)","title":"Assignment 0: Setup a \"maker\" blog"},{"location":"APRD-5005/#assignment-1-know-thyself","text":"Your first assignment consists of 2 parts: Part 1: Make a map Generate a map of some kind that communicates your journey to CMCI Studio. Such a map might be a timeline, visualization, info graphic, mind map, photographic series, video, written document, or any combination of these formats. Include your interests and pursuits in CMCI Studio. Questions: What led you to CMCI Studio? What is your question? Based on the survey, what do you feel strong in and what are you excited to learn more about through this course? Where do you see yourself by the end of the program? If you could design and build anything, what would it be? Resources Mind Mapping Part 2: Things I Like & Dislike Choose 3 things you like (or love) and 3 things you dislike (or hate) and describe what they mean to you and why. Possible choices might be products, objects, artifacts, or experiences. Be wary of pointing out behaviors in people or circumstances beyond your control or judgement. Focus on the tangible attributes that you can clearly articulate. Questions: What\u2019s their story? Who made them and why? Why do or did they exist? Why do you find them intriguing or despise them? Deliverable: Write and submit a blog post for Part 1 and Part 2 on your blog. Include any media in your post that supports your thoughts and ideas. Share a link to your post on Slack #cmstudio by Sept 7 (Labor Day). Due: Sept 7","title":"Assignment 1: Know thyself"},{"location":"APRD-5005/#week-2-tools-for-development","text":"Aug 31 | Location: Zoom Meeting Today in class we will be working on setting up software and becoming familiar with some of the tools used for development. Questions Assignment #2 begins today Class Format over Zoom Break out rooms? Setting up your development environment What's that and why do we need it? What does a development environment look like? IDE's vs Text Editors, working code folder, Terminal, Node.js, NPM, Version Control. The combination of all these tools is what I refer to as a \"sandbox\" or local development environment. Terminal Workshop Hello Terminal Basic folder navigation and file creation Moving From Bash to Zsh: Terminal Changes in macOS Catalina Showing hidden files on your system \"dot\" files (aka a file with a dot or period at the beginning of it's filename is a hidden file) Install Git Github Workshop Version Control (aka a time machine for code/data) Setup Github account Create your first repo Markdown Demo: Local development environment Reference: Make a Sandbox (aka local dev server environment) Code: The Hidden Language of Computer Hardware and Software ASCII vs Binary Files ASCII - Data for a human to read/write Binary - Data for a computer to read/write Development Environment Lets get started by setting up a development environment. The most basic things you need for any web development tasks are a text editor and a browser like Chrome, Safari, or Firefox. Other tools such as the Terminal, Git, Github, and Node.js enable you to work with all sorts of libraries and frameworks, collaborate with others, and quickly prototype new ideas. All these tools come together under the idea of running a \"local development server\" or localhost on your machine. We will be setting up all these parts and will utilize them in different ways over the course of the semester. If you are curious about the history of electronics, computers, computer science, programming, and the Internet, check out the Histories section. I strongly advise you to start getting familiar with the various histories and technological underpinnings of the technologies you use every day. Remember, it's also about building awareness and understanding about the systems that run our world. These resources are meant to work through at your own speed and as you begin to ask deeper questions about why something works and how something works. I also highly recommend the book Code: The Hidden Language of Computer Hardware and Software by Charles Petzold. It is a foundational text on why computers are the way they are and how they work, beginning with code. Text Editors What is a text editor? What is it's purpose? How is it useful for development? When it comes to web development or software development work, you need a text editor capable of working with ASCII data and rich in features supporting development tasks. My editor of choice is currently Visual Studio Code (VSCode) . Will Microsoft Word, Google Docs, or Pages work? No! These are word processing applications that deal primarily with binary data because in addition to the actual text information stored in a .doc file, it encapsulates data such as font and formatting. Don't use these editors for this kind of work. You will be sad. Terminal Workshop What is the Terminal? What is it's purpose? How is it useful for development? Goals: Get familiar with the terminal by creating and manipulating files and folders on your system. Set up git to be able to use version control to manage projects on Github. Terminal 101 Location on MacOS: Applications/Utilities/Terminal.app For the Windows users: Cmder is a Terminal emulator that works in a similar way to the mac terminal. How to display hidden files on MacOS Customize your Terminal in Terminal > Preferences. It helps to make the text larger on most screens. Common commands: cd, ls, mkdir, rmdir, rm, mv, cp, pwd, man, touch . Think of all these commands as tiny applications that have no GUI. They are very old and have been around since the start of Unix based systems (Read this to learn more: Looking back at OS X's origins ). Look at MacOS/Linux/Unix Command Line Cheat Sheet to see more information about common commands. Working with directories and files: cd <folder> - Goto into a folder cd .. - Go up one level cd ../<folder> - Go up one level (to parent folder) and into a child folder cd ../.. - Go up two levels etc Tab completion - When you start typing in a terminal you can hit tab to complete the command if the file or folder you are going to use is available. If you hit Tab twice, you will see the contents of a folder. Getting out of or killing a process that is running in Terminal: ctrl + c Install Git You will likely not have Git installed on your machine by default. You will know if you have it or not when you type git into the Terminal. If you do have it installed you will see information about how to use it. If you don't, you will see the output \"command not found\". You may be prompted to install XCode Developer Tools when installing git. Accept the install and proceed. You have two options to install git: Install the XCode Developer tools (easy way) or download the installer from git-scm . After installing it the git command should work in the Terminal. This is essential to working with Github. Resources Learning Terminal - Cheetsheets and more! Learning Git How to use Terminal on Mac , How to use a Terminal on Windows Command Line Cheat Sheet by git-tower - This one is great for both git and terminal commands! Github Workshop Goals: Setup a Github account Create your first repository Publish some code to it How to Use Github Sign up for a Github account . Choose a username wisely. You might just be \"Internet famous\" someday. ( Stuck on choosing a username? Read this. A Tale of Github Usernames ) Create a hello-world repo on Github . If you check the box to add a README file it will include a README.md file in the repo. This is the main information file shown when you goto the repo URL Markdown = text file with special syntax that gets converted into HTML. Review Markdown Cheatsheet . Complete list of github markdown emoji markup Clone your repo using the terminal. Doing this will download a copy of your repository onto your machine. Clone Repo: git clone <repo url> . For Example, git clone git@github.com:rjduran/cm-sandbox.git . Note the URL and its use of \"git\" or \"https\". Use \"https\" to start. You need to go through the Github tutorial below in step #4 to connect to Github via SSH. Open VSCode and add the cloned folder to the workspace Make some changes to your README.md file using VSCode Stage the changes: git add . or git add README.md Commit the changes: git commit -m \"my message describing changes\" Push the changes: git push You will be asked for your username and password when attempting to push changes to your repo at this stage. Once the changes are uploaded you will see the changes on the Github page for the repo. Yay! Good times! Success! Pro tip: After setting up your Github account, read through Connecting to Github with SSH to setup your system to connect securely to Github and not require you to enter your username and password credentials each time you push changes.","title":"Week 2: Tools for Development"},{"location":"APRD-5005/#assignment-2-everyday-project","text":"Objective: Make something and capture a digital representation of it each day for the next 2 weeks. You should have at a minimum 14 objects. Thoughts on how to accomplish this: Choose any tool(s) at your disposal. Choose any theme or topic. Date Range: Monday Aug 31 to Monday Sept 14 Decide how you will document your project. For example, Instagram, blog post, a single image, a document, a Github repo commit, a video, etc. Consider how the result will travel digitally. Refer to the projects and practices you observed from last week. Questions: What do you already make and want to make more of? What new thing has peaked your interest and will you use to make something every day? Deliverable: Submit a blog post documenting your project process and outcome in Slack #cmstudio . Due: Sept 14","title":"Assignment 2: Everyday Project"},{"location":"APRD-5005/#week-3-labor-day","text":"Sept 7 Labor Day, No Class","title":"Week 3: Labor Day"},{"location":"APRD-5005/#phase-2-the-modern-web","text":"In this phase we will talk about web development paradigms and practices and you will build your web development skills inside and outside of class. We will approach each topic with simplicity in mind and focus on understanding fundamental concepts. To build advanced skills with the tools we discuss you will need to dedicate time outside of class for further experimentation. We will approach topics in a hands-on workshop format so be prepared to dive in. If you do have some web development experience coming into the program think about some new aspects of development you are curious about such as libraries, frameworks, responsiveness, interactivity, animations, Javascript, types of tech stacks, or just how you can improve your skills in what you know through practice. The goal of this phase is to gain a sense of how you can utilize web technologies to solve problems.","title":"Phase 2: The Modern Web"},{"location":"APRD-5005/#week-4-intro-to-web-development","text":"Sept 14 | Location: Zoom Meeting Discussion CMCI Equipment Resources Assignments 1,2 Share Terminal, Git/Github Questions Github: How do I make a copy of a repo into another folder? Github: How do I assign a different remote to a repo? Repo for this phase: https://github.com/rjduran/cm1-web-dev The World Wide Web What is the World Wide Web and what is its purpose? The purpose of building websites and web applications is to make an idea accessible to people. While we won't look into the history of the Internet very much, it's still worth spending some time reading more about the innovations and contributions to the Internet as we know it today under the History of the Internet section. The Industry What do web developers do? Collaborate, write code, evaluate new tools, solve technical problems, synthesize, make prototypes. What do web developers need to know? At a minimum the 3 web languages, HTML, CSS, and JS. Beyond this it really depends on the project or idea. Many choose to specialize in different kinds of tech stacks supporting front-end development, back-end development, or full-stack development. Learning how to learn and apply technical skills is your best asset. How do you learn web development skills? Make lots of web things to practice. Make lots of mistakes to learn. Pick up books on the subject. Watch tutorial videos on development topics. Read blogs like those below and try everything you read about. In this ever evolving field you are constantly learning new tools and workflows. Stacks & Maps These resources are for you to investigate the world of development. Think of them as maps to learning about different roles and technologies. Front End, Back End, Full Stack\u2014What Does it All Mean? Front-End vs Back-End vs Full-Stack on Udacity A Guide to Becoming a Full-Stack Developer in 2017 - If you only read one of these, read this one. How it feels to learn JavaScript in 2016 - Read through this and see if you can begin to make sense of the current development ecosystem. (Note: Its complex and a little bit insane but this guy makes a good (fun) read of it.) The 2019 Roadmap To Fullstack Web Development The 2019 Web Developer Roadmap - Has some great flowcharts showing how different technologies relate / Github Source . - Look at these maps if you want to see the big picture. Web Languages Workshop | In Class, 45 mins Webpages are constructed in 3 languages - HTML, CSS, and Javascript. Modern browsers will render pages built in these languages more or less the same depending on the viewport size and device orientation. In the resources below you can find some learning pathways for building skills with these tools. Make time to read through the basics of all the languages and try things out. Most importantly, seek to apply the skills you are learning towards projects. How does a web language relate to what a user sees? HTML = Document Structure CSS = Visual Language (Layout, Identity) JS = Interactivity & Dynamics What IS the composition of a webpage? At a basic level all you need is a single index.html file with <html>...</html> and enclosing <body>...</body> tag to render a webpage. All the CSS and JS you may have can exist inside the same file embedded within <style>...</style> and <script>...</script> elements. It only becomes important to separate the 3 types of code when a project becomes too large to manage within a single file, which is very common. Best practices, modularity, and the need for regular maintenance have led developers and designers towards a current approach of establishing and using style guides or coding standards . Exercise 1: Hello HTML Goals: Understand how to make a basic HTML document using a text editor (VS Code) Understand how to structure a document for HTML, CSS, and JS Understand how to use the browser for viewing a page Instructions: Make a new folder called \"hello-world\" for your project files. Pro Tip: Setup a dedicated code folder for all your code based projects. I use one called code inside my home directory (/Users/rjduran or ~/). Open VS Code and add the \"hello-world\" folder to your workspace. Using VS Code make a new file called index.html in your project folder. Open Chrome and open the index.html file. You should see a blank page. This is your document without any content. In your index.html file, add the html, head, and body tags into the document. What are these tags used for? In your index.html file, add a few elements such as h1, h2, p, a, and img into the document body. What are these tags used for? Toggle between Chrome and VS Code to see your changes rendered in the browser. CMD + R to reload the page in Chrome. Exercise 2: Hello CSS Goals: Understand how to add CSS to a HTML document (internal & external) Understand how to use CSS selectors - element, .class, #id Get familiar with how to use CSS properties Instructions: Create a new file called style.css in your \"hello-world\" folder. We will use this in step 8. Create a <style>...</style> tag to insert css into. Which part of your document does this go into? Write your first selector to change the color of a h1 element from black to red. Notice that css allows plain english words used for color or hex values such as #FF0000. (What, hex values? How to Read Hex Color Codes ) Reload the browser to see your changes. Now write a class selector called .title and apply it to the h2 elements. Give the color property a value of green or #00FF00 . What happens when you reload the document? Now write an id selector called #space-cat and apply it to your img element. Lets give the cat pucture a solid border with a 5 pixel width and make it blue. Open your style.css file you created in step 1. We will be copying our css into that file now. Copy and paste the code contained within your <style>...</style> element into style.css file. In your index.html file, insert the link tag to specify the external css file. <link rel=\"stylesheet\" href=\"style.css\"> . This tells the index file to use the css it finds there. What happens if you load a css file and have css in your index file? Which selectors are used? Reload in the browser to see changes. Resources W3 Schools HTML Reference W3 Schools CSS Reference BREAK - Take 10 min Website Analysis Workshop | Breakout Rooms, 20 mins Goals: Get familiar with the Elements tab in Chrome development tools Understand the general structure of a HTML document Understand how HTML and CSS create visual heirarchy and organization Instructions: Choose one of the Bootstrap examples to inspect. Using the Chrome development tools, inspect the site. Look at the HTML elements and the overall structure of the page. Chrome Developer Tools (Inspector for debugging). Access via: View > Developer > Developer Tools within Chrome. What do you notice? Discuss with your group. Make a quick wireframe sketch on paper of the page you are inspecting. Label the different parts of the page using common terminology (ie. header, sidebar, footer, post, etc) and HTML tags with opening and closing characters( < , > ). What do you notice? Discuss with your group. Identify 2-3 HTML tags and look up their meaning on W3 Schools HTML Element Reference . Share your findings with the group. Exit breakout room and discuss your findings. Local Development Workshop | In Class, 30 mins Goals: Setup a local development server aka Sandbox. We will follow the instructions under How to build a Sandbox . Get familiar with starting / stopping a local server in the terminal Understand the development workflow Instructions: Once your live-server is setup, launch an instance and open the browser. Make an edit to your index.html file and view the changes in the browser. Try launching a second server from another terminal window. What happens? Resources Example: hello-live-server","title":"Week 4: Intro to Web Development"},{"location":"APRD-5005/#assignment-3-ode-to-things","text":"Choose one (or more) every day object(s) in your life and make a simple website for it / them. You might consider the site as a container for a favored item or collection of things, a product to sell, or simply a site that pays tribute to the item or object and what it means to you in life. This idea was inspired by the website Ode to Things , which is an e-commerce store and curated collection of physical every day products. Thoughts on how to accomplish this: Build a webpage from scratch that makes use of HTML elements and CSS selectors. Use necessary html elements that act as containers for different types of content and page heirarchy: text, images, video, etc. Develop your webpage using a local development environment aka live-server. When done, make a repository on Github for your project and commit the required index.html file and and any media files to it. I should be able to clone your project repo and run it in a localhost on my machine to see the same result without changing filenames or folders. Hint: The repo should look similar to the hello-world folder and files you created in class. It should also include a README.md file since you always include this text file with any Github repo you create. Video: CM1 Assignment 3 Tip: Github, VSCode & Terminal Workflow Advanced Option: If you are feeling comfortable with HTML and CSS, explore an aspect of HTML or CSS that is new to you or take the leap into Javascript or using a front-end framework. Deliverable: A short 1-2 min video screen capture demonstrating your website running in a local development environment as setup in class. Be sure to briefly introduce yourself and your project, provide an overview of what you made and how it works. Embed the video into your blog post. Pro Tip: If you are new to screen capture tools, look into using Screencast-o-matic or the built in screen capture tools of MacOS (CMD + Shift + 5) to document your workflow. Create an account with Youtube and upload your video. Include a link to your Github repo for the code written. A brief writeup on your blog about your learning experience. What hurdles did you encounter and how did you overcome them? What worked and what didn't? What new tools did you try? How would you explain what you've done to someone that doesn't know anything about web development and the tools used? Submit a link to your post on Slack #cmstudio by EOD. Due: Sept 21","title":"Assignment 3: Ode to Things"},{"location":"APRD-5005/#week-5-web-applications-frameworks","text":"Sept 21 | Location: Zoom Meeting Discussion | 20 mins Assignments 3 Share / Questions Project Management Tips Use a .gitignore file or (better way) create a global .gitignore file that ignores .DS_Store. This is a junk file on macOS that creeps into Github projects all the time. Rename files to something short and simple when possible. Replace spaces in filenames with \"-\" or \"_\" characters. When sharing the Github repo you only need to share the URL from the browser. Omit the .git extension. For example, https://github.com/rjduran/cm1-web-dev . File paths - Be sure to only reference files in folders within your project folder. For example, do this /img/image1.jpg and not this /Users/rjduran/Desktop/image.jpg . Relative vs Absolute file paths ( HTML File Paths ) Agenda Javascript Workshop Frameworks & Libraries Break Front-End Workshop Web Applications Javascript Workshop | In Class, 20 mins Javascript is an enormous topic and we will only begin to scratch the surface of it today. I highly recommend working through some of the resources below and looking at the resources under the Learning JS section. There are several great books and tutorial series that can give you a foundational understanding of the language and it's many uses. If you were to learn one programming language, I would recommend this one. Goals: Understand how to add JS to a HTML document (internal & external) Get familiar with how JS can modify the contents of a page Get familiar the Chrome Dev Tools console Instructions: Create a new file called script.js in your \"hello-world\" folder. We will come back to this at a later step. Add the <script>...</script> tag in your document. Where should you place it? Discuss. Inside <head> = load before body contents Just before </body> tag = load after body contents Call the alert function and give it a string of text. What happens when you reload the page? alert(\"hello spacecat!\"); Decalare a variable and give it the same string of text as a value. Now use the variable in the alert. What happens? var message = \"hello spacecat!\"; alert(message); Comment out the alert with a single line comment. Now, print the value to the console in the browser using the console.log() function. What happens? Copy and paste contents of <script> tag into the script.js file and comment out everything inside of <script> . What happens? Resources JS for Cats - This one walks you through the basics of JS using the Developer Tools Console in Chrome. I recommend this one first. JavaScript Tutorial for Beginners: Learn Javascript in 5 Days - This goes a bit deeper but worth the time spend to understand the basics. I recommend this second. freeCodeCamp - Introduction to Javascript - This tutorial series walks through many common examples and use cases. I recommend it third. W3 Schools JS Tutorial - I recommend this resource as a reference and for the tutorial series. A Study Plan To Cure JavaScript Fatigue (2016) Programming Terminology - A Wikipedia for Programming, Computer Science, and Much More. Don't know a term? Look here. Eloquent Javascript - This is a great free book to learn more about JS language fundamentals. DOM (Document Object Model) The DOM is a standard object model and programming interface created by the browser when a webpage is loaded. It is essentially your HTML page but in a different format now accessible through a browser based programming interface and language (Javascript). In general, JS can manipulate (get, change, add, delete) any part of the DOM (ie. any part of a page or document). Here's a great image of the DOM DOM Tree Visualization Example on CodePen Try opening the Chrome Developer Console and typing document or window . What does it return? How does it relate to the DOM image above? JavaScript DOM Tutorial Series (Video Playlist) - A great series of videos introducing the DOM and how to manipulate it with Javascript. It totals 2 hrs in duration but is extremely helpful to understand some aspects of the Javascript language and how it can be used. Eloquent Javascript: CH 14 - The Document Object Model JS Events and the DOM Frameworks & Libraries What is a framework? What is a Library? Library A library is a collection of code containing objects, functions, and methods that you can use in an application or project. It can be written in CSS, Javascript, or some combination of both. Some common libraries: Google Fonts , Animate.css , Draggable.js , masonry.js , p5.js , D3.js , and Three.js . Framework A framework can be everything you use in application development. It can consist of both front-end and back-end toolsets. It can be a library, a collection of libraries, a collection of scripts, or any piece software you need to create an application. It's best to think about a framework as something that is mostly ready to use out of the box, but still requires an understanding of the terminal, version control, and the web languages: HTML, CSS, and JS. Some common frameworks: Bootstrap , W3.CSS , Materialize , Shoelace , React , Express , and Electron Framework . Evaluating a Library or Framework There are several questions you might ask yourself when choosing to use an existing library or framework. You typically start by looking at the documentation to compare similar features and components and to see if it does something you would like to incorporate into a project. What does it do? What's the benefit of using it? How do you use it? Pros and cons? Are there examples to follow? Is there a large community? Where can I get help? Resources Front-End Case Studies - A great collection of case studies about development tools and practices across the industry. The State of JS 2019 - A great resource showing the state of various JS based frameworks. Top Bootstrap Alternatives Bootstrap Alternatives: The top 36 options in 2020 BREAK - Take 10 min Front-End Workshop | In Class, 45 mins In this workshop we will walk through building a filterable student list from scratch. It will use Bootstrap as the front-end framework and vanilla javascript to filter. References: Figma Design , Github Repo Goals: Learn how to incorporate a front-end library or framework into a project. Understand how to structure a document based on the framework used. Learn how to utilize Javascript to filter a list of items. In this case student names. Instructions: Create a new project folder called \"student-list\". Create an index.html file inside the folder. This will be your primary document. Open Terminal and start a live-server instance inside your project folder. Naviagate to the Bootstrap documentation and look for the Starter Template code. Copy and paste it into your index.html file. You should see an empty page that says Hello, World! in your browser automatically as long as live-server is running. Add a div element with the class=\"container\" inside your body element. All your content will go in here. Below the container div and just ablve the closing body tag, add a <script>... </script> element. This is where we will put all our Javascript code. Refer to the Figma Design to see what the page should look like. What elements will you need to make your document reflect the design in Figma? Tip: Look at the components section of the Bootstrap documentation. Once you have the general structure of the page, we can proceed to make it interactive when typing into the search field by using javascript. Proceed to implement a filter algorithm as described in class. Questions / Next Steps How do I add more data to the page? How do I update the data? Where is the data stored and how do I access it? Resources W3 Schools Bootstrap 4 Tutorial Bootstrap Figma - Signup for a free account with your @colorado.edu email address and apply for a free Education team . Bootstrap Design 1.0 (UI Kit) ($12) - A great BS4 UI kit for Figma. Javascript Language References DOM Document Functions document.createElement() HTML DOM className Property Web Applications What makes a web application? The modern term \"web application\" applies to a variety of systems or stacks. Typically, these systems communicate with one or more servers for access to system resources like memory, databases, and cpu or gpu. ie. speed, power, and connectivity. It may have more than one type of client interface. ie. Mobile, desktop, API, or another application. What are some common types of websites or web applications? Static Website - Basic websites, blogs, etc Native or Mobile App Progressive Web App (PWA) - A responsive mobile website that mimics the behavior of native or mobile apps. Single Page App (SPA) - An application that is dynamic and interactive without reloading the entire page. Resources Web Application Architecture - Summary of the components found in various kinds of web apps.","title":"Week 5: Web Applications &amp; Frameworks"},{"location":"APRD-5005/#assignment-4-digital-legos","text":"Choose one or more libraries or frameworks and make something with it. Thoughts on how to accomplish this: If you have project in mind for your final project or another project, begin to identify what tools you might use to build that project and attempt to work on a piece of it. What functionalites does the project need? (Maybe there's a library for it) How do you see the project working from the user experience? What design elements can you identify and how might they be coded? Investigate libraries that seem interesting to you. Assess their capabilities and how you can apply it to a project. Begin by looking over examples found in the documentation. Look for \"getting started\" documentation about a library or framework. Work through it and see where it takes you. Google is your best friend. Try to be as specific as possible when invesitgating a library or framework. What is your motivation for learning it and what do you want to accomplish with it? Identify some specific uses of it and focus. Start simple. Dont try to understand it all. If you copy and paste code from somewhere, copy one line at a time and learn what it does. Then add more code and repeat. It's easier to start simply and build up complex functionlaity than to work the other way. Use comments (in JS, HTML, or CSS) to write notes to yourself. Work together! Share code, ideas, and libraries you find with eachother. Have fun with it! Make a repository on Github for your project and commit all project files to it. I should be able to clone your project repo and run it in a localhost on my machine to see the same result without changing filenames or folders. Note: Your repo should always include a README.md file with instructions about it's use and what it does. Deliverable: A short 2-4 min video screen capture demonstrating your project running in a local development environment. Be sure to briefly introduce yourself and your project, provide an overview of what you made and how it works. Embed the video into your blog post. Include a link to your Github repo for the code written. A brief writeup on your blog about your learning experience. What hurdles did you encounter and how did you overcome them? What worked and what didn't? What new tools did you try? How would you explain what you've done to someone that doesn't know anything about web development and the tools used? Submit a link to your post on Slack #cmstudio by EOD. Due: Sept 28","title":"Assignment 4: Digital Legos"},{"location":"APRD-5005/#week-6-data-apis-connectivity","text":"Sept 28 | Location: Zoom Meeting Discussion | 20 mins Assignment 4 Share Questions on projects, tools, languages - HTML, CSS, JS, etc Working together Agenda APIs - What and Why API Mashup Session - 30 mins Break - 10 mins Data - How API Workshop - 45 mins API's What is an API? What is the purpose of an API? How do you use them? How do you make your own? Most importantly, as a designer of the future, what does one need to know to work with APIs? The best place to start is by looking at what kinds of APIs exist and how they have been used to build products. Popular APIs Google Cloud Platform Google Maps Embed API Instagram Platform (API) - Start with Instagram Basic Display API Twitter Slack Youtube Soundcloud Spotify Google Sheets New York Times ( Dan Shiffman Tutorial ) Goodreads Numbers API Wordnik Discogs Pandora NASA Marvel Comics Yelp Uber RTD Denver US Patent Office (USPTO) Voice APIs Google Text-to-Speech Amazon Polly Hardware APIs Google Nest Amazon Echo & Alexa Devices API Mashups What's a mashup? It's an application that utilizes one or more APIs in combination to provide a solution to a problem or ask new questions. What is an API Mashup? Programmable Web Mashups HousingMaps (2005) was the very first Google Maps mashup, created before there was a Google Maps API. It overlaid Craigslist apartment and housing listings on a map, for some 30 US cities plus London. We Feel Fine by Jonathan Harris (2006) - New media art project that explores human emotion on a global scale. Radiolab: Insomnia Line - Recent episode that explores the use of voice mail to connect with people experiencing insomnia. I thought this was an interesting parallel and accessible form of crowd sourcing data relating to emotional states. #Elkbot (2011) / Demo WIP Video - by RJ Duran & Chris Znerold INFOGRAPHIC \u2014 A History of Modern API Mashups TOP 15 MUSIC APIS TO POWER YOUR NEXT MASHUP Mapping World Literature with Mapbox by Tess Stevens (C11) API Based Platforms These are platforms that utilize APIs in their products. The use of one or more APIs is core to their busoiness model. later.com - Instagram Marketing Slack Apps - Apps for Slack ecosystem Zapier - Connects anything to anything else Where to Discover APIs Public APIs - A collective list of free APIs for use in software and web development. Programmable Web - This is a great resource for discovering APIs and learning how to use them. API University Free Public APIs for Developers APIs 14 Most Popular Art APIs 30+ Most Popular APIs for Web in 2020 Top 10 Artificial Intelligence APIs for 2020 Top 50 Most Popular APIs on RapidAPI (2020) 6 Interesting APIs to Check Out in 2020 API Mashup Session | Breakout Rooms, 30 mins In teams, brainstorm a concept or solution that makes use of 2 APIs. Spend some time researching the APIs of interest and brainstorming how they could be used to solve a problem or simply have some fun. Make a list of questions concerning that arise in the process. Place all your ideas into the shared API Mashup board board in Milanote. Your will need to signup for an account to work in this shared board. Some things to think about when brainstorming and researching APIs: At a high level: What kind of possibilities emerge when you combine chosen APIs? Whats unique to each API? What features does it have? How do the APIs chosen complement eachother? At a lower level: What kind of data is available? What kind of access is required to make the API work? What does your product or website need to ask of a user? What kind of permission? And what does that mean for how the API is used? When time is up we will come back together and discuss then take a break. BREAK - Take 10 min Data What is Data? How is it represented? JSON, CSV, TXT How do I make a database? What is a database? Web applications read/write into databases on servers using data formatted in JSON. Web applications communicate using JSON. Overviews How to Use an API: Just the Basics JSON is Clearly the King of API Data Formats in 2020 Building Databases / APIs I have an idea for a database or API. How do I begin put something together? What tools can I use? Building an App the Simple Way: 6 Database-Powered App Builders (2015) - List of tools to build databases. 11 Best Tools to Test and Build API Faster Strapi - Node.js based headless CMS Firebase - Dan Shiffman's Firebase Tutorial - This is a great resource for going deeper into JS, APIs, and related programming topics in general. Sheetsu - Makes it easy to access a Google Sheet through an API Postman - A great tool for testing all types of requests to/from APIs hoppscotch - Similar to Postman but web based Additional Resources REST, CRUD HTTP/HTTPS, Ports, URL HTTP HTTP: The Protocol Every Web Developer Must Know - Part 1 Understanding Application Layer Protocols HTTP Request Methods Ports List of ports . For example, http uses port 80, https uses port 443. CRUD What is CRUD? URLs Whats in a URL? protocol, host, port, resource path, query ( Image ) REST What is REST What exactly is RESTful programming? Understanding And Using REST APIs - Great overview of APIs and using them. Javascript Shiffman - Data, Libraries and APIs - A great section of Dan Shiffmans Programming from A to Z Course covering APIs, data, and p5.js. Fetching data from a server - Explains how to use Fetch API (fetch()) vs jQuery.ajax() vs XMLHttpRequest . JS Datatypes Understanding Data Types in Javascript Arrays Data Type: Arrays Arrays Quick Reference Array vs Set vs Map vs Object\u200a\u2014\u200aReal-time use cases in Javascript (ES6/ES7) Objects Data Type: Objects Debugging: Using typeof . typeof \"a string\" Objects Quick Reference Javascript Built-In Object Reference Eloquent Javascript - This is a great book to learn more about the language and how to use Objects. JSON JavaScript Object Notation (JSON) - A syntax for storing and exchanging data. JSON Syntax API Workshop | In class, 45 mins Example 1: Reading data from a Google sheet Ways to read data from a Google Sheet as your database. Method 1: Google Sheets Reader Requires: Node.js Method 2: Tabletop.js Method 3: Sheetsu - Sheetsu makes it easy to access a Google Sheet through an API. Example 2: Requesting data from an API This will use the student list database I setup in Strapi . We will look at how it is setup and how it is pulling data from the database into the page. We will also look at how to make a localhost accessible to anyone on the web using ngrok and localhost.run. The code is available under week6/student-list-strapi in the class repo. Tools we will look at: JSON Formatter makes it easy to see JSON data in the browser. Postman - Allows you to send requests to an API How to share a database or localhost over the Internet: Method 1: ngrok - Requires node.js. Sessions limited to 8 hrs. To use: In Terminal, type ngrok <protocol> <port> . For example, to share a localhost running on port 8080, enter the following. Note this process uses two Terminal windows. Once the connection is established, you will get a public URL to use. ngrok http 8080 Method 2: localhost.run - No install required. SSH Keys required. To use: In Terminal, type ssh -R 80:localhost:8080 ssh.localhost.run . For example, to share a localhost running on port 8080, enter the following. Note this process uses two Terminal windows. Once the connection is established, you will get a public URL to use. ssh -R 80:localhost:8080 ssh.localhost.run","title":"Week 6: Data, API's &amp; Connectivity"},{"location":"APRD-5005/#assignment-5-connect-the-dots","text":"This week I would like you to explore the world of APIs in two ways: Design a mashup concept that attempts to solve a problem. Choose an API to get familiar with and attempt to make something using it. Thoughts on how to accomplish this: Continue down the path you came up with during class or develop a new approach. Spend some time researching APIs that are in line with products or services you are familiar with and use often. Research mashups that use an API you are exploring. What was done? Can it be improved? What are some of your hobbies and interests? Is there an API for it? If not, what if there was? Whats possible then? Write down the names of a bunch of APIs you research and put them into a hat. Stir it around and pull out two. Repeat this process for a time and write down all the combinations. What's interesting? Look for recent tutorials that make use of an API you are curious about. Attempt to recreate the workflow. Start with simple GET requests and increase the complexity of your queries as you get more familiar with the documentation and API. Work through the class examples and develop a workflow that enables you to work with data in a new way. For example, using Google Forms (for user data input) to generate a database (Google Sheet), which you then can pull data from via API. Experiment with an API and ask \"what if?\" questions in the process. WORK TOGETHER! Make time to work together outside of class. Have fun with it! Make a repository on Github for your project and commit all project files to it. I should be able to clone your project repo and run it in a localhost on my machine to see the same result without changing filenames or folders. Note: Your repo should always include a README.md file with instructions about it's use and what it does. Deliverable: A blog post describing your ideas and sharing any visuals created or referenced to illustrate the concept. You can record a short video presentation with slides if that helps to share the concept. Embed your video into your blog post. Include a link to your Github repo for any code written. Submit a link to your post on Slack #cmstudio by EOD. Due: Oct 5","title":"Assignment 5: Connect The Dots"},{"location":"APRD-5005/#phase-3-digital-design-foundations","text":"Source: 7 Days, 700 Pens: Parametric Design for Customized Conference Swag by Formlabs In this phase we will look at tools and workflows that support 2D and 3D digital design. We will approach each topic with simplicity in mind and focus on understanding fundamental concepts. To build advanced skills with the tools we discuss you will need to dedicate time outside of class for further experimentation. We will approach topics in a hands-on workshop format so be prepared to dive in. The goal of this phase is to learn how to utilize digital design tools to create and represent concepts.","title":"Phase 3: Digital Design Foundations"},{"location":"APRD-5005/#week-7-intro-to-cad","text":"Oct 5 | Location: Zoom Meeting Discussion | 30 mins Assignment 5 Share Questions Agenda CAD Overview Intro to Tinkercad Intro to Rhino Break - 10 mins Intro to Fusion 360 Computer-Aided Design (CAD) What is CAD? Why is it useful? ( Hint: Look around. What do you see? Almost everything in our human built environment is made using an industrialized CAD/CAM process. ) History of CAD Vintage Photos: Life Before AutoCAD 60 Years of CAD Infographic: The History of CAD since 1957 The Engineering Design Revolution: The People, Companies and Computer Systems That Changed Forever the Practice of Engineering By David E. Weisberg . Chapter 2: A Brief Overview of the History of CAD CAD vs CAM - What's the difference? (We're working towards CAM in Phase 4: Becoming Physical ) CAD = Computer-Aided Design (Input: Idea for 3D model; Output: 3D model and/or instructions for CAM.) CAM = Computer-Aided Manufacturing (Input: Toolpath file / machine code; Output: Physical Object) CAD Tools 2D - Adobe Illustrator , Adobe Photoshop , etc 3D - Fusion 360 , Rhino , Tinkercad , Autocad , Inventor , Solidworks , Blender , Cinema4D , etc File Formats 2D Raster - JPG, PNG, TIFF Vector - AI, EPS, DXF, SVG, PDF 3D - OBJ, STL, STEP, IGES, GLTF 3D Meshes A polygon mesh is a collection of vertices, edges and faces that defines the shape of a polyhedral object in 3D computer graphics and solid modeling. The faces usually consist of triangles (triangle mesh), quadrilaterals (quads), or other simple convex polygons (n-gons), since this simplifies rendering, but may also be more generally composed of concave polygons, or even polygons with holes. Source: Wikipedia Besides designing a 3D model directly in CAD, what other ways can you get a 3D model or mesh? Downloading a model from Thingiverse 3D Scanning - Structure Sensor 3D Scanner Photogrammetry - Metashape Pro Data Driven - Microscape , Tutorial on making 3D printed maps Algorithmic / Generative - Nervous System , Form+Code in Design, Art, and Architecture fMRI, CT (Medical Imaging) - 3D print of my brain and skull from MRI data Confocal, etc (Biological Imaging) - Imaris Utilities These tools help you easily view 3d models (stl / meshes). Meshlab Meshmixer Typical Digital Design to Fabrication Workflow Step 1: Design with one or more CAD tools for the desired production method(s). For instance, laser cutting requires 2D vector or raster artwork and 3d printing requires a 3D model. Step 2: Fabricate by hand or machine or some combination of both. Return to step 1 and repeat as needed. Hand: - cut, carve, bend, sand, etc Manual Machines - Mill, Lathe, Saw, Drill, etc Computer Numerically Controlled (CNC) Machines - CNC Mill, CNC Router, 3D Printer, Laser Cutter, Plasma Cutter, Water Jet Cutter, etc In general, most workflows consist of a series of steps where specific tools and knowledge are put into action to complete the step and move to the next step in the process. In terms of digital to physical workflows, we're always dealing with data in some form / file format. Its good practice to get familiar with input and output formats for any CAD tool you work with because you then know what the tool is capable of and how other tools can interface with it. Most CAD environments can work with a variety of 3D file formats such as STL, OBJ, STEP, and many others. Workshops We will survey a few different CAD tools with the goal of understanding some of the similarities and differences in workflow. There is no single CAD tool that does anything and everything. The most power workflow I can suggest comes from working with a variety of 2D/3D tools to realize an idea. As with most tools we encounter as designers, each one has a learning curve with some aspects being steeper than others, but with practice, they will become easier to use. I highly recommend spending the time this week exploring the learning resources available below. Intro to Tinkercad Interface / Navigation Drawing Geometry Modes - 3D Design, Blocks, Bricks Importing / Exporting Intro to Rhino Workshop Intro to Fusion 360 Workshop Resources Rhino Resources Rhino Tutorials Think Parametric: Rhino 101 - Fundamentals of 3D Modeling Plethora Project Rhino 6 Essential Training - Linkedin Learning Login Required Learning Rhino 6 for Mac - Linkedin Learning Login Required Create a Pattern on Vase Surface - Neat beginner tutorial showing how to apply a pattern to a surface. Modeling an Espresso Cup and 3D Print with Shapeways - A great design to fab workflow demonstrating how to take a model created in Rhino and upload to Shapeways to evaluate material options, print cost, and 3D print. Step by Step Tutorial of Modeling a Mug - A great beginner tutorial walking through modeling a mug from references images. If you are completely lost with Rhino, start here and work through the whole tutorial. Fusion Resources Fusion 360 Gallery Fusion 360 Manual Learn Fusion 360 in 60 Mins Fusion 360 Design Academy Fusion 360 Adoption Portal Fusion 360 Forum - Need help? Check here. Tutorials Arduino UNO Enclosure Tutorial ( Arduino UNO Model , Arduino Drawing ), Shorter version Parameter Driven Project Enclosure Bookshelf Tutorial - Watch to get a good walkthrough of sketching basics. Making Parametric Models in Fusion 360 Easy Snap Fit Cases Udemy: Product Design in Autodesk Fusion 360 from idea to prototype Udemy: Designing for 3D Printing with Fusion 360","title":"Week 7: Intro to CAD"},{"location":"APRD-5005/#assignment-6-from-sketch-to-model","text":"This week I would like you to explore CAD tools by creating a 3D model from a sketch. Thoughts on how to accomplish this: Spend time sketching out ideas on paper or making something physically with paper, cardboard, or other materials. Attempt to translate the shapes you put together into 3d in CAD. Think in terms of problems (as design opportunies) and solutions. Where do you see a need for making something using a CAD tool? Spend time looking through the resources listed above. There are several tutorials that can be worked through. Work through Linkedin Learning lessons and focus on applying a few tools or techniques to create your model. Inspect models you find and attempt to recreate the model in your CAD tool of choice. If you use a tutorial to guide the design process, make it a point to deviate from the instructions to make the design your own. Simplify your design to make use of basic shapes you know how to manipulate. Then increase the fidelity. Measure something real and physical to get the dimensions. Attempt to draw something that matches the specifications. Read the documentation or manual for the tool. WORK TOGETHER! Make time to work together outside of class and share modeling tips. Have fun with it! Deliverable: A blog post describing your design process from sketch to 3D model. What did you design and why? What challenges did you face while making your model? What resources did you use? Export a mesh (STL File) of your model and upload it to Sketchfab (You will need to make an account). Once uploaded to Sketchfab, embed your uploaded model into your blog post. Here's a tutorial about how to do this . This is the same as embedding a Youtube video into a blog post, but with a 3D viewer window containing your model, which you can manipulate and even visualize in VR! Cool eh!? Check out these examples from past students . Be sure to include any screenshots and visuals created or referenced to illustrate your ideas. You can record a short video presentation or process walkthrough if that helps to share your project. Embed your video into your blog post. Submit a link to your post on Slack #cmstudio by EOD. Due: Oct 12","title":"Assignment 6: From Sketch to Model"},{"location":"APRD-5005/#week-8-parametric-design","text":"Oct 12 | Location: Zoom Meeting Assignment 6 Share It's great to see the variety of approaches to this project. Leveraging available resources is key for working quickly on a concept while ramping up on a new skillset or toolset. Export FBX files to retain basic color information when importing into Sketchfab. Textures can not be exported in any format. Agenda Parametric Modeling vs Direct Modeling Examples of Parametric Design Break Fusion 360 Work Session Rhino & Intro to Grasshopper Work Session? - How many people experimented with Rhino? Parametric Modeling vs Direct Modeling Parametric Modeling Parametric Modeling (aka Parametric Design) is a process based on algorithmic thinking that enables the expression of parameters and rules / constraints that, together, define, encode and clarify the relationship between design intent and design response. This approach follows a step by step process and may require careful planning to design a model. Parametric modeling is extremely useful for products that are driven by dimensions\u2014think standard office fare like desks and shelving or tools that can vary in size. With the parametric approach, engineers can quickly and easily create different configurations of their designs. Direct Modeling Direct modeling empowers you to define and capture geometry quickly, without spending time worrying about features, constraints, and original design intent. It is often compared to working with modeling clay. Simply push and pull the geometry until you arrive at just the shape you want. In direct modeling, designers can push and pull on their model to change it. One benefit of this capability is the ease with which designs can be altered, enabling rapid iteration and prototyping. For that reason, direct modeling has found a niche in the world of industrial design, where fluid curves and bold aesthetics play a big role. So...what is Rhino and Fusion 360? Fusion 360 Parametric Modeling History-based Does not have a node-based visual editor similar to Grasshipper built-in to Fusion (yet). The closest solution would be to use Dynamo Studio and plugin Dynamo for Autodesk\u00ae Fusion 360\u2122 . Rhino Direct Modeling History-free, unless it's enabled for specific operations. See History . Has node-based visual editor Grasshopper (aka Explicit-history) built-in. Through Grasshopper, parametric design is possible, taking form as a \"definition\" which consists of the design history and thereby the object. Others In the past few years, many other types of CAD-like hybrid environments have come to term such as Onshape , a CAD based prodcut design platform. Similarly, node-based editors or plugins for CAD environments offer designers open-source and accessible alternatives to Grasshopper and Dynamo. Tools such as Sverchok and Sorcar for Blender are paving the way. References: Parametric Design (Wikipedia) , What\u2019s the Difference Between Parametric and Direct Modeling? Introduction Grasshopper and History Parametric vs Direct Modeling What is Design Intent? Examples What types of objects can be considered \"parametric\"? Just about anything really. Some examples: Cups, Vases, Pitchers, Bottles, Bells, Bowls, Clothing, Furniture, Lighting, Cars, Personal Items, Buildings!... what else? Parametric Design Examples CW&T 100 Dropped Pendant Lights (2017) Formlabs Digital Factory Pens (2017) Gillette Uses 3D Printing to Unlock Consumer Personalization (2018) #100bottles100days by Anna Whitehouse - \"Touch Clay Everyday\" Nervous System Design Apps , Kinematics @ Home WOVNS , Processing Tutorial Opendesk Mercedes Grille Patterns Fusion 360 Work Session Open your projects for this week and lets look at issues you ran into. What gave you trouble?","title":"Week 8: Parametric Design"},{"location":"APRD-5005/#assignment-7-mass-customization","text":"Design a parametric model and produce 3 variations that meet the needs of 3 different users. For example, 3 different chairs made to fit 3 sizes of human bodies - small, medium, large. The chairs all posses the same characteristics except the size. Thoughts on how to accomplish this: Spend time sketching out ideas on paper or making something physically with paper, cardboard, or other materials. Attempt to translate the shapes you put together into 3D in CAD. Iterate on your previous project. How can you make the model fully parametric? What parts of your model need to be parametric? Hint: If you are using Fusion 360, you will likely want to make use of Constraints and Dimensions in your sketches and entering values into the Parameters Window. If you are not using Fusion 360, how can you make your model parametric? What's your approach? Measure something real and physical to get the dimensions. Attempt to draw something that matches the specifications. WORK TOGETHER! Make time to work together outside of class and share modeling tips. Have fun with it! Deliverable: A blog post describing your design process from sketch to 3D model. What did you design and why? What makes your design parametric? ie. what are the parameters of your design? What challenges did you face while making your model? What resources did you use? Export a 3D model file (STL or FBX) and upload it to Sketchfab . Be sure to include any screenshots and visuals created or referenced to illustrate your ideas. You can record a short video presentation or process walkthrough if that helps to share your project. Embed your video into your blog post. Submit a link to your post on Slack #cmstudio by EOD. Due: Oct 19","title":"Assignment 7: Mass Customization"},{"location":"APRD-5005/#week-9-visualizing-products","text":"Oct 19 | Location: Zoom Meeting Upcoming Phase 4: Next week we will start looking at digital fabrication tools and workflows. Week 12 (Nov 9) - Final project Proposal Due Assignment 7 Share What did you make and how did you make it parametric? Questions Agenda Representing Concepts Questions Concerning the Visualization Process Examples General Workflow Workshop: Adobe Dimension Representing Concepts Visualizing a product be it large or small, digital or physical, is an involved process that requires constant iteration and feedback from stakeholders. For our purposes we will begin by exploring some questions that arise in the process of designing products. Here are a few types I have encountered. I deal with several of these forms of representation everyday. What other forms of visualization can you name? Digital Designs Digital Mockups Digital Wireframes Line Drawings Physical Prototypes Animation Schematics Questions Concerning the Visualization Process What digital and/or physical representations need to be used to effectively communicate design intent? What is your idea? How do you imagine it to be? What kind of materials does your design or idea require? Is it physical or digital or both? Who is your audience? Who will be viewing the images and making a decision through it? What meaning do I wish to convey through an image or animation? How realistic does my image need to be? Do I need a render or a photo? How much time do I have to make a render? What kind of fidelity is required? Does it move or require showing functionality through animation or diagrams? Examples We will take a look at some recent examples of projects using different approaches to visualize a concepts. General Workflow In this class we are interested in assembling workflows that produce a result. Sometimes the workflow you use to accomplish a task is possible within a single program or it's constructed through a series of operations provided by several programs. Below is a general workflow for visualizing a product. Create design files in 2D or 3D. These are your design assets. Export models in a 3D format that allow for applying color, materials, textures to individual components (ie. FBX, STEP, OBJ, STL). Create 3D scene with assets, environment, and lighting in render tool of choice. In some cases, the CAD environment provides basic rendering tools. Make test renders or preview results with lower quality settings. High quality renders take longer and use more resources. Expect to wait. Repeat the process to produce quality images that can be further processed or composited. BREAK Workshop: Adobe Dimension | In Class, 45 mins In this workshop we will walk through designing a scene with objects in it. We will then explore environment, lighting, materials, and rendering. Goals: Get familar with the Adobe Dimension interface and scenes Get familiar with environment, camera, models, and materials Get familiar with basic render settings Resources Adobe Dimension Getting Started with Adobe Dimension - Official Youtube playlist with tutorials showing how to use the program. Start here. File Formats ( Importing 3D Models ) 3D Model Formats - OBJ, FBX, STL, SKP Material Formats - MDL, SBS, SBSAR Tutorials by Dansky - Playlist of tutorials showing how to use Dimension in various workflows. Create Easy 3D Illustrations in Adobe Dimension - Onboarding Tutorial - Great intro tutorial showing how to use Dimension and XD in a workflow. Creating packaging and prototypes with Adobe Dimension Fusion 360 Export format options for Fusion 360","title":"Week 9: Visualizing Products"},{"location":"APRD-5005/#assignment-8-product-visualization","text":"Using Adobe Dimension, generate 3 renders of a product or design concept you created in CAD. What does this mean? This could be 3 unique instances of a single design concept (parametric design) or it could be 3 different visual representations of a single design instance, paying special attention to exploring different environments, lighting configurations, and materials to create different moods. Project Details: The images you produce will be shared on Instagram @criticalmakingstudio . They will likely be reshared on the official CMCI Studio ( @cmci.studio ) account as well. Canvas Sizes - Choose story or square formats. Story size can be cropped to square. Instagram Story - 1080 x 1920 px Instagram Square - 1080 x 1080 px Project Title Give your project a title and short description. This will be included in each post. Your Instagram username Thoughts on how to accomplish this: Spend some time working with Adobe Dimension to get familiar with the interface and workflow. Look through some of the Adobe tutorials to start. Export different model formats form your CAD tool. Start with FBX and STL files. Then import your models into Dimension. Find a workflow that agrees with your models. Read the User Guide. Read about Supported file types and Materials . Note: Depending on your computer hardware, producing renders can take awhile. Plan ahead to make sure you have time to produce the best quality renders you can. WORK TOGETHER! Make time to work together outside of class and share rendering tips. Have fun with it! Deliverable: A blog post describing your process beginning with exporting from CAD tool to setting up your renders to producing final images. What kind of workflow did you come up with? What worked and what didn't? What challenges did you face? What resources did you use? Produce 3 high quality images of product concepts you designed. Include these images in your blog post with a brief description for each image. Place your images into the Milanote board linked below as well. Assignment 8 Milanote Board You can record a short video presentation or process walkthrough if that helps to share your project. Embed your video into your blog post. Submit a link to your post on Slack #cmstudio by EOD. Due: Oct 26","title":"Assignment 8: Product Visualization"},{"location":"APRD-5005/#phase-4-becoming-physical","text":"Source: Laser Cut Parametric Triangles by RJ Duran In this phase we will look at tools and workflows used in digital fabrication. We will approach each topic with simplicity in mind and focus on understanding fundamental concepts. To build advanced skills with the tools we discuss you will need to dedicate time outside of class for further experimentation. We will approach topics in a hands-on workshop format so be prepared to dive in. The goal of this phase is to learn how to utilize digital fabrication tools to create physical objects from digital designs.","title":"Phase 4: Becoming Physical"},{"location":"APRD-5005/#week-10-no-class","text":"Oct 26 Class canceled due to weather.","title":"Week 10: No Class"},{"location":"APRD-5005/#week-11-intro-to-digital-fabrication","text":"Nov 2 | Location: Zoom Meeting Updates Projects - A page dedicated to past proejcts done in Critical Making courses. Final Project Proposal - Due: Monday Nov 9 by EOD Assignment 8 Share Milanote Board Questions Agenda Overview Finding Inspiration Outsourcing Fabrication BREAK Digital Fabrication Worklfows 3D Printing Laser Cutting Vinyl Cutting Digital Fabrication Digital fabrication is a type of manufacturing process where the machine used is controlled by a computer. The most common forms of digital fabrication are CNC Machining, Laser Cutting, and 3D Printing. ( Source: Open Desk ) CAD & CAM CAD = Computer-Aided Design Input: Idea for 3D model Output: 3D model and instructions for CAM CAM = Computer-Aided Manufacturing Input: Toolpath file to control machine process Output: Physical object Where to Begin In general, every digital fabrication process works in a similar way: A digital file is created (ie. toolpath) to deliver instructions to a machine (ie. fabrication method) engaging with a piece of material (ie. stock) to produce a specific result. Intro to Digital Fabrication (Miro Board) When encountering these tools, I find most people begin in one of the following groups with the following question: Idea - I have an idea. Which digitial fabrication tool(s) enable me to make it? Process - I am interested in a digital fabrication tool or process. What can I make? Finding Inspiration Digital Fabrication on Pintrest Thingiverse 2020 Best Sites for Free STL Files & 3D Printer Models Ultimaker Applications Formlabs Blog - They feature lots of interesting projects and case studies. Projects Creative Applications Autodesk Pier 9 Residency Projects - Wayback Machine link from Dec 2018 @HardwareUX @pdesign101 Embla Candles / Instagram - Fun brand utilizing 3d printing to make candles. Uppgradera - Upgraded IKEA experiences 3D Printed Arduino CNC Drawing Machine by DIY Machines - I'm interested in building one of these. Similar to the Axidraw . #axidraw to see examples. CNC Wood Joinery Dom Riccobene - CNC Wizard Bantam Tools Podcast: The Edge - A great podcast about design and technology. The 3D Printing Handbook Outsourcing Fabrication 3D Hubs - CNC Machining, 3D Printing, Injection Molding Shapeways - 3D Printing Fictiv - CNC Machining, 3D Printing BREAK Workshop: Digital Fabrication Workflows We will spend the rest of the time getting familiar with the software workflows for 3D printing, laser cutting, and vinyl cutting. Remember: To get something 3D printed or laser cut at the Idea Forge, you need to follow the instructions for 3D Printing & Laser Cutting Fabrication Requests . 3D Printing with Ultimaker 3 Save print ready STL from CAD Load STL file into Cura Choose PLA material for Extruder 1 and PVA for Extruder 2 (If using support material) Choose a print profile (aka Layer Height: Start with Fast or Normal options) Choose an infill (Density) Save GCODE file and copy to USB drive to insert into Ultimaker 3 Things to consider: Material - PLA and ABS are the most common materials but there are many others out there that work with FDM machines like the Ultimaker. If you are outsourcing a print job, you will need to investigate the material options provided by the print service. Outsourcing has the advantage of printing with a variety of machines and materials. Scale - How large of a print do you need? Can your object be printed in parts and assembled? Printability - Does your model need to be printed? Is this the best method? Is there another method better suited for the task? Slicing tools like Cura convert a 3D mesh (STL) into GCODE to run the printer. This is not to be confused with the Autodesk tool - Slicer for Fusion 360 . That is a tool for converting 3D models into 2D pieces that can be cut on a laser cutter with 2D sheet material to assemble into a 3D model. Additional resources for printing can be found under Design for 3D Printing . Laser Cutting Make a 2D vector graphic design file in Illustrator Prepare layout in file. Match the size of material you wish to cut and the machine you wish to use. Submit laser cutting fabrication request at Idea Forge. Vinyl Cutting Make a 2D vector graphic design file in Illustrator Define your Artboard size to be the dimensions available within the left and right margins of the rollers. The width will be shown on the vinyl cutter display once you load material. Configure print settings in Window > Extensions > Roland CutStudio Select GX-24 Load material into machine Outline text/shapes Print/Cut","title":"Week 11: Intro to Digital Fabrication"},{"location":"APRD-5005/#assignment-9-final-project-proposal","text":"Submit a Final Project Proposal by EOD. Due: Nov 9","title":"Assignment 9: Final Project Proposal"},{"location":"APRD-5005/#phase-5-final-project","text":"","title":"Phase 5: Final Project"},{"location":"APRD-5005/#week-12-final-project","text":"Nov 9 | Location: Zoom Meeting Meeting Signup: https://calendly.com/rjduran","title":"Week 12: Final Project"},{"location":"APRD-5005/#week-13-final-project","text":"Nov 16 | Location: Zoom Meeting Meeting Signup: https://calendly.com/rjduran","title":"Week 13: Final Project"},{"location":"APRD-5005/#week-14-final-project","text":"Nov 23 | Location: Zoom Meeting Meeting Signup: https://calendly.com/rjduran","title":"Week 14: Final Project"},{"location":"APRD-5005/#week-15-final-project","text":"Nov 30 | Location: Zoom Meeting Meeting Signup: https://calendly.com/rjduran","title":"Week 15: Final Project"},{"location":"APRD-5005/#week-16-final-project-presentations","text":"Dec 7 | Location: Zoom Meeting Last Day of Class Final Project Presentations Final Project Documentation Due by Weds Dec 9th, 2020","title":"Week 16: Final Project Presentations"},{"location":"APRD-5005/#final-project-documentation","text":"3D Printed Car: Final Form by Mark Banzhoff A Bike For a Lifetime by Mateo Barroetavena Drynamic Bag Creation by Cal Brackin Novel breast MRI system and the B.R.A.V.E. by Arielle Castro RuffGuy Dog Apparel by Karlie Cronin Web Portfolio Design Final Project by Hudson Fega Design Portfolio from Scratch by Bella Fidjeland The Ultrasonic Selfie Stick by Caleb Hammel All Your Holiday Needs in a Box! by Natalie Jackson Chameleon Prosthetics by Cody King I Couldn\u2019t Find the Perfect Commuter Backpack, So I Built One. by Heather Kraft Welcome to Stems: A Site for Plant Lovers by Katie Kreider HM Designs Website Portfolio by Haley Mordini Home Made Hand Soap by Mye Ponrattanasiri Color Me In: An Interactive Exploration of Abstraction and Play by Devva Saunders Beatbox to Real Drums by Max Vecchitto Brown Recluse on the Big Screen by Jacque Walo Chinese Moon-shaped Fan by Renee (Yuan) Zhuang","title":"Final Project Documentation"},{"location":"APRD-5007/","text":"Critical Making 2: Immersive Media Design Critical Making 2: Immersive Media Design introduces designers to the tools and workflows used to build immersive virtual reality and augmented reality experiences. This studio-based course explores the intersection of virtual reality (VR) and augmented reality (AR) tools and workflows, interaction design, multimedia production, and product innovation as possible tools for solving industry-based challenges. Students will develop fundamental skills in 2D/3D asset creation, 3D game engines, simulation, animation, and rendering strategies used in the production of high-quality content for use in crafting immersive digital experiences. The course will utilize industry-standard tools such as Unity, Cinema 4D, Adobe Creative Cloud, and hardware platforms such as HTC VIVE for VR and ubiquitous mobile devices for AR. In addition, the course will cover concepts ranging from UI/UX design for immersive experiences, interaction design in VR, game mechanics, designing for human interaction, and scripting behaviors for digital objects and agents. Day and Time: Monday, 9:30 am - 12:00 pm CMCI Studio (1301 Walnut St) Location: We have adopted a hybrid (remote/in-person) class structure this semester due to COVID-19 . This means anyone can participate in person or virtually over Zoom anytime. The class schedule will indicate when class is to be held in person at the Studio or virtually over Zoom. The following Zoom link is to be used for all class sessions. The required password is provided in Slack. >> Zoom Meeting (Password Required) << Instructor: RJ Duran rj.duran@colorado.edu Slack: @rjduran. #cmstudio on cmcistudio.slack.com Office hours by appointment. Feel free to reach out to me via slack or email. Syllabus: This website is a real-time version of the course syllabus. It is updated weekly throughout the semester. A static version can be downloaded here . Slack: Channel #cmstudio and user group @imd will be used for all course communication and notifications. Be sure to use the appropriate user group when necessary. Course Themes Designing Media for VR and AR Building Mobile AR Experiences Building VR Experiences Digital Asset Creation Interactivity UX/UI of XR Scripting / Programming Course Workload This is a 3 credit hour course. You should expect to dedicate at least 2-3 hours per credit hour. This translates into 6-9 hours per week outside of class. Consider 6 hours a minimum expectation for one studio course and plan accordingly with your other studio courses. Assignments for this course consist of weekly blog posts demonstrating project-based and process oriented research and explorations in making . Assignment parameters will be based on the topic of the week and in-class discussions. Refer to the Course Deliverables section for more information. The course is organized into weekly meetings consisting of instructor led project-driven topics organized as workshops and studio work sessions. It is expected that all students are active participants in each session. Course Deliverables This is a project based course and largely driven by student research and interests. As such, each deliverable is expected to vary based on the project parameters and requirements. The following outlines the general criteria for course deliverables throughout the semester. Assignments Assignments are given weekly and need to be submitted as a blog post published to your Critical Making blog. A minimum of 1 blog post per week is the expectation. Medium is widely used in other studio classes but any blogging platform may be used. Posts are to be submitted via slack #cmstudio by the specified due date each week. It is recommended that a post includes a variety of media and content to support the subject matter. For example: text, images, video, graphics, photos, mockups, screen captures, tutorials, 3d model viewers (sketchfab), sketches, code, gifs, references, etc. Anything that is required to effectively communicate the details of a project, process, prototype, or idea. The subject matter is in response to the topics of the week. Ideally, it falls in line with your interests, research area, project, creative process, etc. For example, you might consider doing a series of tutorials on a topic that interests you or a process/workflow you are currently exploring through the course. Posts should be written to the best of your abilities and for a public audience. The post and any accompanying visual content (images, video) may be shared on social media. Final Project Final Project Proposal (Submitted as a blog post) Final Project Presentation (Delivered live or as pre-recorded presentation) Final Project Documentation (Submitted as a blog post) Technology In this course you are free to use any kind of computer and operating system you wish as along as it can run the software listed. The course will primarily be taught using the macOS based version of each tool we encounter with the exception of SteamVR, which is Windows based. Hardware A recent Apple Macbook (2013 and newer) with macOS Catalina (10.15) or a Windows 10 based system. At least 30 - 50 GB extra hard drive space to install software and work. At least 1 TB external / portable hard drive to move files around and between computers as needed. (Optional) A recent mobile device supporting AR Kit 3 or 4 (devices with A12+ chip running iOS 13) or ARCore (devices running Android 7.0) for mobile AR development. Learn more about AR supporting devices: ARKit Devices and ARCore Devices . Software In this class we will make use of various types of design and engineering software. Some tools are essential and required to complete a task such as getting a VR or AR experience working while other tools are based on personal preference and workflow. Access to the following software is recommended. Required Software Unity 2019.4 ( Installed with Unity Hub ) Xcode 12 (macOS only) - Developer account required to access Apple dev resources. Visual Studio Community 2019 for Mac or Visual Studio 2019 Community for Windows Visual Studio Code (aka VSCode) Cinema4D for Students - Create account and follow instructions to obtain 6 month educational license via Kivuto. Adobe Aero (iOS App) - Free from the App Store. Adobe Mixamo Additional Software Steam & SteamVR Processing Blender Touch Designer Adobe Fuse Adobe Dimension Autodesk Maya Autodesk Mudbox ZBrush Substance Suite Autodesk Fusion 360 McNeel Rhinoceros Meshlab Meshmixer Structure Sensor (iOS App) Lens Studio Spark AR Studio Week 1: Overview / Unity Jan 25 | Location: Zoom Meeting Week 1 Slides Star Wars: The Mandalorian Disney Gallery: The Mandalorian The Virtual Production of The Mandalorian, Season One The technology that\u2019s replacing the green screen Legend of Zelda: Breath of the Wild Game The Making of The Legend of Zelda: Breath of the Wild (Youtube Playlist) BotW Panoramas by Andy Teijelo P\u00e9rez Nintendo Labo VR Kit Big Bang AR Google \u2014 Childish Gambino AR How Do You Become a YouTuber Without Showing Your Face? Student Projects Welcome Home: VR Walkthrough Experience AR Service Dog Simulation Stuttering VR Exposure Therapy Creative Applications Assignment 1: 3D Concepts & Unity Essentials Part 1: Watch Videos on 3D Concepts Watch all the videos in the Youtube Playlist below to understand key 3D concepts you will encounter throughout this course. We will be touching on most of these topics at some point. Overview: Start 3D: An introduction to key 3D concepts Youtube Playlist: Adobe Start 3D: Learn Key 3D Concepts Part 2: Unity Essentials Before we meet next week, I would like you to work on the first mission, Foundations: Get started with Unity from Unity Essentials . To get started, signup for a Unity account (Unity ID) at learn.unity.com . You will encounter the LEGO Microgame while working through the lessons. Deliverable: There is no required blog post for this week but you can document your progress with one if you like. I will assume you have worked through these resources and have an understanding of the content. You can share a link to your Microgame submission for others to play with via Slack. We will start class next week by checking out your Microgame projects. Week 2: Unity / Intro to Scripting Feb 1 | Location: Zoom Meeting Week 2 Slides Assignment 2: Roll-a-Ball Work through and complete the Roll-a-Ball project in Unity before we meet next week. Useful Resources Coding in C# in Unity for beginners Creating and Using Scripts Unity Scripting API Reference The C# Player's Guide (3rd Edition) by RB Whitaker Deliverable: There is no required blog post for this week but you can document your progress with one if you like. I will assume you have worked through this tutorial and have an understanding of the content. If you create a derivative work from the tutorial, I recommend documenting your work and sharing it with the group via Slack. We will start class next week by checking out any projects you make. Week 3: Cinema 4D Feb 8 | Location: Zoom Meeting Week 3 Slides ENVD CLC World Machine Terrain Generator Goodbye Uncanny Valley Creating Usability with Motion: The UX in Motion Manifesto Compelling and Moving \u2013 A Guide to Motion Design Principles Frank Thomas & Ollie Johnston from Disney Disney Animation: Illusion Of Life by Frank Thomas & Ollie Johnston 10 Principles of Motion Design by Jorge R. Canedo Estrada of Ordinary Folk Apple Jobs Beeple HUDs+GUIs Grey Scale Gorilla Isometric Rooms (Dribble Board) Robbie Tilton Cinema 4D Student License Start here - Cinema4D for Students Create an account and follow instructions to obtain 6 month educational license via Kivuto. There is a small ($3) processing fee to pay. Once you place your order for a license, look for the PDF for further instructions via email. Note the Promo Code. You will use it when setting up your MAXON license. Activating the license will take place under your MAXON account, which you sign into when first launching C4D. Assignment 3: Animate a Logo Part 1: Tutorials Work through Learning Cinema 4D S22 on LinkedIn Learning. It should take about 2 hrs to complete. It's a good introduction to the environment and common tools and workflows. Additional Resources Introduction to Cinema 4D by Grey Scale Gorilla Cinema 4D S22 Essential Training: Motion Graphics Getting Started with Cinema 4D Part 2: Animate the CMCI Studio Logo Using the CMCI Studio Logo, create a stylized 3D animation using keyframes and render a short video. Experiment with some of the features available in Cinema 4D such as materials, cameras, lighting to give your render some style and personality. Download a the CMCI Studio logo file from Slack channel and import into C4D. Tutorial: Cinema 4D: Importing Vectors from Adobe Illustrator In C4D, set your final render image size to 1920 x 1080 px before rendering frames. Tutorial: Cinema 4D: Exporting Animation Videos Create an animation 5-10 seconds long. At 30 fps this would be 150-300 frames. Bonus! Structure your animation keyframes so you achieve a seamless loop animation. Deliverable: Document your process for Part 2 in a blog post. Produce an animation and upload it to Youtube to embed in your blog post. Write a blog post that includes any details and reflections of your design process in Cinema 4D and other tools used to make your final animation. Share a link to your post with user group @imd in Slack channel #cmstudio . Due: Friday, Feb 12 Week 4: XR Asset Workflows Feb 15 | Location: Zoom Meeting Week 4 Slides Assignment 4: Creating Assets for XR Using Cinema 4D, create an animated asset that can be used in Adobe Aero or Unity. Workflow: Animate asset, export FBX, Import FBX into Aero, Preview on Desktop and Mobile To create your asset in Cinema: Choose a vector (icons, logo, etc) to import and animate in Cinema 4D or import an existing 3d model you download from the internet and animate it or create something from primitives in Cinema. Once your animation is ready to export, review the following tutorials. Tutorial: Cinema 4D: Export FBX with Keyframe Based Animation Tutorial: Cinema 4D: Export FBX with Dynamics Based Animation To visualize the result using Adobe Aero: Download and install the Desktop App: Adobe Aero Desktop Beta Download the mobile app if you have a compatible iOS device. Android is coming sometime in the future. If you don't have a compatible device, don't worry, just share a link to your experience created in the desktop version. Make sure to read through the Adobe Aero User Manual: Key 3d modeling conepts to get familiar with what works best for Aero. Go back to your design if something doesn't seem to import correctly or you have too many polygons on an object. Remember you can use Autodesk FBX Review as a way to quickly preview FBX files. Setup a scene, add FBX files, and setup triggers and behaviors in Aero. Deliverable: Document your process in a blog post. Include video screen captures from your desktop and/or mobile device to show how you built your assets and visualized them. Share a link to your post with user group @imd in Slack channel #cmstudio . Due: Sunday, Feb 21 Week 5: VR / SteamVR Feb 22 | Location: Zoom Meeting + In Person Week 5 Slides Assignment 5: Build a World Based on your concept of a \"world\", construct one using existing assets from the Unity Asset Store and/or any assets you have created. What is in your world? What does it look like? What does it sound like? What does it feel like? What inhabits your world? How do you navigate the world? FPS Controller To navigate your world initially you can use the first person controller ( Characters/FirstPersonCharacter/Prefabs/FPSController ) from the Unity Standard Assets . Standard assets like these can be used to build functional prototypes to aid development of a game or experience and can be replaced with other assets in time. The first person controller simulates the functionality of the steam VR camera /controller rig and can be replaced when building for VR. Tutorial: How to Add a First Person Controller to Unity Scene Steam VR (Windows Only) SteamVR works best on Windows machines with graphics cards that are powerful enough to render immersive 3D worlds. To make your world VR compatible you need to plan for adding SteamVR functionality on the Windows machine running your Unity scene. The following tutorials walk through the basics of Steam, SteamVR, and adding the Player controller to a 3D scene to make it VR ready. Tutorial: Introduction to SteamVR Tutorial: How to Setup SteamVR Plugin in Unity Deliverable: Document your process in a blog post. Include video screenshots and/or screen captures to show how you constructed your world. Share a link to your post with user group @imd in Slack channel #cmstudio . Due: Sunday, Feb 28 Week 6: SteamVR / Work Session Mar 1 | Location: Zoom Meeting + In Person Week 6 Slides Assignment 6: Build an Immersive VR World Iterate on your existing world or design and build a new world in Unity that utilizes the SteamVR Player prefab, teleportation points and/or areas for locomotion, and basic interactivity to manipulate objects in yoru world. To truly test your world in a VR system you will need to spend time in the studio getting familiar with running Unity from one of the Windows 10 laptops connected to the HTC VIVE and SteamVR. If you\u2019re feeling adventurous this week, look to use scripting to create game mechanics in your world. Hint: look at roll-a-ball for some basic game mechanics to start with. Things like object collection, score keeping, displaying text on screen, and collisions are all really useful mechanics that can be used in your worlds. Steam VR (Windows Only) SteamVR works best on Windows machines with graphics cards that are powerful enough to render immersive 3D worlds. To make your world VR compatible you need to add SteamVR functionality on the Windows machine running your Unity scene. The following tutorials walk through the basics of Steam, SteamVR, and adding the Player controller to a 3D scene to make it work for VR. If you try to install and use SteamVR on Mac you will run into errors when trying to run in Unity. There isn't much of a work around at this time. Tutorial: Introduction to SteamVR Tutorial: How to Setup SteamVR Plugin in Unity Tutorial: SteamVR: How to add Teleportation to Scene Tutorial: SteamVR: How to add Object Interaction to Scene Tutorial: SteamVR: How to add Teleportation to a Terrain Tutorial: Unity: Adding a Quit Script Deliverable: Document your process in a blog post and upload your VR experience to the Studio File Server. Include video screenshots and/or screen captures to show how you constructed your world. Include a gameplay screen recording to document the experience. You can use OBS Studio for screen recording while running VR experiences on the Windows laptop. Tutorial: OBS Studio: How to Record VR Experiences Tutorial: Unity: How to Create a Build Tutorial: IMD: How to Upload Unity Projects to Studio File Server Note: If you run into issues uploading a large file (~2 GB), you can try reducing the size of your Unity folder by deleting everything EXCEPT the Assets and ProjectSettings folders before making your zip archive. Share a link to your post with user group @imd in Slack channel #cmstudio . Due: Sunday, Mar 14 Week 7: SteamVR / Work Session Mar 8 | Location: Zoom Meeting + In Person Week 8: Spark AR Mar 15 | Location: Zoom Meeting + In Person Week 8 Slides Assignment 7: Spark AR Project Due: Sunday, Mar 21 Week 9: Spark AR Mar 22 | Location: Zoom Meeting + In Person Final Project Proposal Due by Friday, March 26 Week 10: Final Projects Mar 29 | Location: Zoom Meeting + In Person Week 11: Final Projects Apr 5 | Location: Zoom Meeting + In Person Week 12: Final Projects Apr 12 | Location: Zoom Meeting + In Person Week 13: Final Projects Apr 19 | Location: Zoom Meeting + In Person Week 14: Final Project Presentations Apr 26 | Location: Zoom Meeting + In Person Last Day of Class Final Project Presentations Apr 28 - Final Project Documentation Due","title":"CM2 IMD Schedule"},{"location":"APRD-5007/#critical-making-2-immersive-media-design","text":"Critical Making 2: Immersive Media Design introduces designers to the tools and workflows used to build immersive virtual reality and augmented reality experiences. This studio-based course explores the intersection of virtual reality (VR) and augmented reality (AR) tools and workflows, interaction design, multimedia production, and product innovation as possible tools for solving industry-based challenges. Students will develop fundamental skills in 2D/3D asset creation, 3D game engines, simulation, animation, and rendering strategies used in the production of high-quality content for use in crafting immersive digital experiences. The course will utilize industry-standard tools such as Unity, Cinema 4D, Adobe Creative Cloud, and hardware platforms such as HTC VIVE for VR and ubiquitous mobile devices for AR. In addition, the course will cover concepts ranging from UI/UX design for immersive experiences, interaction design in VR, game mechanics, designing for human interaction, and scripting behaviors for digital objects and agents. Day and Time: Monday, 9:30 am - 12:00 pm CMCI Studio (1301 Walnut St) Location: We have adopted a hybrid (remote/in-person) class structure this semester due to COVID-19 . This means anyone can participate in person or virtually over Zoom anytime. The class schedule will indicate when class is to be held in person at the Studio or virtually over Zoom. The following Zoom link is to be used for all class sessions. The required password is provided in Slack. >> Zoom Meeting (Password Required) << Instructor: RJ Duran rj.duran@colorado.edu Slack: @rjduran. #cmstudio on cmcistudio.slack.com Office hours by appointment. Feel free to reach out to me via slack or email. Syllabus: This website is a real-time version of the course syllabus. It is updated weekly throughout the semester. A static version can be downloaded here . Slack: Channel #cmstudio and user group @imd will be used for all course communication and notifications. Be sure to use the appropriate user group when necessary.","title":"Critical Making 2: Immersive Media Design"},{"location":"APRD-5007/#course-themes","text":"Designing Media for VR and AR Building Mobile AR Experiences Building VR Experiences Digital Asset Creation Interactivity UX/UI of XR Scripting / Programming","title":"Course Themes"},{"location":"APRD-5007/#course-workload","text":"This is a 3 credit hour course. You should expect to dedicate at least 2-3 hours per credit hour. This translates into 6-9 hours per week outside of class. Consider 6 hours a minimum expectation for one studio course and plan accordingly with your other studio courses. Assignments for this course consist of weekly blog posts demonstrating project-based and process oriented research and explorations in making . Assignment parameters will be based on the topic of the week and in-class discussions. Refer to the Course Deliverables section for more information. The course is organized into weekly meetings consisting of instructor led project-driven topics organized as workshops and studio work sessions. It is expected that all students are active participants in each session.","title":"Course Workload"},{"location":"APRD-5007/#course-deliverables","text":"This is a project based course and largely driven by student research and interests. As such, each deliverable is expected to vary based on the project parameters and requirements. The following outlines the general criteria for course deliverables throughout the semester.","title":"Course Deliverables"},{"location":"APRD-5007/#technology","text":"In this course you are free to use any kind of computer and operating system you wish as along as it can run the software listed. The course will primarily be taught using the macOS based version of each tool we encounter with the exception of SteamVR, which is Windows based.","title":"Technology"},{"location":"APRD-5007/#week-1-overview-unity","text":"Jan 25 | Location: Zoom Meeting Week 1 Slides Star Wars: The Mandalorian Disney Gallery: The Mandalorian The Virtual Production of The Mandalorian, Season One The technology that\u2019s replacing the green screen Legend of Zelda: Breath of the Wild Game The Making of The Legend of Zelda: Breath of the Wild (Youtube Playlist) BotW Panoramas by Andy Teijelo P\u00e9rez Nintendo Labo VR Kit Big Bang AR Google \u2014 Childish Gambino AR How Do You Become a YouTuber Without Showing Your Face? Student Projects Welcome Home: VR Walkthrough Experience AR Service Dog Simulation Stuttering VR Exposure Therapy Creative Applications","title":"Week 1: Overview / Unity"},{"location":"APRD-5007/#assignment-1-3d-concepts-unity-essentials","text":"Part 1: Watch Videos on 3D Concepts Watch all the videos in the Youtube Playlist below to understand key 3D concepts you will encounter throughout this course. We will be touching on most of these topics at some point. Overview: Start 3D: An introduction to key 3D concepts Youtube Playlist: Adobe Start 3D: Learn Key 3D Concepts Part 2: Unity Essentials Before we meet next week, I would like you to work on the first mission, Foundations: Get started with Unity from Unity Essentials . To get started, signup for a Unity account (Unity ID) at learn.unity.com . You will encounter the LEGO Microgame while working through the lessons. Deliverable: There is no required blog post for this week but you can document your progress with one if you like. I will assume you have worked through these resources and have an understanding of the content. You can share a link to your Microgame submission for others to play with via Slack. We will start class next week by checking out your Microgame projects.","title":"Assignment 1: 3D Concepts &amp; Unity Essentials"},{"location":"APRD-5007/#week-2-unity-intro-to-scripting","text":"Feb 1 | Location: Zoom Meeting Week 2 Slides","title":"Week 2: Unity / Intro to Scripting"},{"location":"APRD-5007/#assignment-2-roll-a-ball","text":"Work through and complete the Roll-a-Ball project in Unity before we meet next week. Useful Resources Coding in C# in Unity for beginners Creating and Using Scripts Unity Scripting API Reference The C# Player's Guide (3rd Edition) by RB Whitaker Deliverable: There is no required blog post for this week but you can document your progress with one if you like. I will assume you have worked through this tutorial and have an understanding of the content. If you create a derivative work from the tutorial, I recommend documenting your work and sharing it with the group via Slack. We will start class next week by checking out any projects you make.","title":"Assignment 2: Roll-a-Ball"},{"location":"APRD-5007/#week-3-cinema-4d","text":"Feb 8 | Location: Zoom Meeting Week 3 Slides ENVD CLC World Machine Terrain Generator Goodbye Uncanny Valley Creating Usability with Motion: The UX in Motion Manifesto Compelling and Moving \u2013 A Guide to Motion Design Principles Frank Thomas & Ollie Johnston from Disney Disney Animation: Illusion Of Life by Frank Thomas & Ollie Johnston 10 Principles of Motion Design by Jorge R. Canedo Estrada of Ordinary Folk Apple Jobs Beeple HUDs+GUIs Grey Scale Gorilla Isometric Rooms (Dribble Board) Robbie Tilton Cinema 4D Student License Start here - Cinema4D for Students Create an account and follow instructions to obtain 6 month educational license via Kivuto. There is a small ($3) processing fee to pay. Once you place your order for a license, look for the PDF for further instructions via email. Note the Promo Code. You will use it when setting up your MAXON license. Activating the license will take place under your MAXON account, which you sign into when first launching C4D.","title":"Week 3: Cinema 4D"},{"location":"APRD-5007/#assignment-3-animate-a-logo","text":"","title":"Assignment 3: Animate a Logo"},{"location":"APRD-5007/#week-4-xr-asset-workflows","text":"Feb 15 | Location: Zoom Meeting Week 4 Slides","title":"Week 4: XR Asset Workflows"},{"location":"APRD-5007/#assignment-4-creating-assets-for-xr","text":"Using Cinema 4D, create an animated asset that can be used in Adobe Aero or Unity. Workflow: Animate asset, export FBX, Import FBX into Aero, Preview on Desktop and Mobile To create your asset in Cinema: Choose a vector (icons, logo, etc) to import and animate in Cinema 4D or import an existing 3d model you download from the internet and animate it or create something from primitives in Cinema. Once your animation is ready to export, review the following tutorials. Tutorial: Cinema 4D: Export FBX with Keyframe Based Animation Tutorial: Cinema 4D: Export FBX with Dynamics Based Animation To visualize the result using Adobe Aero: Download and install the Desktop App: Adobe Aero Desktop Beta Download the mobile app if you have a compatible iOS device. Android is coming sometime in the future. If you don't have a compatible device, don't worry, just share a link to your experience created in the desktop version. Make sure to read through the Adobe Aero User Manual: Key 3d modeling conepts to get familiar with what works best for Aero. Go back to your design if something doesn't seem to import correctly or you have too many polygons on an object. Remember you can use Autodesk FBX Review as a way to quickly preview FBX files. Setup a scene, add FBX files, and setup triggers and behaviors in Aero. Deliverable: Document your process in a blog post. Include video screen captures from your desktop and/or mobile device to show how you built your assets and visualized them. Share a link to your post with user group @imd in Slack channel #cmstudio . Due: Sunday, Feb 21","title":"Assignment 4: Creating Assets for XR"},{"location":"APRD-5007/#week-5-vr-steamvr","text":"Feb 22 | Location: Zoom Meeting + In Person Week 5 Slides","title":"Week 5: VR / SteamVR"},{"location":"APRD-5007/#assignment-5-build-a-world","text":"Based on your concept of a \"world\", construct one using existing assets from the Unity Asset Store and/or any assets you have created. What is in your world? What does it look like? What does it sound like? What does it feel like? What inhabits your world? How do you navigate the world? FPS Controller To navigate your world initially you can use the first person controller ( Characters/FirstPersonCharacter/Prefabs/FPSController ) from the Unity Standard Assets . Standard assets like these can be used to build functional prototypes to aid development of a game or experience and can be replaced with other assets in time. The first person controller simulates the functionality of the steam VR camera /controller rig and can be replaced when building for VR. Tutorial: How to Add a First Person Controller to Unity Scene Steam VR (Windows Only) SteamVR works best on Windows machines with graphics cards that are powerful enough to render immersive 3D worlds. To make your world VR compatible you need to plan for adding SteamVR functionality on the Windows machine running your Unity scene. The following tutorials walk through the basics of Steam, SteamVR, and adding the Player controller to a 3D scene to make it VR ready. Tutorial: Introduction to SteamVR Tutorial: How to Setup SteamVR Plugin in Unity Deliverable: Document your process in a blog post. Include video screenshots and/or screen captures to show how you constructed your world. Share a link to your post with user group @imd in Slack channel #cmstudio . Due: Sunday, Feb 28","title":"Assignment 5: Build a World"},{"location":"APRD-5007/#week-6-steamvr-work-session","text":"Mar 1 | Location: Zoom Meeting + In Person Week 6 Slides","title":"Week 6: SteamVR / Work Session"},{"location":"APRD-5007/#assignment-6-build-an-immersive-vr-world","text":"Iterate on your existing world or design and build a new world in Unity that utilizes the SteamVR Player prefab, teleportation points and/or areas for locomotion, and basic interactivity to manipulate objects in yoru world. To truly test your world in a VR system you will need to spend time in the studio getting familiar with running Unity from one of the Windows 10 laptops connected to the HTC VIVE and SteamVR. If you\u2019re feeling adventurous this week, look to use scripting to create game mechanics in your world. Hint: look at roll-a-ball for some basic game mechanics to start with. Things like object collection, score keeping, displaying text on screen, and collisions are all really useful mechanics that can be used in your worlds. Steam VR (Windows Only) SteamVR works best on Windows machines with graphics cards that are powerful enough to render immersive 3D worlds. To make your world VR compatible you need to add SteamVR functionality on the Windows machine running your Unity scene. The following tutorials walk through the basics of Steam, SteamVR, and adding the Player controller to a 3D scene to make it work for VR. If you try to install and use SteamVR on Mac you will run into errors when trying to run in Unity. There isn't much of a work around at this time. Tutorial: Introduction to SteamVR Tutorial: How to Setup SteamVR Plugin in Unity Tutorial: SteamVR: How to add Teleportation to Scene Tutorial: SteamVR: How to add Object Interaction to Scene Tutorial: SteamVR: How to add Teleportation to a Terrain Tutorial: Unity: Adding a Quit Script Deliverable: Document your process in a blog post and upload your VR experience to the Studio File Server. Include video screenshots and/or screen captures to show how you constructed your world. Include a gameplay screen recording to document the experience. You can use OBS Studio for screen recording while running VR experiences on the Windows laptop. Tutorial: OBS Studio: How to Record VR Experiences Tutorial: Unity: How to Create a Build Tutorial: IMD: How to Upload Unity Projects to Studio File Server Note: If you run into issues uploading a large file (~2 GB), you can try reducing the size of your Unity folder by deleting everything EXCEPT the Assets and ProjectSettings folders before making your zip archive. Share a link to your post with user group @imd in Slack channel #cmstudio . Due: Sunday, Mar 14","title":"Assignment 6: Build an Immersive VR World"},{"location":"APRD-5007/#week-7-steamvr-work-session","text":"Mar 8 | Location: Zoom Meeting + In Person","title":"Week 7: SteamVR / Work Session"},{"location":"APRD-5007/#week-8-spark-ar","text":"Mar 15 | Location: Zoom Meeting + In Person Week 8 Slides","title":"Week 8: Spark AR"},{"location":"APRD-5007/#assignment-7-spark-ar-project","text":"Due: Sunday, Mar 21","title":"Assignment 7: Spark AR Project"},{"location":"APRD-5007/#week-9-spark-ar","text":"Mar 22 | Location: Zoom Meeting + In Person Final Project Proposal Due by Friday, March 26","title":"Week 9: Spark AR"},{"location":"APRD-5007/#week-10-final-projects","text":"Mar 29 | Location: Zoom Meeting + In Person","title":"Week 10: Final Projects"},{"location":"APRD-5007/#week-11-final-projects","text":"Apr 5 | Location: Zoom Meeting + In Person","title":"Week 11: Final Projects"},{"location":"APRD-5007/#week-12-final-projects","text":"Apr 12 | Location: Zoom Meeting + In Person","title":"Week 12: Final Projects"},{"location":"APRD-5007/#week-13-final-projects","text":"Apr 19 | Location: Zoom Meeting + In Person","title":"Week 13: Final Projects"},{"location":"APRD-5007/#week-14-final-project-presentations","text":"Apr 26 | Location: Zoom Meeting + In Person Last Day of Class Final Project Presentations Apr 28 - Final Project Documentation Due","title":"Week 14: Final Project Presentations"},{"location":"APRD-5017/","text":"Critical Making 3: Parametric Product Design Critical Making 3: Parametric Product Design explores algorithmic modeling strategies and digital fabrication for product development. This studio-based course explores the product development process through algorithmic modeling strategies, computational design, and digital fabrication. Students will develop basic skills with McNeel Rhinoceros and Grasshopper--a visual programming environment for algorithmic modeling, to design parametric systems and how to translate digital objects into physical form through digital manufacturing. Students will be introduced to the emerging field of parametric product design by developing projects that explore a multitude of form-finding strategies in surface patterning and complex geometric modeling of everyday objects spanning a variety of scales and applications. Familiar examples of product categories ripe for design experimentation include common objects such as pens and speakers, household items such as furniture and lighting, and personal items such as clothing, razors, and jewelry. In addition, students will develop an understanding of how to evaluate and optimize their designs based on product constraints, use cases, materiality, form, and function of physical objects produced through iterative cycles of production. Day and Time: Monday, 1:30 pm - 4:00 pm CMCI Studio (1301 Walnut St) Location: We have adopted a hybrid (remote/in-person) class structure this semester due to COVID-19 . This means anyone can participate in person or virtually over Zoom anytime. The class schedule will indicate when class is to be held in person at the Studio or virtually over Zoom. The following Zoom link is to be used for all class sessions. The required password is provided in Slack. >> Zoom Meeting (Password Required) << Instructor: RJ Duran rj.duran@colorado.edu Slack: @rjduran. #cmstudio on cmcistudio.slack.com Office hours by appointment. Feel free to reach out to me via slack or email. Syllabus: This website is a real-time version of the course syllabus. It is updated weekly throughout the semester. A static version can be downloaded here . Slack: Channel #cmstudio and user group @ppd will be used for all course communication and notifications. Be sure to use the appropriate user group when necessary. Course Themes Parametric Modeling Tools - ie. Rhino & Grasshopper Digital Fabrication - Laser Cutting, 3D Printing, CNC Milling Product Design Computational Design Mass Customization Mathematics & Geometry Scripting / Programming in C#, Python Course Workload This is a 3 credit hour course. You should expect to dedicate at least 2-3 hours per credit hour. This translates into 6-9 hours per week outside of class. Consider 6 hours a minimum expectation for one studio course and plan accordingly with your other studio courses. Assignments for this course consist of weekly blog posts demonstrating project-based and process oriented research and explorations in making . Assignment parameters will be based on the topic of the week and in-class discussions. Refer to the Course Deliverables section for more information. The course is organized into weekly meetings consisting of instructor led project-driven topics organized as workshops and studio work sessions. It is expected that all students are active participants in each session. Course Deliverables This is a project based course and largely driven by student research and interests. As such, each deliverable is expected to vary based on the project parameters and requirements. The following outlines the general criteria for course deliverables throughout the semester. Assignments Assignments are given weekly and need to be submitted as a blog post published to your Critical Making blog. A minimum of 1 blog post per week is the expectation. Medium is widely used in other studio classes but any blogging platform may be used. Posts are to be submitted via slack #cmstudio by the specified due date each week. It is recommended that a post includes a variety of media and content to support the subject matter. For example: text, images, video, graphics, photos, mockups, screen captures, tutorials, 3d model viewers (sketchfab), sketches, code, gifs, references, etc. Anything that is required to effectively communicate the details of a project, process, prototype, or idea. The subject matter is in response to the topics of the week. Ideally, it falls in line with your interests, research area, project, creative process, etc. For example, you might consider doing a series of tutorials on a topic that interests you or a process/workflow you are currently exploring through the course. Posts should be written to the best of your abilities and for a public audience. The post and any accompanying visual content (images, video) may be shared on social media. Final Project Final Project Proposal (Submitted as a blog post) Final Project Presentation (Delivered live or as pre-recorded presentation) Final Project Documentation (Submitted as a blog post) Technology In this course you are free to use any kind of computer and operating system you wish as along as it can run the software listed. The course will primarily be taught using the macOS based version of each tool we encounter such as Rhino and Grasshopper, Blender, and Fusion 360. Currently, most tools are cross-platform but may have exceptions or limitations per operating system. For instance, Rhino and Grasshopper for Windows is still an industry standard tool and many traditional plugins only work on Windows. McNeel introduced the Package Manager with Rhino 7 to begin resolving these differences. In general, I don't anticipate needing many specialized plugins that are not yet macOS compatible but there are always exceptions. Hardware A recent Apple Macbook (2013 and newer) with macOS Catalina (10.15) or a Windows 10 based system. At least 30 - 50 GB extra hard drive space to install software and work. At least 1 TB external / portable hard drive or USB drives to move files around and between computers as needed. (Optional) I recommend a second monitor for Rhino and Grasshopper viewports. It will reduce the amount of switching you do between lessons and Rhino. Software In this class we will encounter a variety of tools used for 3d modeling, design file management, and creating toolpaths to drive CNC machines for digital fabrication. We will use Rhino & Grasshopper and Fusion 360 to explore parametric concepts but may end up using other types of design and engineering software as we progress. Some tools are essential and required to complete a task while other tools are based on personal preference and workflow. Access to the following software is recommended. Required Software McNeel Rhino 7 - Educational licenses available at CU Bookstore for $95. Autodesk Fusion 360 - Useful for both CAD and CAM workflows. Ultimaker Cura - Ultimaker slicer Formlabs Preform - Formlabs slicer Bantam Tools - Controller for Bantam Tools Desktop CNC Machine Additional Software Blender - An open-source 3d modeling tool that is widely used across many industries. Markforged - eiger.io is the cloud based slicer/controller for Markforged machines. Visual Studio Code Unity 2019.4 ( Installed with Unity Hub ) Adobe Dimension Substance Suite Meshlab Meshmixer Night Owl - Utility to manage light/dark mode on macOS. Design Resources Rhino McNeel Forums - The best place to get help with Rhino and Grasshopper. Rhino for Mac Wiki - A list of topics to understand differences between the Mac and Windows versions. Rhino 6 for Mac Users Guide Learning Rhino 6 for Mac (via LinkedIn Learning) Rhino 6 for Windows commands not in Rhino 6 for Mac Grasshopper Grasshopper Components Reference The Grasshopper Primer - It's a little dated and doesn't cover Rhino / Grasshopper for Mac. The concepts all still apply though. AAD Algorithms-Aided Design: Parametric Strategies using Grasshopper by Arturo Tedeschi - A good book from 2014 that covers how to use algorithms for designing parametric systems. Visual Programming in Rhino3D with Grasshopper by Luis E. Fraguada - This is a great intro and overview of Grasshopper. About 1/2 of the content is similar to what you get from the Grasshopper Primer. Essential Algorithms and Data Structures - A brand new free book from McNeel that introduces Computational Design in Grasshopper. Parametric House - A website with many tutorials covering a variety of topics in parametric design. Most of these tutorials are technique or case study oriented and typically work with a set of built in or library based components. Nature of Code for Python in Grasshopper - A list of tutorials showing implementations of Nature of Code algorithms in Grasshopper with Python. Computational Design with Grasshopper for Rhino3D - Highly Recommended. Up to date with Rhino 6/7. Free with code EDUCATION_IS_PRICELESS_GH . Parametric Camp - An outstanding resource by Jose Luis Garc\u00eda del Castillo (Harvard GSD). Similar to Dan Shiffman's Coding Train, but for Computational Design and Grasshopper. GSD-6338: Introduction to Computational Design (Fall 2019) - Lecture videos by Jose Luis Garc\u00eda del Castillo y L\u00f3pez (Harvard GSD). Explode Breps @ UVA - A collection of definitions spanning various techniques used in architectural design. TU Delft Grasshopper Resource - Tutorial based and easy to follow. Introduction to Grasshopper and History - Brief overview of the history of Grasshopper. Additional References These resources have to do with a range of topics -- parametric design, generative design, architecture, computation, programming, and fabrication. Elements of Parametric Design by Robert Woodbury - A foundational book covering the parametric design field and applications. Tessellations: Mathematics, Art, and Recreation by Robert Fathauer - An introductory book on Tesselations (tiling) for non-specalists. The Logic of Architecture: Design, Computation, and Cognition by William J. Mitchell Nature of Code by Dan Shiffman Generative Design by Hartmut Bohnacker, Benedikt Gro\u00df, Julia Laub, Claudius Lazzeroni Form+Code in Design, Art, and Architecture / Website - A compendium of computational concepts expressed through design and art. Highly recommend. Processing: A Programming Handbook for Visual Designers by Casey Reas and Ben Fry Advanced 3D Printing with Grasshopper: Clay and FDM by D. Diego Garcia Cuevas & D. Gianluca Pugliese Design for CNC: Furniture Projects and Fabrication Technique - A great introduction to design for CNC fabrication. Siteless: 1001 Building Forms by Fran\u00e7ois Blanciak Fabrication Resources Our Studios CMCI Studio facilities include the large main room (West Studio) and adjacent smaller room (North Studio). Both rooms contain different functionalities for developing projects at varying scales and for varying audiences. Read through the Studio Handbook for learning about each room and accessing the various tools and capabilities we have on site. Idea Forge The Idea Forge is an on-campus design and fabrication facility open to all students located in the Fleming Building (near the Wolf Law Building at Broadway & Baseline Rd). In this course we will be using Idea Forge to outsource fabrication via request system. >> 3D Printing & Laser Cutting Fabrication Requests << Creative Labs Center CMCI Students are welcome to utilize the ENVD CLC fabrication services. ENVD CLC There is a fee associated with non-ENVD student use of the labs (pdf provided in class). COVID-19 related protocols for the CLC this spring. It should be noted that ENVD student projects will take precedence over fabrication request from others however this should not entail significant delays most weeks. It is important that students review the YouTube videos for the lab they are requesting fabrication from. After that they should engage with CLC staff through the ENVD-CLC-DMC Team channels. Staff are happy to help students with the details of proper file submission and early engagement is key to a successful outcome. File templates and reference material can be found on the Files tab of the Team channel for each lab. Week 1: Overview / Rhino Jan 25 | Location: Zoom Meeting Week 1 Slides Make Break - Papercraft Instagram Hashtags to Follow #grasshopper3d #computationaldesign #parametricdesign #digitalfabrication Assignment 1: The Parametric Design Landscape / Rhino Basics Part 1: Product Research I would like you to spend some time this week exploring the field of parametric design. As a suggestion, think about how parametric design and computational design techniques can be applied across different scales and for different uses. Think about products that vary in scale, complexity, form, and function. Begin to identify products that already make use of or could make use of parametric design and write a brief summary of your findings. Include images and references. Identify 3 product categories ripe for parametric design experimentation. What kinds of products can you imagine benefiting from parametric design? Identify 3 creatives (designers, architects, etc) that are making interesting forms, objects, products, installations, or artifacts. What is being made? What is interesting to you about their work? What do you think their workflow is? What tools are they using? Part 2: Rhino Basics Before we meet next week, download and install Rhino and work through the following tutorials. The trial license is 90 days, after which you can purchase a license from the CU bookstore for $95. Learning Rhino for Mac Since most of you are a Mac, you will want to access the following lessons via LinkedIn Learning. Learn more at OIT . Look up the course Learning Rhino 6 for Mac on LinkedIn Learning. Work through the following chapters Getting Acquainted with Rhino for Mac Differences between Rhino 6 for Mac and Rhino for Windows Work through Chapter 3-6 to further your understanding. Chapter 3-5 are similar to the Rhino3D Introduction tutorial, but for Mac. Rhino 3D Introduction This will be most useful for those on Windows and when you encounter a Windows based tutorial. It's a good idea to be familiar with both interfaces - Mac and Windows. Create an account on rhino3d.education to access free course content. Enroll in Rhino 6 Introduction Proceed to work through Sections 1-4. These cover the Rhino interface and working with curves, surfaces, and solids. Deliverable: Only Part 1 is due as a blog post this week. Part 2 is for you to work through to get familiar with Rhino. Share a link to your post with user group @ppd in Slack channel #cmstudio . Due: Friday, Jan 29 Week 2: Rhino / Generators / Intro to Grasshopper Feb 1 | Location: Zoom Meeting Week 2 Slides Assignment 2: Build a Generator Part 1: Readings Parameterize (pdf) chapter from Form+Code in Design, Art, and Architecture . On Generative Algorithms by Anders Hoff (inconvergent.net) - A great introduction to how generative algorithms can be used to create visual works of art. So you want to build a generator... by Kate Compton AI, Architecture, and Generative Design: Algorithmic Brainstorming for Creative Work by Jonathan Follett Part 2: Build a Generator Based on your understanding of \"generators\", build one using Rhino, Grasshopper, Fusion 360, Processing, p5.js, or any other tool of choice that enables you to work parametrically. I suggest Rhino and Grasshopper since that's what we are mostly talking about in class. Start by mapping out what your generator will do and what the expected results might look like. You can start from a reference image or sketch too. Identify the constraints (parameters that are fixed) and your inputs (parameters that can change) and proceed to design a system that can produce variation by changing the inputs. Deliverable: Document your process for Part 2 in a blog post. Produce a matrix (or set) of outputs and document the results. Write a blog post that includes visuals and details about your generator and how it works. What's the purpose of your generator? What's your criteria or constraints? What kinds of inputs does your generator have? What kind of output do you get? Share a link to your post with user group @ppd in Slack channel #cmstudio . Due: Friday, Feb 5 Week 3: Grasshopper Feb 8 | Location: Zoom Meeting Week 3 Slides Assignment 3: Parametric Vessel Part 1: Readings / Tutorials Read Chapter 1: Foundations from The Grasshopper Primer . This is a great reference while going through the next learning resource. Work through Chapters 1-5 from Computational Design with Grasshopper for Rhino3D . Ch 1-2 are about setting up the tools and will be review but the learning system requires that you watch through them to unlock later chapters. Ch 3 - The Gh Interface Ch 4 - Intro to Params Ch 5 - Lists Part 2: Vessel Create a parametric vessel generator in Grasshopper based on the concepts demonstrated in class and in recorded lesson - Grasshopper Tutorial: Vase Builder . Deliverable: Document your process for Part 2 in a blog post. Produce 3 variations of your vessel design using your definition. Write a blog post that includes visuals and details about your different vessels, why you chose to make what you did, and how your system works. I suggest exploring some of the rendering modes built into Rhino such as \"Shaded\" or \"Rendered\" to produce better looking screenshots. You can make use of the ScreenCaptureToFile Rhino command to save images directly out of the active Rhino viewport. Alternatively, you can go outside of Rhino to render with tools such as Keyshot or Adobe Dimension to place your models into a scene for scale and give them some materials and lighting for realism. Share a link to your post with user group @ppd in Slack channel #cmstudio . Due: Friday, Feb 12 Week 4: Pattern Algorithms Feb 15 | Location: Zoom Meeting Week 4 Slides Assignment 4: 2D Patterns Build a 2D pattern generator. Here are a few great tutorials to choose from if you like. While working through one or more of them, look for opportunities to deviate from the example as it. Remix it in your own way. Grasshopper Cairo Tesselation Parametric Patterns Parametric Stars Voronoi Curve Attractor Truchet Tiles Geometric Pattern 2 Blender Truchet Tiles in Blender Deliverable: Document your process and results with video and/or screenshots in a blog post. Try out ScreenCaptureToFile and adusting the Rhino grid settings or background colors to get different visual results. You can also save out an Illustrator file and make a document showing different variations of your pattern generator. Start to think about uses for the patterns you create. Share a link to your post with user group @ppd in Slack channel #cmstudio . Due: Sunday, Feb 21 Week 5: DigiFab Studio: Laser Cutting Feb 22 | Location: Zoom Meeting + In Person Week 5 Slides Digital Fabrication Methods Examples and tutorials covering digital fabrication methods that enable the production of 3D objects from 2D sheet material using a laser cutter. Unrolling Youtube: Unroll Surface in Rhino 4: Tricks for managing compound curves Youtube: Rhino 3D CAD Technique #12: Difference between Unroll, Smash and Create UV Curve commands Origami Simulator Pepakura Contouring Strata Bench by ADintheStudio Slicer Tool (Fusion 360 Plugin) Triangulation (Faceted) Youtube: Grasshopper 003 triangular Surface \"I See What You Mean\" aka Denver \"Blue Bear\" by Lawrence Argent Waffle Youtube: grasshopper tutorial # waffle structure ribs part 1 Youtube: grasshopper tutorial # waffle structure (ribs) laser cut file part 2 Sectioning design systems by HASSAN RAGAB Youtube: Waffle structure - Grasshopper Tutorial Youtube: Grasshopper 006 waffle structure beams concept & fabrication - Put this on MUTE! Assignment 5: Laser Cut Pattern Design a 2d pattern to be laser cut and produce a physical prototype using it. Outsource your job to the Idea Forge Rapid Prototyping Lab through their request system. What might this look like? You could produce a 3D model from sheet material using one of the 2D to 3D methods discussed in class. ie. Contours, waffle, unrolling You could produce a template to use in a workflow. ie. Make a stencil to transfer a pattern to an object. For example, Turn Studio . You could produce an object using a 2D pattern. ie. Laser cut sheet of paper folded into cylinder as light shade or a light screen cut out of wood or cardboard. Your own idea! Materials Acrylic: Plasticare (Denver), CO Plastics (Louisville), Home Depot Cardboard: Home Depot, Office Max, Denver Boxes, Recycle Bin / Dumpster Paper: HR Meininger Art Supply (Denver), Art Supply Stores, Hobby Lobby Plywood: Austin Hardwoods, Home Depot Deliverable: Document your process with images showing the design and physical objects produced in a blog post. If you have a physical model done, please bring to class. Share a link to your post with user group @ppd in Slack channel #cmstudio . Due: Sunday, Feb 28 Week 6: DigiFab Studio: CNC Milling 1 Mar 1 | Location: Zoom Meeting + In Person Week 6 Slides Assignment 6: PCB Pattern Design a 2D Pattern for CNC Milling and Mill it on the Bantam PCB Milling machine. Required Readings: Basic Safety Overview Operating the PCB Milling Machine Working with SVG Files Speeds and Feeds Tutorials: Bantam Tools: Basic 2D Workflow Deliverable: Document your process with images and video showing the design and physical objects produced in a blog post. If you have a physical model done, please bring to class. Share a link to your post with user group @ppd in Slack channel #cmstudio . Due: Sunday, Mar 14 Week 7: DigiFab Studio: CNC Milling 2 Mar 8 | Location: Zoom Meeting + In Person Week 8: DigiFab Studio: CNC Routing Mar 15 | Location: Zoom Meeting + In Person Week 8 Slides Assignment 8: CNC Routing Project Due: Sunday, Mar 21 Week 9: DigiFab Studio: 3D Printing Mar 22 | Location: Zoom Meeting + In Person Week 9 Slides Final Project Proposal Due by Friday, March 26 Week 10: Final Projects Mar 29 | Location: Zoom Meeting + In Person Week 11: Final Projects Apr 5 | Location: Zoom Meeting + In Person Week 12: Final Projects Apr 12 | Location: Zoom Meeting + In Person Week 13: Final Projects Apr 19 | Location: Zoom Meeting + In Person Week 14: Final Project Presentations Apr 26 | Location: Zoom Meeting + In Person Last Day of Class Final Project Presentations Apr 28 - Final Project Documentation Due","title":"CM3 PPD Schedule"},{"location":"APRD-5017/#critical-making-3-parametric-product-design","text":"Critical Making 3: Parametric Product Design explores algorithmic modeling strategies and digital fabrication for product development. This studio-based course explores the product development process through algorithmic modeling strategies, computational design, and digital fabrication. Students will develop basic skills with McNeel Rhinoceros and Grasshopper--a visual programming environment for algorithmic modeling, to design parametric systems and how to translate digital objects into physical form through digital manufacturing. Students will be introduced to the emerging field of parametric product design by developing projects that explore a multitude of form-finding strategies in surface patterning and complex geometric modeling of everyday objects spanning a variety of scales and applications. Familiar examples of product categories ripe for design experimentation include common objects such as pens and speakers, household items such as furniture and lighting, and personal items such as clothing, razors, and jewelry. In addition, students will develop an understanding of how to evaluate and optimize their designs based on product constraints, use cases, materiality, form, and function of physical objects produced through iterative cycles of production. Day and Time: Monday, 1:30 pm - 4:00 pm CMCI Studio (1301 Walnut St) Location: We have adopted a hybrid (remote/in-person) class structure this semester due to COVID-19 . This means anyone can participate in person or virtually over Zoom anytime. The class schedule will indicate when class is to be held in person at the Studio or virtually over Zoom. The following Zoom link is to be used for all class sessions. The required password is provided in Slack. >> Zoom Meeting (Password Required) << Instructor: RJ Duran rj.duran@colorado.edu Slack: @rjduran. #cmstudio on cmcistudio.slack.com Office hours by appointment. Feel free to reach out to me via slack or email. Syllabus: This website is a real-time version of the course syllabus. It is updated weekly throughout the semester. A static version can be downloaded here . Slack: Channel #cmstudio and user group @ppd will be used for all course communication and notifications. Be sure to use the appropriate user group when necessary.","title":"Critical Making 3: Parametric Product Design"},{"location":"APRD-5017/#course-themes","text":"Parametric Modeling Tools - ie. Rhino & Grasshopper Digital Fabrication - Laser Cutting, 3D Printing, CNC Milling Product Design Computational Design Mass Customization Mathematics & Geometry Scripting / Programming in C#, Python","title":"Course Themes"},{"location":"APRD-5017/#course-workload","text":"This is a 3 credit hour course. You should expect to dedicate at least 2-3 hours per credit hour. This translates into 6-9 hours per week outside of class. Consider 6 hours a minimum expectation for one studio course and plan accordingly with your other studio courses. Assignments for this course consist of weekly blog posts demonstrating project-based and process oriented research and explorations in making . Assignment parameters will be based on the topic of the week and in-class discussions. Refer to the Course Deliverables section for more information. The course is organized into weekly meetings consisting of instructor led project-driven topics organized as workshops and studio work sessions. It is expected that all students are active participants in each session.","title":"Course Workload"},{"location":"APRD-5017/#course-deliverables","text":"This is a project based course and largely driven by student research and interests. As such, each deliverable is expected to vary based on the project parameters and requirements. The following outlines the general criteria for course deliverables throughout the semester.","title":"Course Deliverables"},{"location":"APRD-5017/#technology","text":"In this course you are free to use any kind of computer and operating system you wish as along as it can run the software listed. The course will primarily be taught using the macOS based version of each tool we encounter such as Rhino and Grasshopper, Blender, and Fusion 360. Currently, most tools are cross-platform but may have exceptions or limitations per operating system. For instance, Rhino and Grasshopper for Windows is still an industry standard tool and many traditional plugins only work on Windows. McNeel introduced the Package Manager with Rhino 7 to begin resolving these differences. In general, I don't anticipate needing many specialized plugins that are not yet macOS compatible but there are always exceptions.","title":"Technology"},{"location":"APRD-5017/#design-resources","text":"","title":"Design Resources"},{"location":"APRD-5017/#fabrication-resources","text":"","title":"Fabrication Resources"},{"location":"APRD-5017/#week-1-overview-rhino","text":"Jan 25 | Location: Zoom Meeting Week 1 Slides Make Break - Papercraft Instagram Hashtags to Follow #grasshopper3d #computationaldesign #parametricdesign #digitalfabrication","title":"Week 1: Overview / Rhino"},{"location":"APRD-5017/#assignment-1-the-parametric-design-landscape-rhino-basics","text":"","title":"Assignment 1: The Parametric Design Landscape / Rhino Basics"},{"location":"APRD-5017/#week-2-rhino-generators-intro-to-grasshopper","text":"Feb 1 | Location: Zoom Meeting Week 2 Slides","title":"Week 2: Rhino / Generators / Intro to Grasshopper"},{"location":"APRD-5017/#assignment-2-build-a-generator","text":"","title":"Assignment 2: Build a Generator"},{"location":"APRD-5017/#week-3-grasshopper","text":"Feb 8 | Location: Zoom Meeting Week 3 Slides","title":"Week 3: Grasshopper"},{"location":"APRD-5017/#assignment-3-parametric-vessel","text":"","title":"Assignment 3: Parametric Vessel"},{"location":"APRD-5017/#week-4-pattern-algorithms","text":"Feb 15 | Location: Zoom Meeting Week 4 Slides","title":"Week 4: Pattern Algorithms"},{"location":"APRD-5017/#assignment-4-2d-patterns","text":"Build a 2D pattern generator. Here are a few great tutorials to choose from if you like. While working through one or more of them, look for opportunities to deviate from the example as it. Remix it in your own way. Grasshopper Cairo Tesselation Parametric Patterns Parametric Stars Voronoi Curve Attractor Truchet Tiles Geometric Pattern 2 Blender Truchet Tiles in Blender Deliverable: Document your process and results with video and/or screenshots in a blog post. Try out ScreenCaptureToFile and adusting the Rhino grid settings or background colors to get different visual results. You can also save out an Illustrator file and make a document showing different variations of your pattern generator. Start to think about uses for the patterns you create. Share a link to your post with user group @ppd in Slack channel #cmstudio . Due: Sunday, Feb 21","title":"Assignment 4: 2D Patterns"},{"location":"APRD-5017/#week-5-digifab-studio-laser-cutting","text":"Feb 22 | Location: Zoom Meeting + In Person Week 5 Slides Digital Fabrication Methods Examples and tutorials covering digital fabrication methods that enable the production of 3D objects from 2D sheet material using a laser cutter. Unrolling Youtube: Unroll Surface in Rhino 4: Tricks for managing compound curves Youtube: Rhino 3D CAD Technique #12: Difference between Unroll, Smash and Create UV Curve commands Origami Simulator Pepakura Contouring Strata Bench by ADintheStudio Slicer Tool (Fusion 360 Plugin) Triangulation (Faceted) Youtube: Grasshopper 003 triangular Surface \"I See What You Mean\" aka Denver \"Blue Bear\" by Lawrence Argent Waffle Youtube: grasshopper tutorial # waffle structure ribs part 1 Youtube: grasshopper tutorial # waffle structure (ribs) laser cut file part 2 Sectioning design systems by HASSAN RAGAB Youtube: Waffle structure - Grasshopper Tutorial Youtube: Grasshopper 006 waffle structure beams concept & fabrication - Put this on MUTE!","title":"Week 5: DigiFab Studio: Laser Cutting"},{"location":"APRD-5017/#assignment-5-laser-cut-pattern","text":"Design a 2d pattern to be laser cut and produce a physical prototype using it. Outsource your job to the Idea Forge Rapid Prototyping Lab through their request system. What might this look like? You could produce a 3D model from sheet material using one of the 2D to 3D methods discussed in class. ie. Contours, waffle, unrolling You could produce a template to use in a workflow. ie. Make a stencil to transfer a pattern to an object. For example, Turn Studio . You could produce an object using a 2D pattern. ie. Laser cut sheet of paper folded into cylinder as light shade or a light screen cut out of wood or cardboard. Your own idea! Materials Acrylic: Plasticare (Denver), CO Plastics (Louisville), Home Depot Cardboard: Home Depot, Office Max, Denver Boxes, Recycle Bin / Dumpster Paper: HR Meininger Art Supply (Denver), Art Supply Stores, Hobby Lobby Plywood: Austin Hardwoods, Home Depot Deliverable: Document your process with images showing the design and physical objects produced in a blog post. If you have a physical model done, please bring to class. Share a link to your post with user group @ppd in Slack channel #cmstudio . Due: Sunday, Feb 28","title":"Assignment 5: Laser Cut Pattern"},{"location":"APRD-5017/#week-6-digifab-studio-cnc-milling-1","text":"Mar 1 | Location: Zoom Meeting + In Person Week 6 Slides","title":"Week 6: DigiFab Studio: CNC Milling 1"},{"location":"APRD-5017/#assignment-6-pcb-pattern","text":"Design a 2D Pattern for CNC Milling and Mill it on the Bantam PCB Milling machine. Required Readings: Basic Safety Overview Operating the PCB Milling Machine Working with SVG Files Speeds and Feeds Tutorials: Bantam Tools: Basic 2D Workflow Deliverable: Document your process with images and video showing the design and physical objects produced in a blog post. If you have a physical model done, please bring to class. Share a link to your post with user group @ppd in Slack channel #cmstudio . Due: Sunday, Mar 14","title":"Assignment 6: PCB Pattern"},{"location":"APRD-5017/#week-7-digifab-studio-cnc-milling-2","text":"Mar 8 | Location: Zoom Meeting + In Person","title":"Week 7: DigiFab Studio: CNC Milling 2"},{"location":"APRD-5017/#week-8-digifab-studio-cnc-routing","text":"Mar 15 | Location: Zoom Meeting + In Person Week 8 Slides","title":"Week 8: DigiFab Studio: CNC Routing"},{"location":"APRD-5017/#assignment-8-cnc-routing-project","text":"Due: Sunday, Mar 21","title":"Assignment 8: CNC Routing Project"},{"location":"APRD-5017/#week-9-digifab-studio-3d-printing","text":"Mar 22 | Location: Zoom Meeting + In Person Week 9 Slides Final Project Proposal Due by Friday, March 26","title":"Week 9: DigiFab Studio: 3D Printing"},{"location":"APRD-5017/#week-10-final-projects","text":"Mar 29 | Location: Zoom Meeting + In Person","title":"Week 10: Final Projects"},{"location":"APRD-5017/#week-11-final-projects","text":"Apr 5 | Location: Zoom Meeting + In Person","title":"Week 11: Final Projects"},{"location":"APRD-5017/#week-12-final-projects","text":"Apr 12 | Location: Zoom Meeting + In Person","title":"Week 12: Final Projects"},{"location":"APRD-5017/#week-13-final-projects","text":"Apr 19 | Location: Zoom Meeting + In Person","title":"Week 13: Final Projects"},{"location":"APRD-5017/#week-14-final-project-presentations","text":"Apr 26 | Location: Zoom Meeting + In Person Last Day of Class Final Project Presentations Apr 28 - Final Project Documentation Due","title":"Week 14: Final Project Presentations"},{"location":"APRD-5019/","text":"Critical Making 4: Hardware UX Hardware UX: Designing Connected, Responsive, and Interactive Products Summer Session D June 1 \u2013 August 6, 2021 APRD 5019 (Critical Making 4) Mondays 9:30am - 12pm Hardware UX is a studio-based course that explores the design, development of connected and responsive hardware and software-based systems supporting human-computer interaction, multi-modal and interactive experiences, and expressive devices. With an interest in developing products incorporating hardware and software that blend digital and physical, students will work with low-cost and powerful micro-controllers such as Arduino and Raspberry Pi in combination with input/output devices such as sensors and actuators to realize new modes of interaction and connectivity between humans and computing systems. In addition, students will become experienced with the tools of electronics prototyping and production such as PCB design, milling, and assembly. The course will culminate with the development of a hardware-based product experience. Context https://www.instagram.com/hardwareux/ https://www.creativeapplications.net/","title":"Critical Making 4: Hardware UX"},{"location":"APRD-5019/#critical-making-4-hardware-ux","text":"Hardware UX: Designing Connected, Responsive, and Interactive Products Summer Session D June 1 \u2013 August 6, 2021 APRD 5019 (Critical Making 4) Mondays 9:30am - 12pm Hardware UX is a studio-based course that explores the design, development of connected and responsive hardware and software-based systems supporting human-computer interaction, multi-modal and interactive experiences, and expressive devices. With an interest in developing products incorporating hardware and software that blend digital and physical, students will work with low-cost and powerful micro-controllers such as Arduino and Raspberry Pi in combination with input/output devices such as sensors and actuators to realize new modes of interaction and connectivity between humans and computing systems. In addition, students will become experienced with the tools of electronics prototyping and production such as PCB design, milling, and assembly. The course will culminate with the development of a hardware-based product experience. Context https://www.instagram.com/hardwareux/ https://www.creativeapplications.net/","title":"Critical Making 4: Hardware UX"},{"location":"books/","text":"Local Libraries CU Boulder Library Catalog (Chinook) Boulder Public Library Technical Publishers Awesome Book Authoring Packt Publishing , Free Tech Ebook of the Day O'Reilly Safari Apress The Pragmatic Bookshelf Critical Making The Art of Critical Making: Rhode Island School of Design on Creative Practice Code, Electronics, Computers Code: The Hidden Language of Computer Hardware and Software Encyclopedia of Electronic Components Volume 1: Resistors, Capacitors, Inductors, Switches, Encoders, Relays, Transistors Encyclopedia of Electronic Components Volume 2: LEDs, LCDs, Audio, Thyristors, Digital Logic, and Amplification Encyclopedia of Electronic Components Volume 3: Sensors for Location, Presence, Proximity, Orientation, Oscillation, Force, Load, Human Input, Liquid ... Light, Heat, Sound, and Electricity Creative Coding Processing: A Programming Handbook for Visual Designers and Artists Generative Design: Visualize, Program, and Create with Processing - ( Website , Code ) The Nature of Code: Simulating Natural Systems with Processing - ( Free Version ) The Computational Beauty of Nature: Computer Explorations of Fractals, Chaos, Complex Systems, and Adaptation Physical Computing Making Things Talk: Using Sensors, Networks, and Arduino to See, Hear, and Feel Your World Physical Computing: Sensing and Controlling the Physical World with Computers Learn Electronics with Arduino: An Illustrated Beginner's Guide to Physical Computing (Make: Technology on Your Time) Programming Interactivity: A Designer's Guide to Processing, Arduino, and openFrameworks Getting Started with Arduino: The Open Source Electronics Prototyping Platform Make: Wearable Electronics: Design, prototype, and wear your own interactive garments Interactive Design Art of Interactive Design: A Euphonious and Illuminating Guide to Building Successful Software Industrial Design The Industrial Design Reference & Specification Book: Everything Industrial Designers Need to Know The Design of Everyday Things: Revised and Expanded Edition Making It: Manufacturing Techniques for Product Design Stuff Matters: Exploring the Marvelous Materials That Shape Our Man-Made World The Industrial Design Reader Graphic Design Graphic Design: The New Basics: Second Edition, Revised and Expanded 3D Printing Printing Things: Visions and Essentials for 3D Printing Visualizing Mathematics with 3D Printing The 3D Printing Handbook: Technologies, design and applications Materials Stuff Matters: Exploring the Marvelous Materials That Shape Our Man-Made World Materials for Design Materials and Design, Third Edition: The Art and Science of Material Selection in Product Design Transmaterial: A Catalog of Materials That Redefine our Physical Environment Manufacturing Manufacturing Processes for Design Professionals Fundamentals of Modern Manufacturing: Materials, Processes, and Systems Media Arts The New Media Reader Form+Code in Design, Art, and Architecture","title":"Books"},{"location":"books/#local-libraries","text":"CU Boulder Library Catalog (Chinook) Boulder Public Library","title":"Local Libraries"},{"location":"books/#technical-publishers","text":"Awesome Book Authoring Packt Publishing , Free Tech Ebook of the Day O'Reilly Safari Apress The Pragmatic Bookshelf","title":"Technical Publishers"},{"location":"books/#critical-making","text":"The Art of Critical Making: Rhode Island School of Design on Creative Practice","title":"Critical Making"},{"location":"books/#code-electronics-computers","text":"Code: The Hidden Language of Computer Hardware and Software Encyclopedia of Electronic Components Volume 1: Resistors, Capacitors, Inductors, Switches, Encoders, Relays, Transistors Encyclopedia of Electronic Components Volume 2: LEDs, LCDs, Audio, Thyristors, Digital Logic, and Amplification Encyclopedia of Electronic Components Volume 3: Sensors for Location, Presence, Proximity, Orientation, Oscillation, Force, Load, Human Input, Liquid ... Light, Heat, Sound, and Electricity","title":"Code, Electronics, Computers"},{"location":"books/#creative-coding","text":"Processing: A Programming Handbook for Visual Designers and Artists Generative Design: Visualize, Program, and Create with Processing - ( Website , Code ) The Nature of Code: Simulating Natural Systems with Processing - ( Free Version ) The Computational Beauty of Nature: Computer Explorations of Fractals, Chaos, Complex Systems, and Adaptation","title":"Creative Coding"},{"location":"books/#physical-computing","text":"Making Things Talk: Using Sensors, Networks, and Arduino to See, Hear, and Feel Your World Physical Computing: Sensing and Controlling the Physical World with Computers Learn Electronics with Arduino: An Illustrated Beginner's Guide to Physical Computing (Make: Technology on Your Time) Programming Interactivity: A Designer's Guide to Processing, Arduino, and openFrameworks Getting Started with Arduino: The Open Source Electronics Prototyping Platform Make: Wearable Electronics: Design, prototype, and wear your own interactive garments","title":"Physical Computing"},{"location":"books/#interactive-design","text":"Art of Interactive Design: A Euphonious and Illuminating Guide to Building Successful Software","title":"Interactive Design"},{"location":"books/#industrial-design","text":"The Industrial Design Reference & Specification Book: Everything Industrial Designers Need to Know The Design of Everyday Things: Revised and Expanded Edition Making It: Manufacturing Techniques for Product Design Stuff Matters: Exploring the Marvelous Materials That Shape Our Man-Made World The Industrial Design Reader","title":"Industrial Design"},{"location":"books/#graphic-design","text":"Graphic Design: The New Basics: Second Edition, Revised and Expanded","title":"Graphic Design"},{"location":"books/#3d-printing","text":"Printing Things: Visions and Essentials for 3D Printing Visualizing Mathematics with 3D Printing The 3D Printing Handbook: Technologies, design and applications","title":"3D Printing"},{"location":"books/#materials","text":"Stuff Matters: Exploring the Marvelous Materials That Shape Our Man-Made World Materials for Design Materials and Design, Third Edition: The Art and Science of Material Selection in Product Design Transmaterial: A Catalog of Materials That Redefine our Physical Environment","title":"Materials"},{"location":"books/#manufacturing","text":"Manufacturing Processes for Design Professionals Fundamentals of Modern Manufacturing: Materials, Processes, and Systems","title":"Manufacturing"},{"location":"books/#media-arts","text":"The New Media Reader Form+Code in Design, Art, and Architecture","title":"Media Arts"},{"location":"creative-industries/","text":"Studios / Agencies / Collectives Project One Studio / Instagram Vvoxstudio / Volvoxlabs / Instagram Moment Factory (Lab) Softlab / Instagram Respons_ve / Instagram Field.io / Field.io Research: Journery into VR / Instagram Symmetry Labs / Instagram Squidsoup / Instagram United Visual Artists / Instagram DIA / Instagram Universal Everything Channel Studio Breakfast / Instagram Onformative / Instagram Shows / Festivals Ars Electronica / Instagram","title":"Creative Industries"},{"location":"creative-industries/#studios-agencies-collectives","text":"Project One Studio / Instagram Vvoxstudio / Volvoxlabs / Instagram Moment Factory (Lab) Softlab / Instagram Respons_ve / Instagram Field.io / Field.io Research: Journery into VR / Instagram Symmetry Labs / Instagram Squidsoup / Instagram United Visual Artists / Instagram DIA / Instagram Universal Everything Channel Studio Breakfast / Instagram Onformative / Instagram","title":"Studios / Agencies / Collectives"},{"location":"creative-industries/#shows-festivals","text":"Ars Electronica / Instagram","title":"Shows / Festivals"},{"location":"pm/","text":"Documents Google Docs Etherpad LibreOffice Microsoft Office Firepad Evernote Mac Journal Papier - Browser based note taking Chrome application / extension. Notion - A great tool for note taking etc. Check out this great writeup by Cal Brackin about how he uses it at the Studio. Screen Capture Screencast-o-matic , Download Link - Screen capture software for sharing projects, making tutorials, and more. Screenflick How to take a screenshot on your Mac 7 ways to take screenshots in Windows 10 Data Storage Dropbox Box OwnCloud Microsoft OneDrive Google Drive Large File Transfer WeTransfer Drop Send Blogs / Wikis / Content Management Systems (CMS) Tumblr Wordpress , Wordpress.org MediaWiki Cargo Collective Squarespace Wix The Grid Drupal Joomla Statamic Visual Asset Management InVision Boards Pixave (MacOS App) Pintrest Niice FTP Cyberduck FileZilla Transmit WinSCP SmartFTP FireFTP Version Control Git , Github , GitLab , GitWeb , Gitolite Bitbucket Subversion RCS Mercurial Bazaar CVS Synchronization rsync unison Cloud Computing (Hosting) Amazon EC2 Google Compute Engine Digital Ocean Linode Heroku Bluehost Domains Namecheap - My go to for domain registration. Godaddy 1&1 Gandi park.io - Domain Name Auction Project Management Apps Trello GanttProject Taiga OpenProj TaskJuggler OmniPlan GitLab Pintrest Tumblr Slack , Slack Archive , Slackin Inviter Photo Sharing Instagram Flickr Google Photos Mind Mapping MindNode Pro iThoughtsX Mindcad Incubator Coggle XMind Vue Forums Discourse Vanilla Remote Desktop TightVNC x11vnc noVNC TigerVNC RealVNC Free JollysFastVNC UltraVNC VPN Detailed VPN Comparison Chart - Thanks Ty","title":"Project Management"},{"location":"pm/#documents","text":"Google Docs Etherpad LibreOffice Microsoft Office Firepad Evernote Mac Journal Papier - Browser based note taking Chrome application / extension. Notion - A great tool for note taking etc. Check out this great writeup by Cal Brackin about how he uses it at the Studio.","title":"Documents"},{"location":"pm/#screen-capture","text":"Screencast-o-matic , Download Link - Screen capture software for sharing projects, making tutorials, and more. Screenflick How to take a screenshot on your Mac 7 ways to take screenshots in Windows 10","title":"Screen Capture"},{"location":"pm/#data-storage","text":"Dropbox Box OwnCloud Microsoft OneDrive Google Drive","title":"Data Storage"},{"location":"pm/#large-file-transfer","text":"WeTransfer Drop Send","title":"Large File Transfer"},{"location":"pm/#blogs-wikis-content-management-systems-cms","text":"Tumblr Wordpress , Wordpress.org MediaWiki Cargo Collective Squarespace Wix The Grid Drupal Joomla Statamic","title":"Blogs / Wikis / Content Management Systems (CMS)"},{"location":"pm/#visual-asset-management","text":"InVision Boards Pixave (MacOS App) Pintrest Niice","title":"Visual Asset Management"},{"location":"pm/#ftp","text":"Cyberduck FileZilla Transmit WinSCP SmartFTP FireFTP","title":"FTP"},{"location":"pm/#version-control","text":"Git , Github , GitLab , GitWeb , Gitolite Bitbucket Subversion RCS Mercurial Bazaar CVS","title":"Version Control"},{"location":"pm/#synchronization","text":"rsync unison","title":"Synchronization"},{"location":"pm/#cloud-computing-hosting","text":"Amazon EC2 Google Compute Engine Digital Ocean Linode Heroku Bluehost","title":"Cloud Computing (Hosting)"},{"location":"pm/#domains","text":"Namecheap - My go to for domain registration. Godaddy 1&1 Gandi park.io - Domain Name Auction","title":"Domains"},{"location":"pm/#project-management-apps","text":"Trello GanttProject Taiga OpenProj TaskJuggler OmniPlan GitLab Pintrest Tumblr Slack , Slack Archive , Slackin Inviter","title":"Project Management Apps"},{"location":"pm/#photo-sharing","text":"Instagram Flickr Google Photos","title":"Photo Sharing"},{"location":"pm/#mind-mapping","text":"MindNode Pro iThoughtsX Mindcad Incubator Coggle XMind Vue","title":"Mind Mapping"},{"location":"pm/#forums","text":"Discourse Vanilla","title":"Forums"},{"location":"pm/#remote-desktop","text":"TightVNC x11vnc noVNC TigerVNC RealVNC Free JollysFastVNC UltraVNC","title":"Remote Desktop"},{"location":"pm/#vpn","text":"Detailed VPN Comparison Chart - Thanks Ty","title":"VPN"},{"location":"projects/","text":"Projects Critical Making 1: Finding Your Superpower Through Digital and Physical Making Sonic Shell - by Mark Grundberg (C11) 5000 Snowflakes - by Clayton Kenney (C11) ANALOG TECH - by Dave Laskowski (C11) Mapping World Literature with Mapbox - by Tess Stevens (C11) Rethinking the Kitchen - by Aitana Rothfeld (C11) VR Gallery - by Min Kim (C11) METAMORPHOSIS: Artisan Chocolates / Josh's Post - by Vanessa Frye and Josh Sheetz (C11) 3D Printing: Goat Beard & Deer Horn / Process - by Yvonne Danyluck (C11) The Scheherazade Nightgown - by Gia Almuaili (C11) Welcome Home - by Kelly Phillips (C10) The Joy of Bob - by Diamond Alexander (C10) I AM WHAT I WISH (Art Installation) - by Jonas Escobedo, Allison Spiegel, Makenna Considine (C10) Rock Paper Scissor Remix - by Allison Spiegel (C10) Dictionary Game - by Karen McClellan (C10) Hive Brand Ice Cream (Ice Cream / Packaging Design) - by Makenna Considine (C10) Interactive LED Music Visualizer - by Hanshu Zhou (C10) Marshmallow Crossbow / Demo - by Hanshu Zhou (C10) Breathe - A Kinetic Wall Installation - by Nikki Cavalier (C9) Seasons - A VR Experience - by Nikki Cavalier (C9) Typography Cookie Cutters - by Sarah Safranski (C9) Stress Map - by Matt Isola (C9) Spatial UX in Rhino 3D - by Nicole Tang (C11) FOUReANDa (Web Based Synth/Sequencer) - by Nick Balderston (C9) Ovulation Tracking Smart Device - by Sarah Safranski , Rebekah Sosa (C9) Little Peanuts Cooking Kit: Healthy Eating Begins with Play - by Sarah Safranski (C9) 3D Topographic Modeling - by Erin Pfeifer (C9) Other Examples: VR Maze Experience, Escape Room Experience, Automated Dog Feeder Prototype, Planetary Chocolate Molds, Bob Ross Chrome Webapp, VR Home Walkthrough, RFID Smart Ring, 3D Printed Furniture","title":"Projects"},{"location":"projects/#projects","text":"Critical Making 1: Finding Your Superpower Through Digital and Physical Making Sonic Shell - by Mark Grundberg (C11) 5000 Snowflakes - by Clayton Kenney (C11) ANALOG TECH - by Dave Laskowski (C11) Mapping World Literature with Mapbox - by Tess Stevens (C11) Rethinking the Kitchen - by Aitana Rothfeld (C11) VR Gallery - by Min Kim (C11) METAMORPHOSIS: Artisan Chocolates / Josh's Post - by Vanessa Frye and Josh Sheetz (C11) 3D Printing: Goat Beard & Deer Horn / Process - by Yvonne Danyluck (C11) The Scheherazade Nightgown - by Gia Almuaili (C11) Welcome Home - by Kelly Phillips (C10) The Joy of Bob - by Diamond Alexander (C10) I AM WHAT I WISH (Art Installation) - by Jonas Escobedo, Allison Spiegel, Makenna Considine (C10) Rock Paper Scissor Remix - by Allison Spiegel (C10) Dictionary Game - by Karen McClellan (C10) Hive Brand Ice Cream (Ice Cream / Packaging Design) - by Makenna Considine (C10) Interactive LED Music Visualizer - by Hanshu Zhou (C10) Marshmallow Crossbow / Demo - by Hanshu Zhou (C10) Breathe - A Kinetic Wall Installation - by Nikki Cavalier (C9) Seasons - A VR Experience - by Nikki Cavalier (C9) Typography Cookie Cutters - by Sarah Safranski (C9) Stress Map - by Matt Isola (C9) Spatial UX in Rhino 3D - by Nicole Tang (C11) FOUReANDa (Web Based Synth/Sequencer) - by Nick Balderston (C9) Ovulation Tracking Smart Device - by Sarah Safranski , Rebekah Sosa (C9) Little Peanuts Cooking Kit: Healthy Eating Begins with Play - by Sarah Safranski (C9) 3D Topographic Modeling - by Erin Pfeifer (C9) Other Examples: VR Maze Experience, Escape Room Experience, Automated Dog Feeder Prototype, Planetary Chocolate Molds, Bob Ross Chrome Webapp, VR Home Walkthrough, RFID Smart Ring, 3D Printed Furniture","title":"Projects"},{"location":"students/","text":"Mark Banzhoff - Medium | Github Mateo Barroetavena - Medium | Github Cal Brackin - Medium | Github Arielle Castro - Medium | Github Karlie Cronin - Medium | Github Hudson Fega - Medium | Github Bella Fidjeland - Medium | Github Caleb Hammel - Medium | Github Natalie Jackson - Medium | Github Cody King - Medium | Github Heather Kraft - Medium | Github Katie Kreider - Medium | Github Haley Mordini - Medium | Github Mye Ponrattanasiri - Medium | Github Devva Saunders - Medium | Github Max Vecchitto - Medium | Github Jacque Walo - Medium | Github Renee (Yuan) Zhuang - Medium | Github","title":"Students"},{"location":"cc/","text":"IDEs and Applications Processing OpenFrameworks Cinder Max/MSP/Jitter vvvv Structure Synth OpenSCAD Context Free Touch Designer Pure Data Web Based WebGL , Does my browser support WebGL? , WebGL Report three.js , Learning Three.js D3.js p5.js , p5.js web editor , A free-to-use classrooms system for p5.js CreateJS ChartJS WebVR Paper.js Planck.js GLSL Sandboxes Shadertoy GLSL Sandbox glslb.in Basics The Book of Shaders , TBoS Editor Pixel Shaders Shadershop stackgl - Open Source Software Ecosystem for WebGL. Shader School - Based on stackgl. Start here. WebGL Workshop - Based on stackgl. The sequel to shader-school: Learn the WebGL API Physics / Motion Physics Simulations UX In Motion","title":"Tools"},{"location":"cc/#ides-and-applications","text":"Processing OpenFrameworks Cinder Max/MSP/Jitter vvvv Structure Synth OpenSCAD Context Free Touch Designer Pure Data","title":"IDEs and Applications"},{"location":"cc/#web-based","text":"WebGL , Does my browser support WebGL? , WebGL Report three.js , Learning Three.js D3.js p5.js , p5.js web editor , A free-to-use classrooms system for p5.js CreateJS ChartJS WebVR Paper.js Planck.js","title":"Web Based"},{"location":"cc/#glsl","text":"","title":"GLSL"},{"location":"cc/#sandboxes","text":"Shadertoy GLSL Sandbox glslb.in","title":"Sandboxes"},{"location":"cc/#basics","text":"The Book of Shaders , TBoS Editor Pixel Shaders Shadershop stackgl - Open Source Software Ecosystem for WebGL. Shader School - Based on stackgl. Start here. WebGL Workshop - Based on stackgl. The sequel to shader-school: Learn the WebGL API","title":"Basics"},{"location":"cc/#physics-motion","text":"Physics Simulations UX In Motion","title":"Physics / Motion"},{"location":"cc/learning-touchdesigner/","text":"Learning TouchDesigner This section contains resources for learning how to use TouchDesigner . Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner Learning TouchDesigner on Lynda.com - You can watch anything on Lynda.com for free via OIT . Matthew Ragan Tutorials Intro to TouchDesigner by Ben Voigt - A great entry point to the world of touch designer. It's long (4 hrs) but worth the watch. TouchDesigner Wiki - The big list of tutorials and ways to learn the tool. cm-xr repo - A repo I setup for XR related code. There is an implementation of UnitySpout which makes use of KlakSpout to interface TouchDesigner with Unity. This is a Windows 10 only based workflow. Presentations Jessica Palmer - Python and TouchDesigner for Interactive Experiments - A designer turned python programmer and touch design expert. Inspiring talk. Make mind bending, interactive 3D projects with TouchDesigner and Python - Quick talk showing some possibilities with the tool.","title":"Learning TouchDesigner"},{"location":"cc/learning-touchdesigner/#learning-touchdesigner","text":"This section contains resources for learning how to use TouchDesigner . Note this is a living document and is constantly being updated. Some things may come and go over time.","title":"Learning TouchDesigner"},{"location":"cc/learning-touchdesigner/#beginner","text":"Learning TouchDesigner on Lynda.com - You can watch anything on Lynda.com for free via OIT . Matthew Ragan Tutorials Intro to TouchDesigner by Ben Voigt - A great entry point to the world of touch designer. It's long (4 hrs) but worth the watch. TouchDesigner Wiki - The big list of tutorials and ways to learn the tool. cm-xr repo - A repo I setup for XR related code. There is an implementation of UnitySpout which makes use of KlakSpout to interface TouchDesigner with Unity. This is a Windows 10 only based workflow. Presentations Jessica Palmer - Python and TouchDesigner for Interactive Experiments - A designer turned python programmer and touch design expert. Inspiring talk. Make mind bending, interactive 3D projects with TouchDesigner and Python - Quick talk showing some possibilities with the tool.","title":"Beginner"},{"location":"des/","text":"2D, 2.5D Design Adobe Creative Cloud Raster GIMP Photoshop MyPaint Krita Photography Scanning (flatbed, etc) Vector Inkscape , FLOSS Manuals , Release Notes LibreOffice Draw Illustrator Scribus LibreCAD QCAD FreeCAD Layout OmniGraffle 3D Design Sketchup Tinkercad Shapesmith Flood Editor Matter Machine Rhino , Grasshopper , Kangaroo RhinoCAM Fusion 360 Fusion 360 Adoption Portal Fusion 360 Students Download - Free for students. Make an Autodesk account and install. Learn Fusion 360 in 60 Mins Fusion 360 Design Academy Fusion 360 Adoption Portal Blender Maya Mudbox Cinema4D - Free Student Licensing , Grey Scale Gorilla ZBrush AutoCAD Solidworks Onshape Alias 3DS Max PTC NX AC3D OpenSCAD Catia Matrix Gold - Jewelery Design Software Clayoo - Rhino Plugin for Organic Modeling (SUBD, Emboss, Sculpt) Game Engines Unity Unreal Simulation Elmer COMSOL Solidworks: Simulation ANSYS Nastran Audio & Video Audacity Kdenlive , OpenShot , Lightworks , Final Cut Pro X Adobe Premiere , After Effects ffmpeg , avconv , mencoder mplayer , smplayer VLC HTML5 , formats Screencast-O-Matic Reaper Ableton Live Audio Mulch VCV Rack - Open Source Virtual Eurorack DAW Reality Capture Structure Sensor 3D Scanner Autodesk Remake Mesh Tools Meshlab Autodesk Meshmixer Autodesk Netfabb Visual Programming / Node Based Editors Cycling74 Max Notch PraxisLIVE","title":"Tools"},{"location":"des/#2d-25d-design","text":"Adobe Creative Cloud","title":"2D, 2.5D Design"},{"location":"des/#raster","text":"GIMP Photoshop MyPaint Krita Photography Scanning (flatbed, etc)","title":"Raster"},{"location":"des/#vector","text":"Inkscape , FLOSS Manuals , Release Notes LibreOffice Draw Illustrator Scribus LibreCAD QCAD FreeCAD Layout OmniGraffle","title":"Vector"},{"location":"des/#3d-design","text":"Sketchup Tinkercad Shapesmith Flood Editor Matter Machine Rhino , Grasshopper , Kangaroo RhinoCAM Fusion 360 Fusion 360 Adoption Portal Fusion 360 Students Download - Free for students. Make an Autodesk account and install. Learn Fusion 360 in 60 Mins Fusion 360 Design Academy Fusion 360 Adoption Portal Blender Maya Mudbox Cinema4D - Free Student Licensing , Grey Scale Gorilla ZBrush AutoCAD Solidworks Onshape Alias 3DS Max PTC NX AC3D OpenSCAD Catia Matrix Gold - Jewelery Design Software Clayoo - Rhino Plugin for Organic Modeling (SUBD, Emboss, Sculpt)","title":"3D Design"},{"location":"des/#game-engines","text":"Unity Unreal","title":"Game Engines"},{"location":"des/#simulation","text":"Elmer COMSOL Solidworks: Simulation ANSYS Nastran","title":"Simulation"},{"location":"des/#audio-video","text":"Audacity Kdenlive , OpenShot , Lightworks , Final Cut Pro X Adobe Premiere , After Effects ffmpeg , avconv , mencoder mplayer , smplayer VLC HTML5 , formats Screencast-O-Matic Reaper Ableton Live Audio Mulch VCV Rack - Open Source Virtual Eurorack DAW","title":"Audio &amp; Video"},{"location":"des/#reality-capture","text":"Structure Sensor 3D Scanner Autodesk Remake","title":"Reality Capture"},{"location":"des/#mesh-tools","text":"Meshlab Autodesk Meshmixer Autodesk Netfabb","title":"Mesh Tools"},{"location":"des/#visual-programming-node-based-editors","text":"Cycling74 Max Notch PraxisLIVE","title":"Visual Programming / Node Based Editors"},{"location":"des/geometry/","text":"Geometry Various tools and resources used to design and construct digital and physical geometric models. Papercraft Paper Models of Polyhedra - Pre sized printable paper templates of various Polyhedra. Templatemaker.nl - Generators for custom sized papercraft and packaging. Polyhedron Models by Magnus J. Wenninger Generators boxes.py - A great set of box generators written in Python All Box Generators - Wiki for boxes.py. MakerCase - A basic box generator Software Stella4D - Windows Only Pepakura - Windows Only Rhinopolyhedra - Plugin for Rhino with over 630 different polyhedral shapes. Mathematica / OIT Student Licensing CaRMetal - Slightly old program that should still work on macOS (Mojave).","title":"Geometry"},{"location":"des/geometry/#geometry","text":"Various tools and resources used to design and construct digital and physical geometric models.","title":"Geometry"},{"location":"des/geometry/#papercraft","text":"Paper Models of Polyhedra - Pre sized printable paper templates of various Polyhedra. Templatemaker.nl - Generators for custom sized papercraft and packaging. Polyhedron Models by Magnus J. Wenninger","title":"Papercraft"},{"location":"des/geometry/#generators","text":"boxes.py - A great set of box generators written in Python All Box Generators - Wiki for boxes.py. MakerCase - A basic box generator","title":"Generators"},{"location":"des/geometry/#software","text":"Stella4D - Windows Only Pepakura - Windows Only Rhinopolyhedra - Plugin for Rhino with over 630 different polyhedral shapes. Mathematica / OIT Student Licensing CaRMetal - Slightly old program that should still work on macOS (Mojave).","title":"Software"},{"location":"des/parametric/","text":"Parametric Design Parametric design is a process based on algorithmic thinking that enables the expression of parameters and rules that, together, define, encode and clarify the relationship between design intent and design response. ( Source: Wikipedia ), Google Search Histories Parametric Design: a Brief History Parametric Design: What's Gotten Lost Amid the Algorithms Examples Parametric Design Examples Organizations: Co-de-iT , Zha Code Edu , Designmorphine Projects: Opendesk , Formlabs Digital Factory Pens , New Balance 3D Printed Shoe , Nervous System Kinematics Dress","title":"Parametric"},{"location":"des/parametric/#parametric-design","text":"Parametric design is a process based on algorithmic thinking that enables the expression of parameters and rules that, together, define, encode and clarify the relationship between design intent and design response. ( Source: Wikipedia ), Google Search","title":"Parametric Design"},{"location":"des/parametric/#histories","text":"Parametric Design: a Brief History Parametric Design: What's Gotten Lost Amid the Algorithms","title":"Histories"},{"location":"des/parametric/#examples","text":"Parametric Design Examples Organizations: Co-de-iT , Zha Code Edu , Designmorphine Projects: Opendesk , Formlabs Digital Factory Pens , New Balance 3D Printed Shoe , Nervous System Kinematics Dress","title":"Examples"},{"location":"des/systems/","text":"Design Systems Design Systems Handbook Learn Design Code - Great resource for tools and topics at the intersection of design and code. Primer - Github's Design System Flat File CMS Type and Grids Wordpress Themes Colorlib Free Themes - The internet is full of themes. Just google \"best wordpress themes of 2017\" or something more specific to the kind of site you want to build. You will eventually land on something that works. Athemes HTML Themes Bootstrap , Bootswatch , Start Bootstrap Theme Forest Templated Admin Panel Themes Bootstrap Admin Themes 20 Free & Premium Bootstrap Admin Dashboard Templates Top 22 Free Responsive HTML5 Admin & Dashboard Templates 2017 10 Beautifully Designed Free Bootstrap Dashboard Admin Templates Metronic 20 Free Bootstrap Admin Dashboard Templates Start Bootstrap Admin & Dashboard Themes - Simple admin dashboards. AdminBro - An Auto-generated Admin Panel for your Node.js Application Dummy Text (Ipsum) lorem ipsum lorizzle Daftipsum Wikipsum - Ipsum that makes sense! Sort of. HTML-Ipsum Typography & Fonts The Elements of Typographic Style Applied to the Web The Missing Guide to Font Formats: TTF, OTF, WOFF, EOT & SVG Color Coolors - Color generator tool color-hex Colourlovers FlatUI Colors Material Design Color Collection Palette Generator UI Gradients Grid Systems The Grid System - The ultimate resource in grid systems. Grids in Graphic Design","title":"Design Systems"},{"location":"des/systems/#design-systems","text":"Design Systems Handbook Learn Design Code - Great resource for tools and topics at the intersection of design and code. Primer - Github's Design System","title":"Design Systems"},{"location":"des/systems/#flat-file-cms","text":"Type and Grids","title":"Flat File CMS"},{"location":"des/systems/#wordpress-themes","text":"Colorlib Free Themes - The internet is full of themes. Just google \"best wordpress themes of 2017\" or something more specific to the kind of site you want to build. You will eventually land on something that works. Athemes","title":"Wordpress Themes"},{"location":"des/systems/#html-themes","text":"Bootstrap , Bootswatch , Start Bootstrap Theme Forest Templated","title":"HTML Themes"},{"location":"des/systems/#admin-panel-themes","text":"Bootstrap Admin Themes 20 Free & Premium Bootstrap Admin Dashboard Templates Top 22 Free Responsive HTML5 Admin & Dashboard Templates 2017 10 Beautifully Designed Free Bootstrap Dashboard Admin Templates Metronic 20 Free Bootstrap Admin Dashboard Templates Start Bootstrap Admin & Dashboard Themes - Simple admin dashboards. AdminBro - An Auto-generated Admin Panel for your Node.js Application","title":"Admin Panel Themes"},{"location":"des/systems/#dummy-text-ipsum","text":"lorem ipsum lorizzle Daftipsum Wikipsum - Ipsum that makes sense! Sort of. HTML-Ipsum","title":"Dummy Text (Ipsum)"},{"location":"des/systems/#typography-fonts","text":"The Elements of Typographic Style Applied to the Web The Missing Guide to Font Formats: TTF, OTF, WOFF, EOT & SVG","title":"Typography &amp; Fonts"},{"location":"des/systems/#color","text":"Coolors - Color generator tool color-hex Colourlovers FlatUI Colors Material Design Color Collection Palette Generator UI Gradients","title":"Color"},{"location":"des/systems/#grid-systems","text":"The Grid System - The ultimate resource in grid systems. Grids in Graphic Design","title":"Grid Systems"},{"location":"des/ux-tools/","text":"UX Tools UXTools.co UI/UX Design Sketch Adobe XD / Getting Started Atomic Omnigraffle Wireframing Wires (UX Kit for AdobeXD) Snap Rapid Wireframing Kit Voice UX BotMock Botsociety","title":"UX Tools"},{"location":"des/ux-tools/#ux-tools","text":"UXTools.co","title":"UX Tools"},{"location":"des/ux-tools/#uiux-design","text":"Sketch Adobe XD / Getting Started Atomic Omnigraffle","title":"UI/UX Design"},{"location":"des/ux-tools/#wireframing","text":"Wires (UX Kit for AdobeXD) Snap Rapid Wireframing Kit","title":"Wireframing"},{"location":"des/ux-tools/#voice-ux","text":"BotMock Botsociety","title":"Voice UX"},{"location":"des/web-design/","text":"Web Design Design Tools Tools that bridge the design to development gap. Webflow Sketch Platforma 2 for sketch Framer X Adobe XD Invision App Awesome Design Tools: Design to Code Tools Fonts Font Pairings","title":"Web Design"},{"location":"des/web-design/#web-design","text":"","title":"Web Design"},{"location":"des/web-design/#design-tools","text":"Tools that bridge the design to development gap. Webflow Sketch Platforma 2 for sketch Framer X Adobe XD Invision App Awesome Design Tools: Design to Code Tools","title":"Design Tools"},{"location":"des/web-design/#fonts","text":"Font Pairings","title":"Fonts"},{"location":"des/learning-f360/","text":"Learning Fusion 360 This section contains resources for learning how to use Autodesk Fusion 360. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner Intro to Fusion 360 Workshop Courses Pluralsignt: Fusion 360: Core Skills The Interface Workspaces, Tools, Navigation, Movement, Projects Model Hierarchy (Browser) Timeline (Model History) How to Use the Timeline Master the Timeline, Browser, & Preferences Making Sketches Defining Constraints A Guide to Fusion 360 Sketch Constraints - A great set of videos for each constraint type. A List of Constraint Types Dimensioning a Sketch Fully Defining a Sketch Pro Tip: Anything \"Blue\" is not dimensioned which means it can be moved around. Anything \"Black\" is dimensioned which mean is has a size. Once the whole sketch is Black it is \"Fully Dimensioned.\" This means it's \"locked\" into place. From 2D Sketch to 3D Model Extruding Sketches (Create > Extrude) Sketches vs Bodies vs Components vs Assemblies Quick Tip: Bodies vs Components About bodies and components What is the difference between a Sketch, Body & Component? Understanding Assemblies Pro Tip: Press Shift + N to turn on color cycling. This will give a color to each component. Exporting 3D Models 3D Meshes ( STL , OBJ) Mesh Refinement (Higher Quality = More Triangles) Example: Viewing Meshes in Meshlab Fusion 360 has a few ways to export: Right Click on the top level assembly in the model browser and choose Export. Options: f3d, iges, step, sat, smt STL Export Right Click on the top level assembly or any component or any body in the model browser and choose \"Save as STL\". File > Export will give all possible export options. Some require the assistance of the cloud. Click \"Open on the web\" globe with eye icon in the left sidebar (data panel). This will open your Autodesk proejct workspace in the browser. Locate the file you wish to export and click the small arrow to chose file type. Exporting from Fusion 360 for uploading to Sketchfab Exporting an STL is the quick and easy export format suitable for 3D printing and sharing. The downside of a STL file is there is no color or texture information exported. To retain this information its best to export an FBX file. Fusion 360 Export Formats Sketchfab - Supported 3D File Formats FBX Review - Utility for viewing FBX files. Making Mechanical Drawings (2D) File > New Drawing From Design How to Create a Drawing From Your Design (Video) Defining a Parametric Model User Parameters (\"Sigma\" Icon) Change Parameters Dialog Box Equations and Parameters in Dimensions Importing 3D Models Importing a Mesh (STL) - How to convert a mesh to a parametric model. Intermediate Working with Meshes Coming soon Joints and Assemblies NYCNC: Fusion Friday #3: Joints Explained! Advanced Scripting API Coming soon","title":"Learning Fusion 360"},{"location":"des/learning-f360/#learning-fusion-360","text":"This section contains resources for learning how to use Autodesk Fusion 360. Note this is a living document and is constantly being updated. Some things may come and go over time.","title":"Learning Fusion 360"},{"location":"des/learning-f360/#beginner","text":"Intro to Fusion 360 Workshop","title":"Beginner"},{"location":"des/learning-f360/#courses","text":"Pluralsignt: Fusion 360: Core Skills","title":"Courses"},{"location":"des/learning-f360/#the-interface","text":"Workspaces, Tools, Navigation, Movement, Projects Model Hierarchy (Browser) Timeline (Model History) How to Use the Timeline Master the Timeline, Browser, & Preferences","title":"The Interface"},{"location":"des/learning-f360/#making-sketches","text":"Defining Constraints A Guide to Fusion 360 Sketch Constraints - A great set of videos for each constraint type. A List of Constraint Types Dimensioning a Sketch Fully Defining a Sketch Pro Tip: Anything \"Blue\" is not dimensioned which means it can be moved around. Anything \"Black\" is dimensioned which mean is has a size. Once the whole sketch is Black it is \"Fully Dimensioned.\" This means it's \"locked\" into place.","title":"Making Sketches"},{"location":"des/learning-f360/#from-2d-sketch-to-3d-model","text":"Extruding Sketches (Create > Extrude) Sketches vs Bodies vs Components vs Assemblies Quick Tip: Bodies vs Components About bodies and components What is the difference between a Sketch, Body & Component? Understanding Assemblies Pro Tip: Press Shift + N to turn on color cycling. This will give a color to each component.","title":"From 2D Sketch to 3D Model"},{"location":"des/learning-f360/#exporting-3d-models","text":"3D Meshes ( STL , OBJ) Mesh Refinement (Higher Quality = More Triangles) Example: Viewing Meshes in Meshlab Fusion 360 has a few ways to export: Right Click on the top level assembly in the model browser and choose Export. Options: f3d, iges, step, sat, smt STL Export Right Click on the top level assembly or any component or any body in the model browser and choose \"Save as STL\". File > Export will give all possible export options. Some require the assistance of the cloud. Click \"Open on the web\" globe with eye icon in the left sidebar (data panel). This will open your Autodesk proejct workspace in the browser. Locate the file you wish to export and click the small arrow to chose file type.","title":"Exporting 3D Models"},{"location":"des/learning-f360/#exporting-from-fusion-360-for-uploading-to-sketchfab","text":"Exporting an STL is the quick and easy export format suitable for 3D printing and sharing. The downside of a STL file is there is no color or texture information exported. To retain this information its best to export an FBX file. Fusion 360 Export Formats Sketchfab - Supported 3D File Formats FBX Review - Utility for viewing FBX files.","title":"Exporting from Fusion 360 for uploading to Sketchfab"},{"location":"des/learning-f360/#making-mechanical-drawings-2d","text":"File > New Drawing From Design How to Create a Drawing From Your Design (Video)","title":"Making Mechanical Drawings (2D)"},{"location":"des/learning-f360/#defining-a-parametric-model","text":"User Parameters (\"Sigma\" Icon) Change Parameters Dialog Box Equations and Parameters in Dimensions","title":"Defining a Parametric Model"},{"location":"des/learning-f360/#importing-3d-models","text":"Importing a Mesh (STL) - How to convert a mesh to a parametric model.","title":"Importing 3D Models"},{"location":"des/learning-f360/#intermediate","text":"","title":"Intermediate"},{"location":"des/learning-f360/#working-with-meshes","text":"Coming soon","title":"Working with Meshes"},{"location":"des/learning-f360/#joints-and-assemblies","text":"NYCNC: Fusion Friday #3: Joints Explained!","title":"Joints and Assemblies"},{"location":"des/learning-f360/#advanced","text":"","title":"Advanced"},{"location":"des/learning-f360/#scripting-api","text":"Coming soon","title":"Scripting API"},{"location":"des/learning-f360/intro-to-f360/","text":"Introduction to Fusion 360 Download & Install Fusion 360 Students Download - Free for students. Make an Autodesk account and install. Fusion will be automatically placed in the macOS dock as a shortcut after install. The Basics The Interface Workspaces, Tools, Navigation, Movement, Projects Model Hierarchy (Browser) Timeline (Model History) How to Use the Timeline Master the Timeline, Browser, & Preferences Making Sketches Defining Constraints A Guide to Fusion 360 Sketch Constraints - A great set of videos for each constraint type. A List of Constraint Types Dimensioning a Sketch Fully Defining a Sketch Pro Tip: Anything \"Blue\" is not dimensioned which means it can be moved around. Anything \"Black\" is dimensioned which mean is has a size. Once the whole sketch is Black it is \"Fully Dimensioned.\" This means it's \"locked\" into place. From 2D Sketch to 3D Model Extruding Sketches (Create > Extrude) Sketches vs Bodies vs Components vs Assemblies Quick Tip: Bodies vs Components About bodies and components What is the difference between a Sketch, Body & Component? Understanding Assemblies Exporting 3D Models for 3D Printing Whats a mesh? ( Think Minecraft or Low poly art. ) 3D meshes are defined using the STL file format. Mesh Refinement (Higher Quality = More Triangles). Example: Stanford Bunny Example: Viewing Meshes in Meshlab or MeshMixer Exporting 2D Paths for Laser Cutting Select a sketch or surface to make a sketch on and make a new sketch. Name the sketch accordingly with a label \"Export DXF\". Export: Right click on the sketch and export a DXF file. Alternative method: Use the DXF exporting script here for exporting many named sketches. Layout the DXF file in Adobe Illustrator or another vector graphics or CAD program in preparation for laser cutting. Assign colors to paths for vector cutting (red stroke), vector scoring (blue stroke), and raster engraving (black fill). The color mapping will depend on the system used.","title":"Intro to Fusion 360 Workshop"},{"location":"des/learning-f360/intro-to-f360/#introduction-to-fusion-360","text":"","title":"Introduction to Fusion 360"},{"location":"des/learning-f360/intro-to-f360/#download-install","text":"Fusion 360 Students Download - Free for students. Make an Autodesk account and install. Fusion will be automatically placed in the macOS dock as a shortcut after install.","title":"Download &amp; Install"},{"location":"des/learning-f360/intro-to-f360/#the-basics","text":"","title":"The Basics"},{"location":"des/learning-f360/intro-to-f360/#the-interface","text":"Workspaces, Tools, Navigation, Movement, Projects Model Hierarchy (Browser) Timeline (Model History) How to Use the Timeline Master the Timeline, Browser, & Preferences","title":"The Interface"},{"location":"des/learning-f360/intro-to-f360/#making-sketches","text":"Defining Constraints A Guide to Fusion 360 Sketch Constraints - A great set of videos for each constraint type. A List of Constraint Types Dimensioning a Sketch Fully Defining a Sketch Pro Tip: Anything \"Blue\" is not dimensioned which means it can be moved around. Anything \"Black\" is dimensioned which mean is has a size. Once the whole sketch is Black it is \"Fully Dimensioned.\" This means it's \"locked\" into place.","title":"Making Sketches"},{"location":"des/learning-f360/intro-to-f360/#from-2d-sketch-to-3d-model","text":"Extruding Sketches (Create > Extrude) Sketches vs Bodies vs Components vs Assemblies Quick Tip: Bodies vs Components About bodies and components What is the difference between a Sketch, Body & Component? Understanding Assemblies","title":"From 2D Sketch to 3D Model"},{"location":"des/learning-f360/intro-to-f360/#exporting-3d-models-for-3d-printing","text":"Whats a mesh? ( Think Minecraft or Low poly art. ) 3D meshes are defined using the STL file format. Mesh Refinement (Higher Quality = More Triangles). Example: Stanford Bunny Example: Viewing Meshes in Meshlab or MeshMixer","title":"Exporting 3D Models for 3D Printing"},{"location":"des/learning-f360/intro-to-f360/#exporting-2d-paths-for-laser-cutting","text":"Select a sketch or surface to make a sketch on and make a new sketch. Name the sketch accordingly with a label \"Export DXF\". Export: Right click on the sketch and export a DXF file. Alternative method: Use the DXF exporting script here for exporting many named sketches. Layout the DXF file in Adobe Illustrator or another vector graphics or CAD program in preparation for laser cutting. Assign colors to paths for vector cutting (red stroke), vector scoring (blue stroke), and raster engraving (black fill). The color mapping will depend on the system used.","title":"Exporting 2D Paths for Laser Cutting"},{"location":"des/learning-rhino/","text":"Learning Rhino This section contains resources for learning how to use McNeel Rhinoceros 3D and Grasshopper. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner Rhino Overview Rhino is a CAD tool for designers and architects. It's considered one of the standard 3d modeling tools for product designers across many different industries. New to Rhino? Start by going through the Intro to Rhino Workshop . Rhino for Windows vs Rhino for macOS Rhino for Windows is much older than Rhino for macOS and therefore contains a bit more functionality (for now). There are many open-source and proprietary plugins available for both Rhino and Grasshopper but not all are compatible for both operating systems yet. To get something to work the way you want, you sometimes need to use both OSes. Rhino 6 for Windows commands not in Rhino 6 for Mac Grasshopper Overview Grasshopper is an node-based algorithmic modeling environment plugin for Rhino. As of Rhino 6.0 it's included when you install Rhino. You access it by typing Grasshopper into the command interface in Rhino. When you launch the tool it will open a separate window that overlays the Rhino window. Just position Rhino on half of your screen and Grasshopper on the other half. Whats possible with Rhino + Grasshopper? Why use it? There are many design oriented or industry specific reasons but one BIG reason to use the tool is for its extendability through plugins (food4Rhino) for both Rhino and Grasshopper. Plugins such as Grasshopper enable all sorts of design possibilities in computational design, parametric design , and generative design . New to Grasshopper? Start by going through the Intro to Grasshopper Workshop . I highly recommend going through this after spending some time working with Rhino. Resources Old Grasshopper Website / Forum Current Grasshopper Forum Google Search: Rhino Grasshopper Grasshopper on Mac Component Compatibility Testing : Components","title":"Learning Rhino"},{"location":"des/learning-rhino/#learning-rhino","text":"This section contains resources for learning how to use McNeel Rhinoceros 3D and Grasshopper. Note this is a living document and is constantly being updated. Some things may come and go over time.","title":"Learning Rhino"},{"location":"des/learning-rhino/#beginner","text":"","title":"Beginner"},{"location":"des/learning-rhino/#rhino-overview","text":"Rhino is a CAD tool for designers and architects. It's considered one of the standard 3d modeling tools for product designers across many different industries. New to Rhino? Start by going through the Intro to Rhino Workshop . Rhino for Windows vs Rhino for macOS Rhino for Windows is much older than Rhino for macOS and therefore contains a bit more functionality (for now). There are many open-source and proprietary plugins available for both Rhino and Grasshopper but not all are compatible for both operating systems yet. To get something to work the way you want, you sometimes need to use both OSes. Rhino 6 for Windows commands not in Rhino 6 for Mac","title":"Rhino Overview"},{"location":"des/learning-rhino/#grasshopper-overview","text":"Grasshopper is an node-based algorithmic modeling environment plugin for Rhino. As of Rhino 6.0 it's included when you install Rhino. You access it by typing Grasshopper into the command interface in Rhino. When you launch the tool it will open a separate window that overlays the Rhino window. Just position Rhino on half of your screen and Grasshopper on the other half. Whats possible with Rhino + Grasshopper? Why use it? There are many design oriented or industry specific reasons but one BIG reason to use the tool is for its extendability through plugins (food4Rhino) for both Rhino and Grasshopper. Plugins such as Grasshopper enable all sorts of design possibilities in computational design, parametric design , and generative design . New to Grasshopper? Start by going through the Intro to Grasshopper Workshop . I highly recommend going through this after spending some time working with Rhino. Resources Old Grasshopper Website / Forum Current Grasshopper Forum Google Search: Rhino Grasshopper Grasshopper on Mac Component Compatibility Testing : Components","title":"Grasshopper Overview"},{"location":"des/learning-rhino/intro-to-gh/","text":"Introduction to Grasshopper Download & Install Grasshopper is included in Rhino 6+. Type Grasshopper into the Rhino command prompt to launch. The Basics Objective: Become familiar with the Grasshopper interface and workflow to create a parametric model. Interface Setting Units (in Rhino) Arranging windows / Hide show Grasshopper Dual monitor is ideal setup to see both Rhino and Grasshopper The Canvas (where you drop components) Double click to type in name of a component you want to add Space bar to access quick commands like preview, bake, and preferences Recent commands bar (on bottom left) Tool Bars & Component Groups (Tabs) Primitives Math Set Vec Curve Surface Mesh Intersect Transform Display Working with components Drag and drop components into the canvas Selecting components Tooltips Connecting / Disconnecting components Aligning components Messages (Orange and red bubbles on component) Grouping components Working with geometry Assigning Rhino geometry to Grasshopper components Creating Grasshopper based geometry and visualizing it in Rhino Baking geometry (Geometry in Grasshopper -> Rhino) Points, Lines, Planes, Volumes Examples The following examples are in the cm-design/grasshopper folder. Example 1: Basic Image Sampler Example 2: Basic Attractor Example 3: Vase Builder This example shows a way to implement a Vase or Vessel type design using Grasshopper. The screenshot shown in the repo is rendered using Keyshot .","title":"Intro to Grasshopper Workshop"},{"location":"des/learning-rhino/intro-to-gh/#introduction-to-grasshopper","text":"","title":"Introduction to Grasshopper"},{"location":"des/learning-rhino/intro-to-gh/#download-install","text":"Grasshopper is included in Rhino 6+. Type Grasshopper into the Rhino command prompt to launch.","title":"Download &amp; Install"},{"location":"des/learning-rhino/intro-to-gh/#the-basics","text":"Objective: Become familiar with the Grasshopper interface and workflow to create a parametric model.","title":"The Basics"},{"location":"des/learning-rhino/intro-to-gh/#interface","text":"Setting Units (in Rhino) Arranging windows / Hide show Grasshopper Dual monitor is ideal setup to see both Rhino and Grasshopper The Canvas (where you drop components) Double click to type in name of a component you want to add Space bar to access quick commands like preview, bake, and preferences Recent commands bar (on bottom left) Tool Bars & Component Groups (Tabs) Primitives Math Set Vec Curve Surface Mesh Intersect Transform Display Working with components Drag and drop components into the canvas Selecting components Tooltips Connecting / Disconnecting components Aligning components Messages (Orange and red bubbles on component) Grouping components Working with geometry Assigning Rhino geometry to Grasshopper components Creating Grasshopper based geometry and visualizing it in Rhino Baking geometry (Geometry in Grasshopper -> Rhino) Points, Lines, Planes, Volumes","title":"Interface"},{"location":"des/learning-rhino/intro-to-gh/#examples","text":"The following examples are in the cm-design/grasshopper folder. Example 1: Basic Image Sampler Example 2: Basic Attractor Example 3: Vase Builder This example shows a way to implement a Vase or Vessel type design using Grasshopper. The screenshot shown in the repo is rendered using Keyshot .","title":"Examples"},{"location":"des/learning-rhino/intro-to-rhino/","text":"Introduction to Rhino Download & Install Rhino Download for macOS - Free for 90 days. Purchase: $95 Education License from CU Bookstore. Rhinoceros will be in your Applications folder after install. The Basics Objective: Become familiar with the Rhino interface and workflow in order to create 3d models. Interface Understanding the User Interface Viewports (Top, Left, Right, Perspective) Coordinates (X, Y, Z). X = Red, Y = Green, Z = Blue Windows (Multiple Windows Open == Multiple Files Open) Render Modes (Wireframe, Ghosted, etc) Toolbars (macOS) Left Sidebar - Command Line, Osnaps Right Sidebar - Layers Buttons = Commands. Almost all buttons are tied to a command you can type in. Menus / Sub-Menus (Little triangle on a button) The Command Line (Top Left) - Just type something...anything. See what happens! ESC to exit command. Repeat last command with Right Mouse Button > Repeat Command. Movement (Zoom (Two-finger pinch), ZS , Pan (Right mouse click), Orbit, Gumball) macOS Tip: Turn off two-finger mouse zooming (but allow pinch zooming) by unchecking \"Enable magic mouse gestures\" under Rhino > Preferences > Mouse > Magic Mouse. Hiding / Showing objects (Light Bulb on Layers; Hide / Show Commands) Units - Changing Units, Grid (File > Settings > Units) The Grid (File > Settings > Grid to change), Osnaps (Snapping options on bottom half of left sidebar) Working with Layers (Right Sidebar) Layer Name Colors (RGB) Hide/ Show(Light Bulb) Active Layer (Radio Button) - This determines where you are creating new geometry. Other Panels - Object Properties, Display Properties, etc Geometry Drawing Geometry 2D Geometry - Curves, Surfaces, Polycurves, Text 3D Geometry - Surfaces, Polysurfaces, Solids Isocurves - \"Hidden\" curves located on / making up surfaces. Object Details (Selection) - See information about a selected object in the lower right sidebar. NURBS (Non-uniform rational B-spline) vs Mesh Turn On/Off points on curve with PointsOn and PointsOff or F10 key. Transform Commands Copy Move Scale Rotate Manipulate Geometry Explode , Join Join vs Group Trim Selection - SelCrv , SelSrf , SelPts Loft Pipe File Input / Output File types: 3DM, STL, OBJ, EPS, DXF How should you export a file for fabrication? STL or OBJ - 3D Printing, CNC Milling DXF, AI, EPS - Laser Cutting Additional Commands There are many commands available in Rhino. Above and below are just a few of the most used commands. Check out the Rhino 6 Command List and Rhino 6 for Windows commands not in Rhino 6 for Mac to learn more. PictureFrame Contour MeshtoNURB Distance Dim Boolean commands Hide / Show Offset DupBorder ExtractWireframe Text TextObject SelDup ExtrudeSrf Make2D Intro to Rhino Example This example can be found in the cm-design/rhino/intro-to-rhino folder. Download the repo as a zip and locate the intro-to-rhino.3dm file. We will work through this together. Generator or \"Factory\" Examples Produce variations of a 3d model from a \"generator\" or \"factory\". This means to work iteratively to explore a form making process where the designer changes features of the system to produce a family of different results. This process takes advantage of the History command to associate recorded parameters to each other, which is a characteristic of Parametric Modeling as done naturally in Fusion 360 and further enabled through Grasshopper. The following examples are in the cm-design/rhino folder. Example 1: Parametric Loft Generator Draw two circles and a hexagon on the Top viewport Goto Perspective and move one circle up and the hexagon into the space between the circles. Turn on History (Top tool bar) Loft between the 3 curves starting from the bottom Turn off History Manipulate the curves to produce different results. When you change a curve you should see the resulting Lofted form change. Make a copy of the lofted form to the right. Repeat until you have several forms Example 2: Parametric Revolve Generator Draw an interpolated or straight profile curve in the ZX plane in the Front viewport. Goto Perspective and select the curve. Turn on History (Top tool bar) Revolve a full 360 deg around the center axis (Z Up direction) with the curve. This will produce a 3d form. Turn off History Manipulate the control points from the single profile curve to produce different results. To do this, turn on control points with PointsOn (F10) and click to drag. The Gumball feature helps to move objects in a scene. When you change the curve you should see the resulting Revolved form change. Make a copy of the revolved form to the right. Repeat until you have several forms Example 3: Parametric Pipe Generator Draw a curve in the Front viewport. Goto Perspective and manipulate the curve using control points (PointsOn). Turn on History (Top tool bar) Pipe along the curve, setting different radii along the length of the curve. Turn off History Manipulate the curves to produce different results. When you change a curve you should see the resulting Pipe form change. Make a copy of the form to the right. Repeat until you have several forms Example 4: Parametric Surface Generator Draw a curve on the XY plane seen from the Top viewport Goto Perspective viewport and select curve, use PlanarSrf to create a surface. Select the surface and enter Rebuild. Use a U and V division of 10 for each. This will create a dense grid of points on the surface, increasing the number of isocurves. History is enabled by default with this type of surface. Manipulate the control points (PointsOn) to make new forms. Make a copy of the form to the right. Repeat until you have several forms Student Examples Pumpkin Patch by Karen McClellan One WTC 3D Print by Jonas Escobedo Perfume Bottle by Hanshu Zhou Lipstick by Sarah Cohen Chocolates by Diamond Alexander","title":"Intro to Rhino Workshop"},{"location":"des/learning-rhino/intro-to-rhino/#introduction-to-rhino","text":"","title":"Introduction to Rhino"},{"location":"des/learning-rhino/intro-to-rhino/#download-install","text":"Rhino Download for macOS - Free for 90 days. Purchase: $95 Education License from CU Bookstore. Rhinoceros will be in your Applications folder after install.","title":"Download &amp; Install"},{"location":"des/learning-rhino/intro-to-rhino/#the-basics","text":"Objective: Become familiar with the Rhino interface and workflow in order to create 3d models.","title":"The Basics"},{"location":"des/learning-rhino/intro-to-rhino/#interface","text":"Understanding the User Interface Viewports (Top, Left, Right, Perspective) Coordinates (X, Y, Z). X = Red, Y = Green, Z = Blue Windows (Multiple Windows Open == Multiple Files Open) Render Modes (Wireframe, Ghosted, etc) Toolbars (macOS) Left Sidebar - Command Line, Osnaps Right Sidebar - Layers Buttons = Commands. Almost all buttons are tied to a command you can type in. Menus / Sub-Menus (Little triangle on a button) The Command Line (Top Left) - Just type something...anything. See what happens! ESC to exit command. Repeat last command with Right Mouse Button > Repeat Command. Movement (Zoom (Two-finger pinch), ZS , Pan (Right mouse click), Orbit, Gumball) macOS Tip: Turn off two-finger mouse zooming (but allow pinch zooming) by unchecking \"Enable magic mouse gestures\" under Rhino > Preferences > Mouse > Magic Mouse. Hiding / Showing objects (Light Bulb on Layers; Hide / Show Commands) Units - Changing Units, Grid (File > Settings > Units) The Grid (File > Settings > Grid to change), Osnaps (Snapping options on bottom half of left sidebar) Working with Layers (Right Sidebar) Layer Name Colors (RGB) Hide/ Show(Light Bulb) Active Layer (Radio Button) - This determines where you are creating new geometry. Other Panels - Object Properties, Display Properties, etc","title":"Interface"},{"location":"des/learning-rhino/intro-to-rhino/#geometry","text":"Drawing Geometry 2D Geometry - Curves, Surfaces, Polycurves, Text 3D Geometry - Surfaces, Polysurfaces, Solids Isocurves - \"Hidden\" curves located on / making up surfaces. Object Details (Selection) - See information about a selected object in the lower right sidebar. NURBS (Non-uniform rational B-spline) vs Mesh Turn On/Off points on curve with PointsOn and PointsOff or F10 key. Transform Commands Copy Move Scale Rotate Manipulate Geometry Explode , Join Join vs Group Trim Selection - SelCrv , SelSrf , SelPts Loft Pipe","title":"Geometry"},{"location":"des/learning-rhino/intro-to-rhino/#file-input-output","text":"File types: 3DM, STL, OBJ, EPS, DXF How should you export a file for fabrication? STL or OBJ - 3D Printing, CNC Milling DXF, AI, EPS - Laser Cutting","title":"File Input / Output"},{"location":"des/learning-rhino/intro-to-rhino/#additional-commands","text":"There are many commands available in Rhino. Above and below are just a few of the most used commands. Check out the Rhino 6 Command List and Rhino 6 for Windows commands not in Rhino 6 for Mac to learn more. PictureFrame Contour MeshtoNURB Distance Dim Boolean commands Hide / Show Offset DupBorder ExtractWireframe Text TextObject SelDup ExtrudeSrf Make2D","title":"Additional Commands"},{"location":"des/learning-rhino/intro-to-rhino/#intro-to-rhino-example","text":"This example can be found in the cm-design/rhino/intro-to-rhino folder. Download the repo as a zip and locate the intro-to-rhino.3dm file. We will work through this together.","title":"Intro to Rhino Example"},{"location":"des/learning-rhino/intro-to-rhino/#generator-or-factory-examples","text":"Produce variations of a 3d model from a \"generator\" or \"factory\". This means to work iteratively to explore a form making process where the designer changes features of the system to produce a family of different results. This process takes advantage of the History command to associate recorded parameters to each other, which is a characteristic of Parametric Modeling as done naturally in Fusion 360 and further enabled through Grasshopper. The following examples are in the cm-design/rhino folder.","title":"Generator or \"Factory\" Examples"},{"location":"des/learning-rhino/intro-to-rhino/#example-1-parametric-loft-generator","text":"Draw two circles and a hexagon on the Top viewport Goto Perspective and move one circle up and the hexagon into the space between the circles. Turn on History (Top tool bar) Loft between the 3 curves starting from the bottom Turn off History Manipulate the curves to produce different results. When you change a curve you should see the resulting Lofted form change. Make a copy of the lofted form to the right. Repeat until you have several forms","title":"Example 1: Parametric Loft Generator"},{"location":"des/learning-rhino/intro-to-rhino/#example-2-parametric-revolve-generator","text":"Draw an interpolated or straight profile curve in the ZX plane in the Front viewport. Goto Perspective and select the curve. Turn on History (Top tool bar) Revolve a full 360 deg around the center axis (Z Up direction) with the curve. This will produce a 3d form. Turn off History Manipulate the control points from the single profile curve to produce different results. To do this, turn on control points with PointsOn (F10) and click to drag. The Gumball feature helps to move objects in a scene. When you change the curve you should see the resulting Revolved form change. Make a copy of the revolved form to the right. Repeat until you have several forms","title":"Example 2: Parametric Revolve Generator"},{"location":"des/learning-rhino/intro-to-rhino/#example-3-parametric-pipe-generator","text":"Draw a curve in the Front viewport. Goto Perspective and manipulate the curve using control points (PointsOn). Turn on History (Top tool bar) Pipe along the curve, setting different radii along the length of the curve. Turn off History Manipulate the curves to produce different results. When you change a curve you should see the resulting Pipe form change. Make a copy of the form to the right. Repeat until you have several forms","title":"Example 3: Parametric Pipe Generator"},{"location":"des/learning-rhino/intro-to-rhino/#example-4-parametric-surface-generator","text":"Draw a curve on the XY plane seen from the Top viewport Goto Perspective viewport and select curve, use PlanarSrf to create a surface. Select the surface and enter Rebuild. Use a U and V division of 10 for each. This will create a dense grid of points on the surface, increasing the number of isocurves. History is enabled by default with this type of surface. Manipulate the control points (PointsOn) to make new forms. Make a copy of the form to the right. Repeat until you have several forms","title":"Example 4: Parametric Surface Generator"},{"location":"des/learning-rhino/intro-to-rhino/#student-examples","text":"Pumpkin Patch by Karen McClellan One WTC 3D Print by Jonas Escobedo Perfume Bottle by Hanshu Zhou Lipstick by Sarah Cohen Chocolates by Diamond Alexander","title":"Student Examples"},{"location":"dev/","text":"Text Editors / IDEs Atom - ( Atom Flight Manual , Packages , My Setup ) Text Wrangler vi , vim , emacs JEdit Eclipse Visual Studio Express XCode Sublime Text Brackets Jetbrains Geany Netbeans IDE TextEdit (MacOS) Notepad (Win) Visual Studio Code Systems Apple MacOS Windows 10 Ubuntu Unix , Unix Tutorial for Beginners , Unix History VirtualBox Browsers Chrome , Chrome Dev Tools Firefox , Firebug Safari Terminals MacOS Terminal , MacOS/Linux/Unix Command Line Cheat Sheet iTerm 2 Powershell (Win) Localhost These are common LAMP stack based environments for local web development. localhost Setting up a local web server on a Mac XAMPP How do I install XAMPP for Mac OS X? MAMP Bitnami Website Copiers HTTRACK Static Site Generators / Documentation StaticGen - Top Open-Source Static Site Generators mkdocs , Material Theme Gitbook Pandoc Metalsmith Jekyll Hugo Web Languages I HyperText Markup Language (HTML) HTML (Mozilla) Google Web Fundamentals HTML Tutorial HTMLDog - HTML Beginner Tutorial HTMLDog - HTML Intermediate Tutorial HTML Validator Dive into HTML5 Cascading Style Sheets (CSS) CSS (Mozilla) CSS Intro CSS Tutorial CSS-Tricks CSS Basics HTMLDog - CSS Beginner Tutorial HTMLDog - CSS Intermediate Tutorial JavaScript (JS) JavaScript (Mozilla) Mozilla Guide Javascript.com W3C Javascript Tutorial Eloquent Javascript (Book) W3C JSON Tutorial Web Languages II Markdown Markdown Markdown Docs Markdown Cheatsheet Canvas , 31 Days of Canvas tutorials WebGL , Does my browser support WebGL? , WebGL Report Web Protocols Hypertext Transfer Protocol (HTTP) File Transfer Protocol (FTP) Secure Shell (SSH) Programming Languages Python , Anaconda Ruby , RVM Java , C/C++ .NET Swift Coding Standards Tools that can help you make your own style guides Airbnb Javascript Style Guide Isobar Front-end Code Standards Google Style Guides - All languages Google Web Development Mozilla Developer Guide - Coding Style Frameworks and Libraries jQuery jQuery Mobile node.js , npm , nvm . ( Beginner Tutorial , Felix's Node.js Beginners Guide ) React Awesome React Components React Native , Use React Native , Nuclide (Atom Package) Express - For Node.js MongoDB Angular Mobile Angular UI Vue Omniscient Riot Backbone.js Aurelia Ember Meteor Rails - Uses Ruby language Masonry.js Moment.js - Parse, validate, manipulate, and display dates and times Search Engines Javascripting TodoMVC General-Purpose Task Runners Gulp - Automated task runner Getting started with gulp - Good overview of the tool. An Introduction to Gulp.js - This is a nice little primer explaining how it works and how it is different from Grunt. Gulp Recipes Grunt - JavaScript Task Runner. Older than Gulp. npm - Part of Node.js Dependency Management Bower - Package Manager Yarn - Package Manager for JS Yarn: A new package manager for JavaScript Module Bundlers Browserify Intro to browserify budo Webpack - Asset bundler Webpack or Browserify & Gulp: Which Is Better? Beginner\u2019s guide to Webpack RequireJS Linting Github Collection of Clean Code Linters ESLint JSHint - JS error checking JSLint Test Frameworks Mocha Jasmine QUnit Compilers and Extensions CoffeeScript - Simplified Javascript LiveScript TypeScript Babel - Javascript compiler. Commonly used for JSX. Getting started with Babel Getting Started With ES6 and Babel SASS - CSS Extension LESS - CSS Pre-Processor CSS Preprocessors \u2013 Sass vs LESS Web App Framework / Workflow Yeoman Lineman Sandboxes Examples of Sandbox-like / Code Sharing Environments Codepen - HTML, CSS, JS JSFiddle - HTML, CSS, JS Scratchpad (HTML/JS) JS2Coffee - JS, Coffeescript CodeSandbox - React, Angular, Vue, Preact, Svelte JSBin - JS Pastebin Javascript Sandbox - JS Kixx Demos CSS Desk - CSS Mobile App Prototyping Adobe PhoneGap Ionic Framework Template Engines Mustache Handlebars Underscore Pug - Formerly Jade Embedded JS (EJS) Transparency - For jQuery Dust doT - For Node.js Template 7 Documentation Generation mkdocs , Material Theme Docusaurus Gitbook Pandoc ESDoc Transcription documentation.js YUIDoc JSDoc Various Web Tools Spritecow - For working with sprites Create CSS3 - CSS generator Travis CI Electron - Desktop App Build Systems Modernizr - JS that tells you what HTML, CSS, and JS features a brower as. API Development Sandbox Postman - API Development okta RunKit APIs (Application Programming Interfaces) Working with data from APIs such as Instagram, Slack, etc What is an API? Postman - A great tool for working with APIs HTTP: The Protocol Every Web Developer Must Know RESTful Web Services RESTful What is RESTful programming? RESTful Web Services: A Tutorial Ports List of Common Ports List of TCP and UDP port numbers Development News Tutorialzine Glitch Techstacks Stackshare - Tech Stacks - The open source tools and SaaS behind the world's best startups. ie AirBnb, FB, Uber, etc The Book of Secret Knowledge - A collection of awesome lists, manuals, blogs, hacks, one-liners, cli/web tools and more. Especially for System and Network Administrators, DevOps, Pentesters or Security Researchers. Front-End Case Studies - A great collection of case studies about front-end development tools and practices across industry. Front-End Developer Handbook 2019 - A deep dive into front-end dev tools and workflows.","title":"Tools"},{"location":"dev/#text-editors-ides","text":"Atom - ( Atom Flight Manual , Packages , My Setup ) Text Wrangler vi , vim , emacs JEdit Eclipse Visual Studio Express XCode Sublime Text Brackets Jetbrains Geany Netbeans IDE TextEdit (MacOS) Notepad (Win) Visual Studio Code","title":"Text Editors / IDEs"},{"location":"dev/#systems","text":"Apple MacOS Windows 10 Ubuntu Unix , Unix Tutorial for Beginners , Unix History VirtualBox","title":"Systems"},{"location":"dev/#browsers","text":"Chrome , Chrome Dev Tools Firefox , Firebug Safari","title":"Browsers"},{"location":"dev/#terminals","text":"MacOS Terminal , MacOS/Linux/Unix Command Line Cheat Sheet iTerm 2 Powershell (Win)","title":"Terminals"},{"location":"dev/#localhost","text":"These are common LAMP stack based environments for local web development. localhost Setting up a local web server on a Mac XAMPP How do I install XAMPP for Mac OS X? MAMP Bitnami","title":"Localhost"},{"location":"dev/#website-copiers","text":"HTTRACK","title":"Website Copiers"},{"location":"dev/#static-site-generators-documentation","text":"StaticGen - Top Open-Source Static Site Generators mkdocs , Material Theme Gitbook Pandoc Metalsmith Jekyll Hugo","title":"Static Site Generators / Documentation"},{"location":"dev/#web-languages-i","text":"","title":"Web Languages I"},{"location":"dev/#hypertext-markup-language-html","text":"HTML (Mozilla) Google Web Fundamentals HTML Tutorial HTMLDog - HTML Beginner Tutorial HTMLDog - HTML Intermediate Tutorial HTML Validator Dive into HTML5","title":"HyperText Markup Language (HTML)"},{"location":"dev/#cascading-style-sheets-css","text":"CSS (Mozilla) CSS Intro CSS Tutorial CSS-Tricks CSS Basics HTMLDog - CSS Beginner Tutorial HTMLDog - CSS Intermediate Tutorial","title":"Cascading Style Sheets (CSS)"},{"location":"dev/#javascript-js","text":"JavaScript (Mozilla) Mozilla Guide Javascript.com W3C Javascript Tutorial Eloquent Javascript (Book) W3C JSON Tutorial","title":"JavaScript (JS)"},{"location":"dev/#web-languages-ii","text":"Markdown Markdown Markdown Docs Markdown Cheatsheet Canvas , 31 Days of Canvas tutorials WebGL , Does my browser support WebGL? , WebGL Report","title":"Web Languages II"},{"location":"dev/#web-protocols","text":"Hypertext Transfer Protocol (HTTP) File Transfer Protocol (FTP) Secure Shell (SSH)","title":"Web Protocols"},{"location":"dev/#programming-languages","text":"Python , Anaconda Ruby , RVM Java , C/C++ .NET Swift","title":"Programming Languages"},{"location":"dev/#coding-standards","text":"Tools that can help you make your own style guides Airbnb Javascript Style Guide Isobar Front-end Code Standards Google Style Guides - All languages Google Web Development Mozilla Developer Guide - Coding Style","title":"Coding Standards"},{"location":"dev/#frameworks-and-libraries","text":"jQuery jQuery Mobile node.js , npm , nvm . ( Beginner Tutorial , Felix's Node.js Beginners Guide ) React Awesome React Components React Native , Use React Native , Nuclide (Atom Package) Express - For Node.js MongoDB Angular Mobile Angular UI Vue Omniscient Riot Backbone.js Aurelia Ember Meteor Rails - Uses Ruby language Masonry.js Moment.js - Parse, validate, manipulate, and display dates and times","title":"Frameworks and Libraries"},{"location":"dev/#search-engines","text":"Javascripting TodoMVC","title":"Search Engines"},{"location":"dev/#general-purpose-task-runners","text":"Gulp - Automated task runner Getting started with gulp - Good overview of the tool. An Introduction to Gulp.js - This is a nice little primer explaining how it works and how it is different from Grunt. Gulp Recipes Grunt - JavaScript Task Runner. Older than Gulp. npm - Part of Node.js","title":"General-Purpose Task Runners"},{"location":"dev/#dependency-management","text":"Bower - Package Manager Yarn - Package Manager for JS Yarn: A new package manager for JavaScript","title":"Dependency Management"},{"location":"dev/#module-bundlers","text":"Browserify Intro to browserify budo Webpack - Asset bundler Webpack or Browserify & Gulp: Which Is Better? Beginner\u2019s guide to Webpack RequireJS","title":"Module Bundlers"},{"location":"dev/#linting","text":"Github Collection of Clean Code Linters ESLint JSHint - JS error checking JSLint","title":"Linting"},{"location":"dev/#test-frameworks","text":"Mocha Jasmine QUnit","title":"Test Frameworks"},{"location":"dev/#compilers-and-extensions","text":"CoffeeScript - Simplified Javascript LiveScript TypeScript Babel - Javascript compiler. Commonly used for JSX. Getting started with Babel Getting Started With ES6 and Babel SASS - CSS Extension LESS - CSS Pre-Processor CSS Preprocessors \u2013 Sass vs LESS","title":"Compilers and Extensions"},{"location":"dev/#web-app-framework-workflow","text":"Yeoman Lineman","title":"Web App Framework / Workflow"},{"location":"dev/#sandboxes","text":"Examples of Sandbox-like / Code Sharing Environments Codepen - HTML, CSS, JS JSFiddle - HTML, CSS, JS Scratchpad (HTML/JS) JS2Coffee - JS, Coffeescript CodeSandbox - React, Angular, Vue, Preact, Svelte JSBin - JS Pastebin Javascript Sandbox - JS Kixx Demos CSS Desk - CSS","title":"Sandboxes"},{"location":"dev/#mobile-app-prototyping","text":"Adobe PhoneGap Ionic Framework","title":"Mobile App Prototyping"},{"location":"dev/#template-engines","text":"Mustache Handlebars Underscore Pug - Formerly Jade Embedded JS (EJS) Transparency - For jQuery Dust doT - For Node.js Template 7","title":"Template Engines"},{"location":"dev/#documentation-generation","text":"mkdocs , Material Theme Docusaurus Gitbook Pandoc ESDoc Transcription documentation.js YUIDoc JSDoc","title":"Documentation Generation"},{"location":"dev/#various-web-tools","text":"Spritecow - For working with sprites Create CSS3 - CSS generator Travis CI Electron - Desktop App Build Systems Modernizr - JS that tells you what HTML, CSS, and JS features a brower as.","title":"Various Web Tools"},{"location":"dev/#api-development","text":"Sandbox Postman - API Development okta RunKit APIs (Application Programming Interfaces) Working with data from APIs such as Instagram, Slack, etc What is an API? Postman - A great tool for working with APIs HTTP: The Protocol Every Web Developer Must Know RESTful Web Services RESTful What is RESTful programming? RESTful Web Services: A Tutorial","title":"API Development"},{"location":"dev/#ports","text":"List of Common Ports List of TCP and UDP port numbers","title":"Ports"},{"location":"dev/#development-news","text":"Tutorialzine Glitch","title":"Development News"},{"location":"dev/#techstacks","text":"Stackshare - Tech Stacks - The open source tools and SaaS behind the world's best startups. ie AirBnb, FB, Uber, etc The Book of Secret Knowledge - A collection of awesome lists, manuals, blogs, hacks, one-liners, cli/web tools and more. Especially for System and Network Administrators, DevOps, Pentesters or Security Researchers. Front-End Case Studies - A great collection of case studies about front-end development tools and practices across industry. Front-End Developer Handbook 2019 - A deep dive into front-end dev tools and workflows.","title":"Techstacks"},{"location":"dev/histories/","text":"History of the Electronics and Computers Awesome Computer History - A Github based Awesome list Computer History Museum Exhibition Digital Logic The Web As We May Think by Vannevar Bush (1945) / Brainpickings Summary The Mother of all Demos, presented by Douglas Engelbart (1968) / Wikipedia The Idea Factory: Bell Labs and the Great Age of American Innovation by Jon Gertner The Innovators: How a Group of Hackers, Geniuses, and Geeks Created the Digital Revolution by Walter Isaacson Command Line Heroes (Podcast) - Great podcast covering all sorts of historical moments in computing technology. History of the Internet Internet Basics - A great reference of fundamental terminology and technology powering the Internet. Computer History Museum: Internet History 1962 to 1992 Brief History of the Internet A Brief Guide to the History of the Internet w/ Timeline The History of the Web The True Story of the Internet: Browser Wars What\u2019s difference between The Internet and The Web ? Run the Very First Web Browser from 1990, WorldWideWeb History of Web Languages A History of HTML A Brief History of CSS until 2016 A Brief History of JavaScript How browsers work: Behind the scenes of modern web browsers History of Operating Systems History of Linux History of MacOS History of Windows History of Programming and Code What is Code? History of Computer Programming (Graphic) History of Programming Languages History of Computer Languages - The Classical Decade, 1950s Casey Reas on Coding: You need to be Able to Read and Write History of Scripting The Rise of Scripting Languages by John Ousterhout (March 1998)","title":"Histories"},{"location":"dev/histories/#history-of-the-electronics-and-computers","text":"Awesome Computer History - A Github based Awesome list Computer History Museum Exhibition Digital Logic The Web As We May Think by Vannevar Bush (1945) / Brainpickings Summary The Mother of all Demos, presented by Douglas Engelbart (1968) / Wikipedia The Idea Factory: Bell Labs and the Great Age of American Innovation by Jon Gertner The Innovators: How a Group of Hackers, Geniuses, and Geeks Created the Digital Revolution by Walter Isaacson Command Line Heroes (Podcast) - Great podcast covering all sorts of historical moments in computing technology.","title":"History of the Electronics and Computers"},{"location":"dev/histories/#history-of-the-internet","text":"Internet Basics - A great reference of fundamental terminology and technology powering the Internet. Computer History Museum: Internet History 1962 to 1992 Brief History of the Internet A Brief Guide to the History of the Internet w/ Timeline The History of the Web The True Story of the Internet: Browser Wars What\u2019s difference between The Internet and The Web ? Run the Very First Web Browser from 1990, WorldWideWeb","title":"History of the Internet"},{"location":"dev/histories/#history-of-web-languages","text":"A History of HTML A Brief History of CSS until 2016 A Brief History of JavaScript How browsers work: Behind the scenes of modern web browsers","title":"History of Web Languages"},{"location":"dev/histories/#history-of-operating-systems","text":"History of Linux History of MacOS History of Windows","title":"History of Operating Systems"},{"location":"dev/histories/#history-of-programming-and-code","text":"What is Code? History of Computer Programming (Graphic) History of Programming Languages History of Computer Languages - The Classical Decade, 1950s Casey Reas on Coding: You need to be Able to Read and Write","title":"History of Programming and Code"},{"location":"dev/histories/#history-of-scripting","text":"The Rise of Scripting Languages by John Ousterhout (March 1998)","title":"History of Scripting"},{"location":"dev/learning-git/","text":"This section contains resources for learning how to use the Git version control system. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner How to setup a global ignore file to ignore system files like .DS_Store (macOS). The alternative is to specify ignored files in .gitignore for a local repository. Create ignore file with .DS_Store in it. echo .DS_Store >> ~/.gitignore_global Configure git to use the ignore file. git config --global core.excludesfile ~/.gitignore_global Git & GitHub Github Tutorial (10 mins) - Non command line (Terminal) tutorial. Git - The Simple Guide - Command line based tutorial. Connecting to Github with SSH Git & Github Tutorial on Udacity - Command line based tutorial. Start a new git repository git/github guide a minimal tutorial The most important git commands Git Immersion - Advanced Tutorial. Work through this once you get the hang of working on the command line. Command Line Cheat Sheet by git-tower - This one is great! Version Control Workflow Cheat Sheet for Git (git0tower) .gitignore generator - Utility to generate gitignore files Markdown Mastering Markdown Markdown Docs Markdown Cheatsheet How to write a great README for your GitHub project - These are only examples. Not all projects need every detail in the readme as described. The contents of a readme really depend on the type of project and audience. In general, its good to enable someone else to download and run your code if you are sharing it to Github. Awesome README - A massive list of README examples and resources.","title":"Learning Git"},{"location":"dev/learning-git/#beginner","text":"How to setup a global ignore file to ignore system files like .DS_Store (macOS). The alternative is to specify ignored files in .gitignore for a local repository. Create ignore file with .DS_Store in it. echo .DS_Store >> ~/.gitignore_global Configure git to use the ignore file. git config --global core.excludesfile ~/.gitignore_global","title":"Beginner"},{"location":"dev/learning-git/#git-github","text":"Github Tutorial (10 mins) - Non command line (Terminal) tutorial. Git - The Simple Guide - Command line based tutorial. Connecting to Github with SSH Git & Github Tutorial on Udacity - Command line based tutorial. Start a new git repository git/github guide a minimal tutorial The most important git commands Git Immersion - Advanced Tutorial. Work through this once you get the hang of working on the command line. Command Line Cheat Sheet by git-tower - This one is great! Version Control Workflow Cheat Sheet for Git (git0tower) .gitignore generator - Utility to generate gitignore files","title":"Git &amp; GitHub"},{"location":"dev/learning-git/#markdown","text":"Mastering Markdown Markdown Docs Markdown Cheatsheet How to write a great README for your GitHub project - These are only examples. Not all projects need every detail in the readme as described. The contents of a readme really depend on the type of project and audience. In general, its good to enable someone else to download and run your code if you are sharing it to Github. Awesome README - A massive list of README examples and resources.","title":"Markdown"},{"location":"dev/learning-html-css/","text":"This section contains resources for learning HTML & CSS. The two languages are so interrelated it only makes sense to learn them in parallel. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner A beginning HTML and CSS programmer is someone that is new to both languages and possibly programming. This set of resources spans learning what each language is, how they work together, and the basics of more front-end design oriented topics such as fluid design, responsive design, and mobile design. HTML There is no shortcut to learning HTML or CSS. The best teacher is practice and application. Make things, break things, and analyze why certain HTML tags or CSS selectors work (or don't). Make use of a live server type environment to speed up your development workflow. Language HTML (Mozilla) Google Web Fundamentals Why Use Semantic HTML? - Important read about which elements are considered essential for writing semantic HTML. Document Meta Data The HTML Element HEAD - A list of everything that could go in the head of your document Tutorials HTML Tutorial HTMLDog - HTML Beginner Tutorial HTMLDog - HTML Intermediate Tutorial freeCodeCamp learn - A great set of tutorials for covering all aspects of web development from beginner to pro. Tools HTML Validator CSS Language CSS (Mozilla) CSS Intro CSS-Tricks CSS Basics Tutorials CSS Tutorial HTMLDog - CSS Beginner Tutorial HTMLDog - CSS Intermediate Tutorial Tools CSS Validator Intermediate An intermediate HTML and CSS programmer is someone that is familiar with both languages and can build simple pages and functional websites based off mockups or wireframes. CSS Units W3 CSS Units CSS values and units Web Style Sheets CSS tips & tricks Your Ultimate Guide to CSS Units \u2013 All You Need to Know CSS Units Best Practices The quick guide to CSS length units Resets & Boilerplates CSS Normalize & Resets Reboot, Resets, and Reasoning Normalize.css Treehouse Quick Tips: Applying Normalize.css Browser Reset CSS About normalize.css CSS Tools: Reset What is the difference between Normalize.css and Reset CSS? Boilerplates HTML5 Boilerplate Positioning & Layout Box Model Introduction to the CSS basic box model Box model recap CSS Box Model Sandbox Positioning CSS Positioning in Ten Steps CSS Positioning 101 Layouts, Grids, Flexbox A Complete Guide to Grid Interactive Grid Cheat Sheet A Complete Guide to Flexbox Interactive Flex Cheat Sheet CSS Grid\u200a\u2014\u200aa simple layout design tutorial - Great intro to CSS Grid. Part of another great resource: The CSS Visual Dictionary . This gives great visual examples of CSS in use. The Author ( JavaScript Teacher ) of these works has tons of other useful articles on Medium. Media Queries Using media queries Responsive web design Media Queries for Standard Devices Media Queries Demystified: CSS Min-Width and Max-Width Tools CSS Media Queries - Great tool for inspecting which media queries apply to your current device Simple CSS Media Queries - Tool for generating media queries for devices Test Responsive and Device Specific Viewports in Google Chrome Preprocessors SASS (SCSS) LESS - Less (aka Leaner Style Sheets) is a dynamic preprocessor style sheet language that can be compiled into Cascading Style Sheets and run on the client side or server side. Intro to CSS Preprocessors Organization Methods to Organize CSS Accessibility \u2014 Make the web usable by everyone Accessible Rich Internet Applications (ARIA) Advanced An advanced HTML and CSS programmer is someone that is an expert with both languages and can architect nearly any possible website for any possible platform. CSS CSS Specificity Hierarchy What is CSS specificity hierarchy W3: Calculating a selector's specificity CSS Specificity Calculator - Really useful! CSS Ninja CSS Best Practices \u2013 14 Steps to Become a CSS Ninja Pt1 CSS Best Practices \u2013 14 Steps to Become a CSS Ninja Pt2 CSS Methologies BEM \u2013 meaning block, element, modifier \u2013 is a front-end naming methodology thought up by the guys at Yandex. It is a smart way of naming your CSS classes to give them more transparency and meaning to other developers. MindBEMding \u2013 getting your head \u2019round BEM syntax BEMIT: Taking the BEM Naming Convention a Step Further Other Handbooks, Guides, Interview Questions Front-End Interview Handbook Back-End Developer Interview Questions Tech Interview Handbook Code Guide by @mdo - A guide by the author of Bootstrap. Front-End Frameworks Foundation Shoelace - Like bootstrap but smaller","title":"Learning HTML & CSS"},{"location":"dev/learning-html-css/#beginner","text":"A beginning HTML and CSS programmer is someone that is new to both languages and possibly programming. This set of resources spans learning what each language is, how they work together, and the basics of more front-end design oriented topics such as fluid design, responsive design, and mobile design.","title":"Beginner"},{"location":"dev/learning-html-css/#html","text":"There is no shortcut to learning HTML or CSS. The best teacher is practice and application. Make things, break things, and analyze why certain HTML tags or CSS selectors work (or don't). Make use of a live server type environment to speed up your development workflow.","title":"HTML"},{"location":"dev/learning-html-css/#language","text":"HTML (Mozilla) Google Web Fundamentals Why Use Semantic HTML? - Important read about which elements are considered essential for writing semantic HTML.","title":"Language"},{"location":"dev/learning-html-css/#document-meta-data","text":"The HTML Element HEAD - A list of everything that could go in the head of your document","title":"Document Meta Data"},{"location":"dev/learning-html-css/#tutorials","text":"HTML Tutorial HTMLDog - HTML Beginner Tutorial HTMLDog - HTML Intermediate Tutorial freeCodeCamp learn - A great set of tutorials for covering all aspects of web development from beginner to pro.","title":"Tutorials"},{"location":"dev/learning-html-css/#tools","text":"HTML Validator","title":"Tools"},{"location":"dev/learning-html-css/#css","text":"","title":"CSS"},{"location":"dev/learning-html-css/#language_1","text":"CSS (Mozilla) CSS Intro CSS-Tricks CSS Basics","title":"Language"},{"location":"dev/learning-html-css/#tutorials_1","text":"CSS Tutorial HTMLDog - CSS Beginner Tutorial HTMLDog - CSS Intermediate Tutorial","title":"Tutorials"},{"location":"dev/learning-html-css/#tools_1","text":"CSS Validator","title":"Tools"},{"location":"dev/learning-html-css/#intermediate","text":"An intermediate HTML and CSS programmer is someone that is familiar with both languages and can build simple pages and functional websites based off mockups or wireframes.","title":"Intermediate"},{"location":"dev/learning-html-css/#css-units","text":"W3 CSS Units CSS values and units Web Style Sheets CSS tips & tricks Your Ultimate Guide to CSS Units \u2013 All You Need to Know CSS Units Best Practices The quick guide to CSS length units","title":"CSS Units"},{"location":"dev/learning-html-css/#resets-boilerplates","text":"","title":"Resets &amp; Boilerplates"},{"location":"dev/learning-html-css/#css-normalize-resets","text":"Reboot, Resets, and Reasoning Normalize.css Treehouse Quick Tips: Applying Normalize.css Browser Reset CSS About normalize.css CSS Tools: Reset What is the difference between Normalize.css and Reset CSS?","title":"CSS Normalize &amp; Resets"},{"location":"dev/learning-html-css/#boilerplates","text":"HTML5 Boilerplate","title":"Boilerplates"},{"location":"dev/learning-html-css/#positioning-layout","text":"","title":"Positioning &amp; Layout"},{"location":"dev/learning-html-css/#box-model","text":"Introduction to the CSS basic box model Box model recap CSS Box Model Sandbox","title":"Box Model"},{"location":"dev/learning-html-css/#positioning","text":"CSS Positioning in Ten Steps CSS Positioning 101","title":"Positioning"},{"location":"dev/learning-html-css/#layouts-grids-flexbox","text":"A Complete Guide to Grid Interactive Grid Cheat Sheet A Complete Guide to Flexbox Interactive Flex Cheat Sheet CSS Grid\u200a\u2014\u200aa simple layout design tutorial - Great intro to CSS Grid. Part of another great resource: The CSS Visual Dictionary . This gives great visual examples of CSS in use. The Author ( JavaScript Teacher ) of these works has tons of other useful articles on Medium.","title":"Layouts, Grids, Flexbox"},{"location":"dev/learning-html-css/#media-queries","text":"Using media queries Responsive web design Media Queries for Standard Devices Media Queries Demystified: CSS Min-Width and Max-Width","title":"Media Queries"},{"location":"dev/learning-html-css/#tools_2","text":"CSS Media Queries - Great tool for inspecting which media queries apply to your current device Simple CSS Media Queries - Tool for generating media queries for devices Test Responsive and Device Specific Viewports in Google Chrome","title":"Tools"},{"location":"dev/learning-html-css/#preprocessors","text":"SASS (SCSS) LESS - Less (aka Leaner Style Sheets) is a dynamic preprocessor style sheet language that can be compiled into Cascading Style Sheets and run on the client side or server side. Intro to CSS Preprocessors","title":"Preprocessors"},{"location":"dev/learning-html-css/#organization","text":"Methods to Organize CSS Accessibility \u2014 Make the web usable by everyone Accessible Rich Internet Applications (ARIA)","title":"Organization"},{"location":"dev/learning-html-css/#advanced","text":"An advanced HTML and CSS programmer is someone that is an expert with both languages and can architect nearly any possible website for any possible platform.","title":"Advanced"},{"location":"dev/learning-html-css/#css_1","text":"","title":"CSS"},{"location":"dev/learning-html-css/#css-specificity-hierarchy","text":"What is CSS specificity hierarchy W3: Calculating a selector's specificity CSS Specificity Calculator - Really useful!","title":"CSS Specificity Hierarchy"},{"location":"dev/learning-html-css/#css-ninja","text":"CSS Best Practices \u2013 14 Steps to Become a CSS Ninja Pt1 CSS Best Practices \u2013 14 Steps to Become a CSS Ninja Pt2","title":"CSS Ninja"},{"location":"dev/learning-html-css/#css-methologies","text":"BEM \u2013 meaning block, element, modifier \u2013 is a front-end naming methodology thought up by the guys at Yandex. It is a smart way of naming your CSS classes to give them more transparency and meaning to other developers. MindBEMding \u2013 getting your head \u2019round BEM syntax BEMIT: Taking the BEM Naming Convention a Step Further","title":"CSS Methologies"},{"location":"dev/learning-html-css/#other","text":"","title":"Other"},{"location":"dev/learning-html-css/#handbooks-guides-interview-questions","text":"Front-End Interview Handbook Back-End Developer Interview Questions Tech Interview Handbook Code Guide by @mdo - A guide by the author of Bootstrap.","title":"Handbooks, Guides, Interview Questions"},{"location":"dev/learning-html-css/#front-end-frameworks","text":"Foundation Shoelace - Like bootstrap but smaller","title":"Front-End Frameworks"},{"location":"dev/learning-js/","text":"This section contains resources for learning how to program in Javascript. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner A beginning Javascript programmer is someone that is new to the Javascript language and possibly programming. This set of resources spans learning what Javascript is and how it works in the browser to fundamental concepts of computer programming, computer science, and software engineering. Its best to have a good handle on the basics of HTML and CSS before learning Javascript. Pro tip: If you don't have a sandbox environment to work out of you can get started quickly with any of these Javascript Sandboxes . Getting Started What is Javascript? - A great overview of the language and how it works with HTML and CSS. What is Javascript? (Video) ECMAScript aka JavaScript Kahn Academy - Computer Programming - Greate entry level short course for programming in general. Language Javascript (Mozilla) W3 Javascript Tutorial How Javascript Works Code Academy - Intro to JavaScript ($) Google Developers Training Javascript Basics: What is Javascript, really? JavaScript building blocks Language Summaries / Cheatsheets Javascript.com by Pluralsignt - A great quick reference of parts of the language. Javascript Basics (P5.js Wiki Reference) - This is a quick-ish overview of the language and how to use it. Tutorials Get Started with Debugging JavaScript in Chrome DevTools Vanilla Javascript by Traversy Media Build A Filterable List With Vanilla JavaScript Javascripting (Nodeschool) - Learn JS / Terminal by playing with a node app. You need to know how to use npm and the terminal to run this. freeCodeCamp - Basic Javascript JavaScript Tutorial by Sololearn Javascript.com by Pluralsignt - Check out these short courses for learning specific topics using JS. The Modern JavaScript Tutorial - A great tutorial series that's easy for any beginner to follow. This is a great to place to start if you are new. Javascript for Cats JavaScript Tutorial for Beginners: Learn Javascript in 5 Days DOM Introduction to the DOM What is the DOM? (Video) The HTML DOM DOM Interfaces Core Interfaces in the DOM Document Object Properties and Methods JavaScript DOM Tutorial Series (Video Playlist) - by The Net Ninja JavaScript DOM Tutorial #1 - Introduction Javascript DOM Tutorial #2 - Get Element By ID JavaScript DOM Tutorial #3 - Get Elements By Class or Tag JavaScript DOM Tutorial #4 - The Query Selector JavaScript DOM Tutorial #5 - Changing Text & HTML Content Eloquent Javascript: CH 14 - The Document Object Model Event Handlers Global Event Handlers Books JavaScript: The Definitive Guide by David Flanagan, 7th Edition Professional JavaScript for Web Developers by Nicholas C. Zaka Eloquent Javascript Object-Oriented JavaScript by Stoyan Stefanov and Kumar Chetan Sharma You Don't Know JS - A Github based book series on JavaScript. The Complete JavaScript Handbook Exploring JS: JS books for programmers - A great collection of the latest and greatest books on the language. JSbooks - Huge collection of free books at all skill levels. JQuery W3 jQuery Tutorial Articles Learn to Code: 13 Tips that Could Save You Years of Effort 10 Priceless Resources for JavaScript Learners A Study Plan To Cure JavaScript Fatigue - Thx Karen ! JS Collections Micro JS - A website with tons of JS libraries. Some big some small. Intermediate An intermediate Javascript programmer understands parts of Javascript language of syntax (form) and semantics (meaning) and is interested in learning more about design patterns, best practices, libraries, frameworks, and alternative workflows. Language JS the Right Way JavaScript Design Patterns - Free Udacity Course Regular Expressions Regular Expressions (Mozilla) W3 Regex Reference Tutorials RegexOne Tutorials You Should Learn Regular Expressions Regex Sandboxes Regex 101 Regex Pal Tester Regulex Regexper Books JavaScript Patterns by Stoyan Stefanov JavaScript Enlightenment: From Library User to JavaScript Developer by Cody Lindley Data Structures and Algorithms Data Structures and Algorithms with JavaScript by Michael McMillan Introduction to Algorithms by Thomas H. Cormen et al Coding Math (Youtube Channel) Package Management What are the best front-end package managers? - February 2018 Guide to JavaScript frontend package managers - November 2015 JS UIs ULI dat.gui guigui Tutorials Understanding JavaScript Bind() Arrow Functions Advanced An advanced Javascript programmer understands how to utilize Javascript to solve technical and creative challenges by using existing tools and designing custom solutions. Language Backbone.js Fundamentals JavaScript Garden How to Learn ES6 (ECMAScript 6) ECMAScript Design Patterns Learning JavaScript Design Patterns Pro JavaScript Design Patterns: The Essentials of Object-Oriented JavaScript Programming by Dustin Diaz and Ross Harmes Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma et al Writing Modular JavaScript With AMD, CommonJS & ES Harmony Working with Modules RequireJS RequireJS's relationship to CommonJS Module Best Practices - Writing JS Modules in Node/CommonJS Application Development Electron Muon - Similar to Electron but uses Chromium Code Poems A Functional Poem\u200a\u2014\u200aCode that makes sense","title":"Learning Javascript"},{"location":"dev/learning-js/#beginner","text":"A beginning Javascript programmer is someone that is new to the Javascript language and possibly programming. This set of resources spans learning what Javascript is and how it works in the browser to fundamental concepts of computer programming, computer science, and software engineering. Its best to have a good handle on the basics of HTML and CSS before learning Javascript. Pro tip: If you don't have a sandbox environment to work out of you can get started quickly with any of these Javascript Sandboxes .","title":"Beginner"},{"location":"dev/learning-js/#getting-started","text":"What is Javascript? - A great overview of the language and how it works with HTML and CSS. What is Javascript? (Video) ECMAScript aka JavaScript Kahn Academy - Computer Programming - Greate entry level short course for programming in general.","title":"Getting Started"},{"location":"dev/learning-js/#language","text":"Javascript (Mozilla) W3 Javascript Tutorial How Javascript Works Code Academy - Intro to JavaScript ($) Google Developers Training Javascript Basics: What is Javascript, really? JavaScript building blocks","title":"Language"},{"location":"dev/learning-js/#language-summaries-cheatsheets","text":"Javascript.com by Pluralsignt - A great quick reference of parts of the language. Javascript Basics (P5.js Wiki Reference) - This is a quick-ish overview of the language and how to use it.","title":"Language Summaries / Cheatsheets"},{"location":"dev/learning-js/#tutorials","text":"Get Started with Debugging JavaScript in Chrome DevTools Vanilla Javascript by Traversy Media Build A Filterable List With Vanilla JavaScript Javascripting (Nodeschool) - Learn JS / Terminal by playing with a node app. You need to know how to use npm and the terminal to run this. freeCodeCamp - Basic Javascript JavaScript Tutorial by Sololearn Javascript.com by Pluralsignt - Check out these short courses for learning specific topics using JS. The Modern JavaScript Tutorial - A great tutorial series that's easy for any beginner to follow. This is a great to place to start if you are new. Javascript for Cats JavaScript Tutorial for Beginners: Learn Javascript in 5 Days","title":"Tutorials"},{"location":"dev/learning-js/#dom","text":"Introduction to the DOM What is the DOM? (Video) The HTML DOM DOM Interfaces Core Interfaces in the DOM Document Object Properties and Methods JavaScript DOM Tutorial Series (Video Playlist) - by The Net Ninja JavaScript DOM Tutorial #1 - Introduction Javascript DOM Tutorial #2 - Get Element By ID JavaScript DOM Tutorial #3 - Get Elements By Class or Tag JavaScript DOM Tutorial #4 - The Query Selector JavaScript DOM Tutorial #5 - Changing Text & HTML Content Eloquent Javascript: CH 14 - The Document Object Model","title":"DOM"},{"location":"dev/learning-js/#event-handlers","text":"Global Event Handlers","title":"Event Handlers"},{"location":"dev/learning-js/#books","text":"JavaScript: The Definitive Guide by David Flanagan, 7th Edition Professional JavaScript for Web Developers by Nicholas C. Zaka Eloquent Javascript Object-Oriented JavaScript by Stoyan Stefanov and Kumar Chetan Sharma You Don't Know JS - A Github based book series on JavaScript. The Complete JavaScript Handbook Exploring JS: JS books for programmers - A great collection of the latest and greatest books on the language. JSbooks - Huge collection of free books at all skill levels.","title":"Books"},{"location":"dev/learning-js/#jquery","text":"W3 jQuery Tutorial","title":"JQuery"},{"location":"dev/learning-js/#articles","text":"Learn to Code: 13 Tips that Could Save You Years of Effort 10 Priceless Resources for JavaScript Learners A Study Plan To Cure JavaScript Fatigue - Thx Karen !","title":"Articles"},{"location":"dev/learning-js/#js-collections","text":"Micro JS - A website with tons of JS libraries. Some big some small.","title":"JS Collections"},{"location":"dev/learning-js/#intermediate","text":"An intermediate Javascript programmer understands parts of Javascript language of syntax (form) and semantics (meaning) and is interested in learning more about design patterns, best practices, libraries, frameworks, and alternative workflows.","title":"Intermediate"},{"location":"dev/learning-js/#language_1","text":"JS the Right Way JavaScript Design Patterns - Free Udacity Course","title":"Language"},{"location":"dev/learning-js/#regular-expressions","text":"Regular Expressions (Mozilla) W3 Regex Reference","title":"Regular Expressions"},{"location":"dev/learning-js/#tutorials_1","text":"RegexOne Tutorials You Should Learn Regular Expressions","title":"Tutorials"},{"location":"dev/learning-js/#regex-sandboxes","text":"Regex 101 Regex Pal Tester Regulex Regexper","title":"Regex Sandboxes"},{"location":"dev/learning-js/#books_1","text":"JavaScript Patterns by Stoyan Stefanov JavaScript Enlightenment: From Library User to JavaScript Developer by Cody Lindley","title":"Books"},{"location":"dev/learning-js/#data-structures-and-algorithms","text":"Data Structures and Algorithms with JavaScript by Michael McMillan Introduction to Algorithms by Thomas H. Cormen et al Coding Math (Youtube Channel)","title":"Data Structures and Algorithms"},{"location":"dev/learning-js/#package-management","text":"What are the best front-end package managers? - February 2018 Guide to JavaScript frontend package managers - November 2015","title":"Package Management"},{"location":"dev/learning-js/#js-uis","text":"ULI dat.gui guigui","title":"JS UIs"},{"location":"dev/learning-js/#tutorials_2","text":"Understanding JavaScript Bind() Arrow Functions","title":"Tutorials"},{"location":"dev/learning-js/#advanced","text":"An advanced Javascript programmer understands how to utilize Javascript to solve technical and creative challenges by using existing tools and designing custom solutions.","title":"Advanced"},{"location":"dev/learning-js/#language_2","text":"Backbone.js Fundamentals JavaScript Garden How to Learn ES6 (ECMAScript 6) ECMAScript","title":"Language"},{"location":"dev/learning-js/#design-patterns","text":"Learning JavaScript Design Patterns Pro JavaScript Design Patterns: The Essentials of Object-Oriented JavaScript Programming by Dustin Diaz and Ross Harmes Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma et al Writing Modular JavaScript With AMD, CommonJS & ES Harmony","title":"Design Patterns"},{"location":"dev/learning-js/#working-with-modules","text":"RequireJS RequireJS's relationship to CommonJS Module Best Practices - Writing JS Modules in Node/CommonJS","title":"Working with Modules"},{"location":"dev/learning-js/#application-development","text":"Electron Muon - Similar to Electron but uses Chromium","title":"Application Development"},{"location":"dev/learning-js/#code-poems","text":"A Functional Poem\u200a\u2014\u200aCode that makes sense","title":"Code Poems"},{"location":"dev/learning-node/","text":"This section contains resources for learning how to work with Node.js. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner Node.js NPM - Node Package Manager (Installed with Node.js) NVM - A tool for managing multiple versions of Node.js (MacOS Only) nvm-windows - Similar to NVM but for Windows Installing Node and NPM Downloading and installing Node.js and npm (As of Fall 2019) Resolving EACCES permissions errors when installing packages globally - This can happen when running a command such as npm install -g live-server . Documentation Node.js Documentation - Your primary reference for the Node.js API Node Modules Node.js URL Module: URL Strings and URL Objects - This has a great diagram showing the URL structure and how to parse it using the Node.js API. This matters for routing a request to the correct destination in your Node server (app). Books The Node Beginner Book Professional Node.js: Building Javascript Based Scalable Software by Pedro Teixera Tutorials Node.js Tutorials Node.js Tutorial in VS Code Nodeschool Workshopper List - These are cool. Short terminal-based interactive tutorials on various topics. Node.js Tutorial - Tutorialspoint tutorials that cover the Node API CSE 398 Node.js Tutorial - Great introductory tutorial using Node API to build up to why it makes sense to eventually use Express (Step 13). Node.js for Beginners npm Tutorials npm Tutorial for Beginners - 2:30 mins npm crash course 1 - 24 mins npm crash course 2 - 42 mins Intermediate Node Frameworks Express Frameworks built on Express KeystoneJS - Node.js CMS & web app platform Templating Pug.js ejs Tutorials MVC How to Build and Structure a Node.js MVC Application - A great tutorial for building a notes board app. This doesn't use Express to build the app, it uses another framework called Hapi.js. Either framework most definitely simplifies the implementation of an app like this. Express Tutorials Express Tutorial - By tutorialspoint Websocket Tutorials Websockets Tutorial - By tutorialspoint Passport.js Tutorials Passport.js - Simple, unobtrusive authentication for Node.js Learn how to handle authentication with Node using Passport.js Easy Node Authentication: Setup and Local Local Authentication Using Passport in Node.js Application Deployment In order to deploy an application on a server out in the world you need to use a host that supports Node.js and how it runs. Node.js apps require a system that allows a Javascript runtime (process) to run all the time using a process management tool like PM2 . This means a \"shared host\" like Bluehost or another service that offers budget shared hosting typically doesn't support running apps like this. Below are some tutorials from hosts that offer these kinds of servers. Another important thing to mention is when you work with hosts like Digital Ocean or Heroku, you typically have to setup and configure the \"server instance\", which means you become the administrator responsible for installing and configuring the operating system (Ubuntu or another form of Linux or Windows) to be a web server. These hosts are providing whats called a \"Virtual Private Server\" aka a VPS with a dedicated IP address which you can think of like a small piece of a much larger server called the \"cloud\". Deploying on Digital Ocean Digital Ocean Tutorial: How To Set Up a Node.js Application for Production on Ubuntu 16.04 Deploying on Heroku Getting Started on Heroku with Node.js - Follow this to go from having no Node app to deploying a Node app. Deploying Node.js Apps on Heroku - This includes all the steps you need to follow to deploy an existing application. Advanced Tutorials Building Command Line Applications Creating Your First Node.js Command-line Application Commander.js Creating Modules (aka npm Packages) Creating Public & Private Node Modules How to Create Node.js Modules Build a Static Site Generator Modules Requiring modules in Node.js: Everything you need to know nodemon Awesome Lists awesome-nodejs","title":"Learning Node.js"},{"location":"dev/learning-node/#beginner","text":"Node.js NPM - Node Package Manager (Installed with Node.js) NVM - A tool for managing multiple versions of Node.js (MacOS Only) nvm-windows - Similar to NVM but for Windows","title":"Beginner"},{"location":"dev/learning-node/#installing-node-and-npm","text":"Downloading and installing Node.js and npm (As of Fall 2019) Resolving EACCES permissions errors when installing packages globally - This can happen when running a command such as npm install -g live-server .","title":"Installing Node and NPM"},{"location":"dev/learning-node/#documentation","text":"Node.js Documentation - Your primary reference for the Node.js API Node Modules Node.js URL Module: URL Strings and URL Objects - This has a great diagram showing the URL structure and how to parse it using the Node.js API. This matters for routing a request to the correct destination in your Node server (app).","title":"Documentation"},{"location":"dev/learning-node/#books","text":"The Node Beginner Book Professional Node.js: Building Javascript Based Scalable Software by Pedro Teixera","title":"Books"},{"location":"dev/learning-node/#tutorials","text":"","title":"Tutorials"},{"location":"dev/learning-node/#nodejs-tutorials","text":"Node.js Tutorial in VS Code Nodeschool Workshopper List - These are cool. Short terminal-based interactive tutorials on various topics. Node.js Tutorial - Tutorialspoint tutorials that cover the Node API CSE 398 Node.js Tutorial - Great introductory tutorial using Node API to build up to why it makes sense to eventually use Express (Step 13). Node.js for Beginners","title":"Node.js Tutorials"},{"location":"dev/learning-node/#npm-tutorials","text":"npm Tutorial for Beginners - 2:30 mins npm crash course 1 - 24 mins npm crash course 2 - 42 mins","title":"npm Tutorials"},{"location":"dev/learning-node/#intermediate","text":"Node Frameworks Express Frameworks built on Express KeystoneJS - Node.js CMS & web app platform","title":"Intermediate"},{"location":"dev/learning-node/#templating","text":"Pug.js ejs","title":"Templating"},{"location":"dev/learning-node/#tutorials_1","text":"","title":"Tutorials"},{"location":"dev/learning-node/#mvc","text":"How to Build and Structure a Node.js MVC Application - A great tutorial for building a notes board app. This doesn't use Express to build the app, it uses another framework called Hapi.js. Either framework most definitely simplifies the implementation of an app like this.","title":"MVC"},{"location":"dev/learning-node/#express-tutorials","text":"Express Tutorial - By tutorialspoint","title":"Express Tutorials"},{"location":"dev/learning-node/#websocket-tutorials","text":"Websockets Tutorial - By tutorialspoint","title":"Websocket Tutorials"},{"location":"dev/learning-node/#passportjs-tutorials","text":"Passport.js - Simple, unobtrusive authentication for Node.js Learn how to handle authentication with Node using Passport.js Easy Node Authentication: Setup and Local Local Authentication Using Passport in Node.js","title":"Passport.js Tutorials"},{"location":"dev/learning-node/#application-deployment","text":"In order to deploy an application on a server out in the world you need to use a host that supports Node.js and how it runs. Node.js apps require a system that allows a Javascript runtime (process) to run all the time using a process management tool like PM2 . This means a \"shared host\" like Bluehost or another service that offers budget shared hosting typically doesn't support running apps like this. Below are some tutorials from hosts that offer these kinds of servers. Another important thing to mention is when you work with hosts like Digital Ocean or Heroku, you typically have to setup and configure the \"server instance\", which means you become the administrator responsible for installing and configuring the operating system (Ubuntu or another form of Linux or Windows) to be a web server. These hosts are providing whats called a \"Virtual Private Server\" aka a VPS with a dedicated IP address which you can think of like a small piece of a much larger server called the \"cloud\". Deploying on Digital Ocean Digital Ocean Tutorial: How To Set Up a Node.js Application for Production on Ubuntu 16.04 Deploying on Heroku Getting Started on Heroku with Node.js - Follow this to go from having no Node app to deploying a Node app. Deploying Node.js Apps on Heroku - This includes all the steps you need to follow to deploy an existing application.","title":"Application Deployment"},{"location":"dev/learning-node/#advanced","text":"","title":"Advanced"},{"location":"dev/learning-node/#tutorials_2","text":"","title":"Tutorials"},{"location":"dev/learning-node/#building-command-line-applications","text":"Creating Your First Node.js Command-line Application Commander.js","title":"Building Command Line Applications"},{"location":"dev/learning-node/#creating-modules-aka-npm-packages","text":"Creating Public & Private Node Modules How to Create Node.js Modules","title":"Creating Modules (aka npm Packages)"},{"location":"dev/learning-node/#build-a-static-site-generator","text":"","title":"Build a Static Site Generator"},{"location":"dev/learning-node/#modules","text":"Requiring modules in Node.js: Everything you need to know nodemon","title":"Modules"},{"location":"dev/learning-node/#awesome-lists","text":"awesome-nodejs","title":"Awesome Lists"},{"location":"dev/learning-p5js/","text":"This section contains resources for learning how to use Javascript framework p5.js . Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner p5.js p5.js web editor A free-to-use classrooms system for p5.js Javascript Basics (P5.js Wiki Reference) Tutorials TBD Courses Introduction to Programming for the Visual Arts with p5.js (Kadenze) Projects TBD","title":"Learning p5.js"},{"location":"dev/learning-p5js/#beginner","text":"p5.js p5.js web editor A free-to-use classrooms system for p5.js Javascript Basics (P5.js Wiki Reference)","title":"Beginner"},{"location":"dev/learning-p5js/#tutorials","text":"TBD","title":"Tutorials"},{"location":"dev/learning-p5js/#courses","text":"Introduction to Programming for the Visual Arts with p5.js (Kadenze)","title":"Courses"},{"location":"dev/learning-p5js/#projects","text":"TBD","title":"Projects"},{"location":"dev/learning-react/","text":"React https://reactjs.org/ React Native http://facebook.github.io/react-native/","title":"Learning react"},{"location":"dev/learning-threejs/","text":"This section contains resources for learning how to use Javascript framework three.js . Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner three.js WebGL , Does my browser support WebGL? , WebGL Report Tutorials Learning Three.js Workflow: Animation from Blender to three.js Projects TBD","title":"Learning three.js"},{"location":"dev/learning-threejs/#beginner","text":"three.js WebGL , Does my browser support WebGL? , WebGL Report","title":"Beginner"},{"location":"dev/learning-threejs/#tutorials","text":"Learning Three.js Workflow: Animation from Blender to three.js","title":"Tutorials"},{"location":"dev/learning-threejs/#projects","text":"TBD","title":"Projects"},{"location":"dev/learning-webvr/","text":"This section contains resources for learning how to work with WebVR. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner WebVR Rocks - WebVR is a JavaScript API for creating immersive 3D, Virtual Reality experiences in your browser.This site shows browser compatibility with different VR hardware. WebVR Info - Another site with examples and information about WebVR. WebVR W3 Spec - This will eventually become WebXR GLTF Frameworks A-Frame WebVR Resources - A-Frame Extras, etc Projects Google WebVR Experiments http://ottifox.com/ Hologram Repositories Sketchfab - 3D model repository Utilities WebVR Assets - Unity to WebVR (Mozilla) UnityAFrameExporter - Not maintained UnitySceneWebExporter - Not maintained 360 Panorama Tools Street View Panorama Street View Download 360","title":"Learning WebVR"},{"location":"dev/learning-webvr/#beginner","text":"WebVR Rocks - WebVR is a JavaScript API for creating immersive 3D, Virtual Reality experiences in your browser.This site shows browser compatibility with different VR hardware. WebVR Info - Another site with examples and information about WebVR. WebVR W3 Spec - This will eventually become WebXR GLTF","title":"Beginner"},{"location":"dev/learning-webvr/#frameworks","text":"A-Frame WebVR Resources - A-Frame Extras, etc","title":"Frameworks"},{"location":"dev/learning-webvr/#projects","text":"Google WebVR Experiments http://ottifox.com/ Hologram","title":"Projects"},{"location":"dev/learning-webvr/#repositories","text":"Sketchfab - 3D model repository","title":"Repositories"},{"location":"dev/learning-webvr/#utilities","text":"WebVR Assets - Unity to WebVR (Mozilla) UnityAFrameExporter - Not maintained UnitySceneWebExporter - Not maintained","title":"Utilities"},{"location":"dev/learning-webvr/#360-panorama-tools","text":"Street View Panorama Street View Download 360","title":"360 Panorama Tools"},{"location":"dev/sandbox/","text":"Critical Making Sandbox The cm-sandbox repo is a starting point for web projects using HTML, CSS, and JS running on a localhost server. To use: Navigate to your project directory: cd /Users/username/code Clone repo: git clone https://github.com/rjduran/cm-sandbox.git my-project-name This will clone the cm-sandbox repo into a new project folder named my-project-name . Now you have a starting point for a new web project running with live-server . If you plan to make any commits to a repo on Github with this new project folder you will need to create a repo on Github with the same project name and assign the remote to your repo. Assign a new remote to your new project repo. Assuming I have a new project folder called my-project-name and a new repo on Github with the same name, follow the steps below and replace the remote URL with your new repo URL. cd my-project-name git remote -v You will see something like this returned: origin https://github.com/rjduran/cm-sandbox.git (fetch) origin https://github.com/rjduran/cm-sandbox.git (push) Copy the url to your new Github repo and use with the git remote command then push the changes to your repo. Check what the remote is set to by using the git remote command as above. It should be updated with your new project URL. Prior to pushing the changes you can make any edits to the files in the repo and add them and commit them. git remote set-url origin https://github.com/rjduran/my-project-name.git git remote -v git push -u origin master You can read more about changing remotes between HTTPS and SSH and vice versa here . How to Build a Sandbox Create a local development workspace (aka sandbox ) to prototype with HTML, CSS, and JS. By the end of this you should have something that looks like my cm-sandbox repo. What is the purpose of this? To become familiar with the file types, languages, and how they work together. At a fundamental level this approach to experimentation establishes good development practices and efficient workflows. It also supports hands-on learning, which is the only way to improve as a programmer. As a programmer you want to be in control of your code, tools, workflow, and system. ( Don't let the computer control you. ). Pro Tip: Setup a working directory for all programming projects (For Example, /Users/username/code ). This directory then becomes your goto location for anything having to do with code, programming, cloning repos from github, experimenting with new tools and software, and more. This is precisely how I organize my system. Download and install Node.js and live-server . Verify node and npm are installed via Terminal: node -v && npm -v . You should see two version numbers matching what you installed. Install live-server globally: npm install -g live-server If you have done all this correctly you should be able to type npm list -g --depth 0 and see that the live-server module has been installed. You can also type live-server in your terminal and start a server at the default address http://127.0.0.1:8080 from your current folder. Create a Github account and make a repository for your web project (as demonstrated in class). You can name the repo anything you want. For example, \"cm-sandbox\". Clone a copy of this repository to your machine via Terminal. git clone <repo-url> . Setup your machine to make use of a local development folder and local development server (See tip above and Step 1). Create 3 files in your web project repository folder (ie. the project \"folder\" or \"repo\" you created and then cloned from Github in step 3). index.html - ( quick boilerplate template , copy and paste code from here) style.css script.js Launch your local development server ( live-server ) via Terminal and code editor of choice (ex. VSCode) and make some changes to the files in your web project. Remember the purpose of a local development environment is to \"simulate\" how the code will perform when uploaded to another web server. Open a browser and goto the url shown. It will be http://localhost:8080 or something similar. Create a basic html page using validated markup (Hint: Using a tool like FreeFormatter , check that your code works as expected.) Add some css selectors to your style.css file. Add some basic Javascript functionality to your script.js file. Commit the file changes to your Github repo. You should see the changes in the Github repo summary.","title":"Sandbox"},{"location":"dev/sandbox/#critical-making-sandbox","text":"The cm-sandbox repo is a starting point for web projects using HTML, CSS, and JS running on a localhost server. To use: Navigate to your project directory: cd /Users/username/code Clone repo: git clone https://github.com/rjduran/cm-sandbox.git my-project-name This will clone the cm-sandbox repo into a new project folder named my-project-name . Now you have a starting point for a new web project running with live-server . If you plan to make any commits to a repo on Github with this new project folder you will need to create a repo on Github with the same project name and assign the remote to your repo. Assign a new remote to your new project repo. Assuming I have a new project folder called my-project-name and a new repo on Github with the same name, follow the steps below and replace the remote URL with your new repo URL. cd my-project-name git remote -v You will see something like this returned: origin https://github.com/rjduran/cm-sandbox.git (fetch) origin https://github.com/rjduran/cm-sandbox.git (push) Copy the url to your new Github repo and use with the git remote command then push the changes to your repo. Check what the remote is set to by using the git remote command as above. It should be updated with your new project URL. Prior to pushing the changes you can make any edits to the files in the repo and add them and commit them. git remote set-url origin https://github.com/rjduran/my-project-name.git git remote -v git push -u origin master You can read more about changing remotes between HTTPS and SSH and vice versa here .","title":"Critical Making Sandbox"},{"location":"dev/sandbox/#how-to-build-a-sandbox","text":"Create a local development workspace (aka sandbox ) to prototype with HTML, CSS, and JS. By the end of this you should have something that looks like my cm-sandbox repo. What is the purpose of this? To become familiar with the file types, languages, and how they work together. At a fundamental level this approach to experimentation establishes good development practices and efficient workflows. It also supports hands-on learning, which is the only way to improve as a programmer. As a programmer you want to be in control of your code, tools, workflow, and system. ( Don't let the computer control you. ). Pro Tip: Setup a working directory for all programming projects (For Example, /Users/username/code ). This directory then becomes your goto location for anything having to do with code, programming, cloning repos from github, experimenting with new tools and software, and more. This is precisely how I organize my system. Download and install Node.js and live-server . Verify node and npm are installed via Terminal: node -v && npm -v . You should see two version numbers matching what you installed. Install live-server globally: npm install -g live-server If you have done all this correctly you should be able to type npm list -g --depth 0 and see that the live-server module has been installed. You can also type live-server in your terminal and start a server at the default address http://127.0.0.1:8080 from your current folder. Create a Github account and make a repository for your web project (as demonstrated in class). You can name the repo anything you want. For example, \"cm-sandbox\". Clone a copy of this repository to your machine via Terminal. git clone <repo-url> . Setup your machine to make use of a local development folder and local development server (See tip above and Step 1). Create 3 files in your web project repository folder (ie. the project \"folder\" or \"repo\" you created and then cloned from Github in step 3). index.html - ( quick boilerplate template , copy and paste code from here) style.css script.js Launch your local development server ( live-server ) via Terminal and code editor of choice (ex. VSCode) and make some changes to the files in your web project. Remember the purpose of a local development environment is to \"simulate\" how the code will perform when uploaded to another web server. Open a browser and goto the url shown. It will be http://localhost:8080 or something similar. Create a basic html page using validated markup (Hint: Using a tool like FreeFormatter , check that your code works as expected.) Add some css selectors to your style.css file. Add some basic Javascript functionality to your script.js file. Commit the file changes to your Github repo. You should see the changes in the Github repo summary.","title":"How to Build a Sandbox"},{"location":"dev/learning-terminal/","text":"This section contains resources for learning how to use the MacOS Terminal and related Linux Terminals. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner To see hidden files on your system (Open Terminal and type): To show all files: defaults write com.apple.finder AppleShowAllFiles YES To hide all files: defaults write com.apple.finder AppleShowAllFiles NO Tips: You can drag and drop a folder from the Finder into the Terminal and see the path. This makes it easy to navigate (via cd ) to a folder without typing the whole path in. You want to be aware of file paths and using spaces in file names and directories. Its much easier to always use no spaces. See: Spaces in file and directory names for more info. Command Line Getting to Know the Command Line Codeacademy: Learn the Command Line The Art of the Command Line - Master the command line, in one page. A 64K+ starred repo on github. Worth the time and bookmark. Quick Cheat Sheet Ctrl + U : Clear the current line Ctrl + A ---> Ctrl + K : Move to start of line and clear line Ctrl + C : Cancel the current command Ctrl + Y : Recall the deleted line Ctrl + A : Move to the beginning of the line UNIX / Linux / Terminal Cheat Sheets Command Line Cheat Sheet by git-tower - This one is great! MacOS/Linux/Unix Command Line Cheat Sheet List of Command Line Commands An A-Z Index of the Apple macOS command line (OS X) Basic UNIX Commands UNIX / Linux Cheat Sheet explainshell.com - Awesome utility that breaks down each part of a command-line used in the Terminal Bash Shell What is the bash shell? bash guide for beginners bash startup files (aka \"dotfiles\" - .bash_profile, .profile, etc) An introduction to Dotfiles: how to take control of your development environment How to make your Dotfile management a painless affair Getting Started with BASH Customizations RJ's Bash Profile Nathaniel Landau's Bash Profile Awesome macOS Command Line - Huge list of macOS actions via command line. 30 Mac Terminal Commands to Access Hidden Features Bash Scripting What is a Bash Script? bash scripting cheatsheet Logical, arithmetical and comparison operators pure bash bible - A collection of pure bash alternatives to external processes. Nathaniel Landau's Bash Scripting Utilities Aliases An Introduction to Useful Bash Aliases and Functions Bash Tweaks (UI, Color, etc) Tutorial: Customize Your Terminal OG Style \u2014 No Libraries or Plugins! FLOZz' MISC \u00bb bash:tip_colors_and_formatting How to Customize the Command Prompt Files Text Editing with vi (vim) VI: What is VI? Ryans tutorials vi tutorial Cheat Sheets Ryans tutorials vi cheat sheet Lagmonster vi cheat sheet Lagmonster advanced vi cheat sheet Permissions chmod Calculator Encoding ASCII / Unicode Table chardet character encoding detector How to auto detect text file encoding? Workflow Enhancements Display directory structure as tree Mac-CLI Intermediate Terminal Emulators MacOS / Linux iTerm2 Hyper Windows cmder ConEmu PowerShell Terminal Multiplexers screen Linux screen Tutorial How to Kill Screen tmux Getting Started A Gentle Introduction to tmux A Tmux Primer A Quick and Easy Guide to tmux The Tao of tmux - Go deep with this ebook. tmux shortcuts & cheatsheet Customizing Tmux Oh My Tmux! My pretty + versatile tmux configuration that just works (imho the best tmux configuration) Making tmux Pretty and Usable - A Guide to Customizing your tmux.conf Tmux Configuration The Definitive Guide to Customizing the Tmux Status Line","title":"Terminal Resources"},{"location":"dev/learning-terminal/#beginner","text":"To see hidden files on your system (Open Terminal and type): To show all files: defaults write com.apple.finder AppleShowAllFiles YES To hide all files: defaults write com.apple.finder AppleShowAllFiles NO Tips: You can drag and drop a folder from the Finder into the Terminal and see the path. This makes it easy to navigate (via cd ) to a folder without typing the whole path in. You want to be aware of file paths and using spaces in file names and directories. Its much easier to always use no spaces. See: Spaces in file and directory names for more info.","title":"Beginner"},{"location":"dev/learning-terminal/#command-line","text":"Getting to Know the Command Line Codeacademy: Learn the Command Line The Art of the Command Line - Master the command line, in one page. A 64K+ starred repo on github. Worth the time and bookmark.","title":"Command Line"},{"location":"dev/learning-terminal/#quick-cheat-sheet","text":"Ctrl + U : Clear the current line Ctrl + A ---> Ctrl + K : Move to start of line and clear line Ctrl + C : Cancel the current command Ctrl + Y : Recall the deleted line Ctrl + A : Move to the beginning of the line","title":"Quick Cheat Sheet"},{"location":"dev/learning-terminal/#unix-linux-terminal-cheat-sheets","text":"Command Line Cheat Sheet by git-tower - This one is great! MacOS/Linux/Unix Command Line Cheat Sheet List of Command Line Commands An A-Z Index of the Apple macOS command line (OS X) Basic UNIX Commands UNIX / Linux Cheat Sheet explainshell.com - Awesome utility that breaks down each part of a command-line used in the Terminal","title":"UNIX / Linux / Terminal Cheat Sheets"},{"location":"dev/learning-terminal/#bash-shell","text":"What is the bash shell? bash guide for beginners bash startup files (aka \"dotfiles\" - .bash_profile, .profile, etc) An introduction to Dotfiles: how to take control of your development environment How to make your Dotfile management a painless affair Getting Started with BASH","title":"Bash Shell"},{"location":"dev/learning-terminal/#customizations","text":"RJ's Bash Profile Nathaniel Landau's Bash Profile Awesome macOS Command Line - Huge list of macOS actions via command line. 30 Mac Terminal Commands to Access Hidden Features","title":"Customizations"},{"location":"dev/learning-terminal/#bash-scripting","text":"What is a Bash Script? bash scripting cheatsheet Logical, arithmetical and comparison operators pure bash bible - A collection of pure bash alternatives to external processes. Nathaniel Landau's Bash Scripting Utilities","title":"Bash Scripting"},{"location":"dev/learning-terminal/#aliases","text":"An Introduction to Useful Bash Aliases and Functions","title":"Aliases"},{"location":"dev/learning-terminal/#bash-tweaks-ui-color-etc","text":"Tutorial: Customize Your Terminal OG Style \u2014 No Libraries or Plugins! FLOZz' MISC \u00bb bash:tip_colors_and_formatting How to Customize the Command Prompt","title":"Bash Tweaks (UI, Color, etc)"},{"location":"dev/learning-terminal/#files","text":"","title":"Files"},{"location":"dev/learning-terminal/#text-editing-with-vi-vim","text":"VI: What is VI? Ryans tutorials vi tutorial","title":"Text Editing with vi (vim)"},{"location":"dev/learning-terminal/#cheat-sheets","text":"Ryans tutorials vi cheat sheet Lagmonster vi cheat sheet Lagmonster advanced vi cheat sheet","title":"Cheat Sheets"},{"location":"dev/learning-terminal/#permissions","text":"chmod Calculator","title":"Permissions"},{"location":"dev/learning-terminal/#encoding","text":"ASCII / Unicode Table chardet character encoding detector How to auto detect text file encoding?","title":"Encoding"},{"location":"dev/learning-terminal/#workflow-enhancements","text":"Display directory structure as tree Mac-CLI","title":"Workflow Enhancements"},{"location":"dev/learning-terminal/#intermediate","text":"","title":"Intermediate"},{"location":"dev/learning-terminal/#terminal-emulators","text":"","title":"Terminal Emulators"},{"location":"dev/learning-terminal/#macos-linux","text":"iTerm2 Hyper","title":"MacOS / Linux"},{"location":"dev/learning-terminal/#windows","text":"cmder ConEmu PowerShell","title":"Windows"},{"location":"dev/learning-terminal/#terminal-multiplexers","text":"","title":"Terminal Multiplexers"},{"location":"dev/learning-terminal/#screen","text":"Linux screen Tutorial How to Kill Screen","title":"screen"},{"location":"dev/learning-terminal/#tmux","text":"Getting Started A Gentle Introduction to tmux A Tmux Primer A Quick and Easy Guide to tmux The Tao of tmux - Go deep with this ebook. tmux shortcuts & cheatsheet Customizing Tmux Oh My Tmux! My pretty + versatile tmux configuration that just works (imho the best tmux configuration) Making tmux Pretty and Usable - A Guide to Customizing your tmux.conf Tmux Configuration The Definitive Guide to Customizing the Tmux Status Line","title":"tmux"},{"location":"dev/learning-terminal/enhancements/","text":"Minimal Command Prompt This brief tutorial walks through setting up your terminal with a shorter command prompt. Normally a new terminal will show the following: hostname:current_directory username$ In my case this looks like this: rjd:~ rjduran$ What is a hostname and why is my hostname really long? When you setup a new computer this is automatically assigned a hostname matching your username and computer type. This name identifies your computer on a local area network. For example, rjdurans-macbook-pro or something similar. To change your hostname for your computer goto System Preference > Sharing and enter a different name for the Computer Name . On a local network your computer is identified as hostname.local. In my case it is rjd.local. You can also type hostname into your terminal and see the current hostname. What's the tilde character \"~\" mean? The tilde (~) character is used to indicate your home directory in the terminal. It's a shorthand for /Users/username . For example, to goto your Desktop folder from anywhere on your system you can type in cd ~/Desktop . How can I shorten the command line prompt? To understand how this works you need to know that there are hidden configuration files loaded when you start a terminal session. They are located in your home directory and are named .profile, .bash_profile, and .bashrc. It's possible that these files don't exist yet but you can simply create them by using the touch command or with vscode. For instance, touch ~/.bash_profile will create a new hidden file called .bash_profile in your home directory. After doing this you can edit the file in vscode. Open the file and enter the following line then save to instantly shorten the command prompt next time you open a new terminal. This command simply makes use of the PS1 environment variable to configure the terminal display. Customization of the PS1 variable is a deep topic and you can read more about what's possible starting here and here . export PS1=\"\\W $ \" Result:","title":"Terminal Enhancements"},{"location":"dev/learning-terminal/enhancements/#minimal-command-prompt","text":"This brief tutorial walks through setting up your terminal with a shorter command prompt. Normally a new terminal will show the following: hostname:current_directory username$ In my case this looks like this: rjd:~ rjduran$ What is a hostname and why is my hostname really long? When you setup a new computer this is automatically assigned a hostname matching your username and computer type. This name identifies your computer on a local area network. For example, rjdurans-macbook-pro or something similar. To change your hostname for your computer goto System Preference > Sharing and enter a different name for the Computer Name . On a local network your computer is identified as hostname.local. In my case it is rjd.local. You can also type hostname into your terminal and see the current hostname. What's the tilde character \"~\" mean? The tilde (~) character is used to indicate your home directory in the terminal. It's a shorthand for /Users/username . For example, to goto your Desktop folder from anywhere on your system you can type in cd ~/Desktop . How can I shorten the command line prompt? To understand how this works you need to know that there are hidden configuration files loaded when you start a terminal session. They are located in your home directory and are named .profile, .bash_profile, and .bashrc. It's possible that these files don't exist yet but you can simply create them by using the touch command or with vscode. For instance, touch ~/.bash_profile will create a new hidden file called .bash_profile in your home directory. After doing this you can edit the file in vscode. Open the file and enter the following line then save to instantly shorten the command prompt next time you open a new terminal. This command simply makes use of the PS1 environment variable to configure the terminal display. Customization of the PS1 variable is a deep topic and you can read more about what's possible starting here and here . export PS1=\"\\W $ \" Result:","title":"Minimal Command Prompt"},{"location":"fab/","text":"Materials, Parts, Suppliers, Fabricators IQS Directory - The ultimate material / parts / suppliers / fab list. McMaster-Carr - TONS OF PARTS! Mesh Tools Meshlab Meshmixer Netfabb 3D File Viewing Sketchfab 3D File Sharing Thingiverse Pinshape Additive(+) 3D Printing Ultimaker 3D Printer , Cura (Slicer) Subtractive(-) CNC Milling Bantam Desktop CNC Mill - Formerly Othermill Bantam Software - Formerly Otherplan","title":"Tools"},{"location":"fab/#materials-parts-suppliers-fabricators","text":"IQS Directory - The ultimate material / parts / suppliers / fab list. McMaster-Carr - TONS OF PARTS!","title":"Materials, Parts, Suppliers, Fabricators"},{"location":"fab/#mesh-tools","text":"Meshlab Meshmixer Netfabb","title":"Mesh Tools"},{"location":"fab/#3d-file-viewing","text":"Sketchfab","title":"3D File Viewing"},{"location":"fab/#3d-file-sharing","text":"Thingiverse Pinshape","title":"3D File Sharing"},{"location":"fab/#additive","text":"","title":"Additive(+)"},{"location":"fab/#3d-printing","text":"Ultimaker 3D Printer , Cura (Slicer)","title":"3D Printing"},{"location":"fab/#subtractive-","text":"","title":"Subtractive(-)"},{"location":"fab/#cnc-milling","text":"Bantam Desktop CNC Mill - Formerly Othermill Bantam Software - Formerly Otherplan","title":"CNC Milling"},{"location":"fab/bantam-cnc-mill/","text":"Bantam CNC Mill Start Here Bantam Mill Support Must Read Getting Started Projects Basic Project Workflow Setting Up Your Material Inserting and Locating a Tool Materials Safety Read Next Speeds and Feeds Fixturing Double Sided Tape - Works great with flat, thin material like circuit boards, thin metal, or plastic pieces. Hot Glue - A bead of hot glue around the edges of larger or rougher materials \u2014 like wood, plastic, and machining wax \u2014 works great. T-Slots - These little slots in the bed can be used to hold material to the bed. For Advanced use. File Types PCB - brd, gtl, gbr, cmp GCODE - nc, gcode, tap SVG Bantam Plan Files - btm Support Documentation File Support G-Code Reference","title":"Bantam CNC Mill"},{"location":"fab/bantam-cnc-mill/#bantam-cnc-mill","text":"","title":"Bantam CNC Mill"},{"location":"fab/bantam-cnc-mill/#start-here","text":"Bantam Mill Support","title":"Start Here"},{"location":"fab/bantam-cnc-mill/#must-read","text":"Getting Started Projects Basic Project Workflow Setting Up Your Material Inserting and Locating a Tool Materials Safety","title":"Must Read"},{"location":"fab/bantam-cnc-mill/#read-next","text":"Speeds and Feeds","title":"Read Next"},{"location":"fab/bantam-cnc-mill/#fixturing","text":"Double Sided Tape - Works great with flat, thin material like circuit boards, thin metal, or plastic pieces. Hot Glue - A bead of hot glue around the edges of larger or rougher materials \u2014 like wood, plastic, and machining wax \u2014 works great. T-Slots - These little slots in the bed can be used to hold material to the bed. For Advanced use.","title":"Fixturing"},{"location":"fab/bantam-cnc-mill/#file-types","text":"PCB - brd, gtl, gbr, cmp GCODE - nc, gcode, tap SVG Bantam Plan Files - btm","title":"File Types"},{"location":"fab/bantam-cnc-mill/#support-documentation","text":"File Support G-Code Reference","title":"Support Documentation"},{"location":"fab/molding-casting/","text":"Molding & Casting Silicone Molding with 3D Printed Masters - The mold box is 3d printed and filled with silicone to make the mold for casting. Any object can then be used in the process. Final objects are made out of resin. Concrete DIY Geometric Concrete Planters Using 3d Printing to make these concrete planters!","title":"Molding casting"},{"location":"fab/parts/","text":"The ultimate material / parts / suppliers / fab list. http://molded-urethane.com http://air-filters.org http://blowmoldedplastic.com http://customcarryingcases.net http://conveyor-systems.biz http://floor-gratings.com http://foamfabricating.net http://heating-elements.com http://libertygodwin.com http://hawkrents.com http://linear-bearings.net http://load-cells.org http://o-rings.org http://liquidchillers.com http://rollformedparts.com http://rotationallymoldedplastics.com http://paper-tubes.net http://steelservicecenters.com http://sewing-contractors.com http://screw-conveyors.com http://tubefabricatingservices.com http://ball-screws.net http://hingemanufacturers.org http://filteringsystems.com http://rubber-rolls.com http://aluminum-extrusions.net http://ball-valves.net http://bondedtometalrubber.com http://centrifugalpumps.biz http://cnc-machining.biz http://dipmoldedplastics.com http://fractionalhorsepowermotors.com http://hydraulicseals.net http://leak-detectors.net http://liquid-filters.net http://linearslides.net http://plastic-tubing.biz http://plasticfabricator.com http://strengthofnature.com http://steel-plastic-fibre-drums.com http://electronicconnectors.net http://hydraulic-pumps.org http://greatlakeseng.com http://laser-cutting-services.com http://scalemanufacturers.com http://thepieriswedding.com http://strainsense.com http://songlobal.com","title":"Parts"},{"location":"fab/ultimaker-3d-printer/","text":"3D Printing Ultimaker 3","title":"Ultimaker 3D Printer"},{"location":"fab/ultimaker-3d-printer/#3d-printing","text":"Ultimaker 3","title":"3D Printing"},{"location":"fab/vinyl-cutter/","text":"Roland Vinyl Cutter Getting Started Install the Illustrator plugin from Adobe Exchange (You only need to do this once) After installing it will show up under Window > Extensions > Roland CutStudio in Illustrator. Download the Users Manual Choose English > CAMM-1 > GS-24 Read through \"Simple! Basic Cutting\" section of the manual to see how to setup and use. Process Make a 2D design file in Illustrator Define your Artboard size to be the dimensions available within the left and right margins of the rollers. The width will be shown on the vinyl cutter display once you load material. Configure print settings in Window > Extensions > Roland CutStudio Select GX-24 Load material into machine Outline text/shapes Print/Cut!","title":"Roland Vinyl Cutter"},{"location":"fab/vinyl-cutter/#roland-vinyl-cutter","text":"","title":"Roland Vinyl Cutter"},{"location":"fab/vinyl-cutter/#getting-started","text":"Install the Illustrator plugin from Adobe Exchange (You only need to do this once) After installing it will show up under Window > Extensions > Roland CutStudio in Illustrator. Download the Users Manual Choose English > CAMM-1 > GS-24 Read through \"Simple! Basic Cutting\" section of the manual to see how to setup and use. Process Make a 2D design file in Illustrator Define your Artboard size to be the dimensions available within the left and right margins of the rollers. The width will be shown on the vinyl cutter display once you load material. Configure print settings in Window > Extensions > Roland CutStudio Select GX-24 Load material into machine Outline text/shapes Print/Cut!","title":"Getting Started"},{"location":"guides/design-for-3d-printing/","text":"Design for 3D Printing This guide provides a variety of resources for designing for additive manufacturing or 3d printing. Books The 3D Printing Handbook: Technologies, design and applications Design Process Manufacturing Methods The different types of 3D printing Additive Manufacturing Technologies (Image) Source: 3D Hubs Additive Manufacturing Technologies: An Overview 3D Models Thingiverse Instuctables Thingi10K: A Dataset of 10,000 3D-Printing Models , Website NASA 3D Printable Models - Repository of 3d printable models from NASA. Design Guides The Complete Engineering Guide: 3D Printing by 3D Hubs - This is an outstanding primer on 3D printing. Key design considerations for 3D Printing i.materialise Design Guide Shapeways: Modeling & Design Tips 3D Printing Tutorials How to Design Snap Fit Components How to Choose the Best Fasteners for 3D Printed Parts Adding Screw Threads Formlabs Tutorials - Great design references for SLA printing. Enclosure design for 3D Printing: A step-by-step guide Ultimaker Design guidelines Printing Process Ultimaker 3 Features Explained - Professional 3D printing made accessible - Start here to understand machine features and printing process. Premium Innovation: The Ultimaker 3 review! - A printer review / walkthrough video showcasing different aspects of the printing workflow. Features printing from a mobile device. Comparing FDM, SLS, and SLA 3D Printing Materials What is the best type of plastic for my 3D printing application? Gizmodorks Troubleshooting Ultimaker 3 Support Simplify3D: Print Quality Troubleshooting Guide Repairing 3D Files With Meshmixer and Netfabb Ultimaker 3 (Matter Hackers) Post Processing Ultimate Guide to Finishing 3D Printed Parts Post processing for FDM printed parts Post processing for SPA printed parts How to spray paint 3d models XTC-3D Epoxy 3D Printing Services Shapeways Sculpteo i.materialise 3D Hubs Fictiv Ponoko Voodoo Manufacturing History The Official History of the Reprap Project - Everything you ever wanted to know about the beginning of open-source 3d printers. Reprap.org Reprap Family Tree","title":"Design for 3D Printing"},{"location":"guides/design-for-3d-printing/#design-for-3d-printing","text":"This guide provides a variety of resources for designing for additive manufacturing or 3d printing.","title":"Design for 3D Printing"},{"location":"guides/design-for-3d-printing/#books","text":"The 3D Printing Handbook: Technologies, design and applications","title":"Books"},{"location":"guides/design-for-3d-printing/#design-process","text":"","title":"Design Process"},{"location":"guides/design-for-3d-printing/#manufacturing-methods","text":"The different types of 3D printing Additive Manufacturing Technologies (Image) Source: 3D Hubs Additive Manufacturing Technologies: An Overview","title":"Manufacturing Methods"},{"location":"guides/design-for-3d-printing/#3d-models","text":"Thingiverse Instuctables Thingi10K: A Dataset of 10,000 3D-Printing Models , Website NASA 3D Printable Models - Repository of 3d printable models from NASA.","title":"3D Models"},{"location":"guides/design-for-3d-printing/#design-guides","text":"The Complete Engineering Guide: 3D Printing by 3D Hubs - This is an outstanding primer on 3D printing. Key design considerations for 3D Printing i.materialise Design Guide Shapeways: Modeling & Design Tips 3D Printing Tutorials How to Design Snap Fit Components How to Choose the Best Fasteners for 3D Printed Parts Adding Screw Threads Formlabs Tutorials - Great design references for SLA printing. Enclosure design for 3D Printing: A step-by-step guide Ultimaker Design guidelines","title":"Design Guides"},{"location":"guides/design-for-3d-printing/#printing-process","text":"Ultimaker 3 Features Explained - Professional 3D printing made accessible - Start here to understand machine features and printing process. Premium Innovation: The Ultimaker 3 review! - A printer review / walkthrough video showcasing different aspects of the printing workflow. Features printing from a mobile device. Comparing FDM, SLS, and SLA 3D Printing","title":"Printing Process"},{"location":"guides/design-for-3d-printing/#materials","text":"What is the best type of plastic for my 3D printing application? Gizmodorks","title":"Materials"},{"location":"guides/design-for-3d-printing/#troubleshooting","text":"Ultimaker 3 Support Simplify3D: Print Quality Troubleshooting Guide Repairing 3D Files With Meshmixer and Netfabb Ultimaker 3 (Matter Hackers)","title":"Troubleshooting"},{"location":"guides/design-for-3d-printing/#post-processing","text":"Ultimate Guide to Finishing 3D Printed Parts Post processing for FDM printed parts Post processing for SPA printed parts How to spray paint 3d models XTC-3D Epoxy","title":"Post Processing"},{"location":"guides/design-for-3d-printing/#3d-printing-services","text":"Shapeways Sculpteo i.materialise 3D Hubs Fictiv Ponoko Voodoo Manufacturing","title":"3D Printing Services"},{"location":"guides/design-for-3d-printing/#history","text":"The Official History of the Reprap Project - Everything you ever wanted to know about the beginning of open-source 3d printers. Reprap.org Reprap Family Tree","title":"History"},{"location":"guides/design-for-cnc-milling/","text":"Design for CNC Milling This guide provides a variety of resources for designing for subtractive manufacturing methods such as CNC milling and CNC routing. Background History of CNC Machining, Part 1: The People, Stories, and Inventions That Made Today\u2019s Tech Possible History of CNC Machining, Part 2: The Evolution from NC to CNC History of CNC Machining, Part 3: From the Factory Floor to the Desktop The Edge Podcast by Bantam Tools Design Process Design Guides The Complete Engineering Guide: CNC Machining by 3D Hubs How to Design For CNC Milling by Adam Bender 3D Manufacturing Services 3D Hubs Fictiv","title":"Design for CNC Milling"},{"location":"guides/design-for-cnc-milling/#design-for-cnc-milling","text":"This guide provides a variety of resources for designing for subtractive manufacturing methods such as CNC milling and CNC routing.","title":"Design for CNC Milling"},{"location":"guides/design-for-cnc-milling/#background","text":"History of CNC Machining, Part 1: The People, Stories, and Inventions That Made Today\u2019s Tech Possible History of CNC Machining, Part 2: The Evolution from NC to CNC History of CNC Machining, Part 3: From the Factory Floor to the Desktop The Edge Podcast by Bantam Tools","title":"Background"},{"location":"guides/design-for-cnc-milling/#design-process","text":"","title":"Design Process"},{"location":"guides/design-for-cnc-milling/#design-guides","text":"The Complete Engineering Guide: CNC Machining by 3D Hubs How to Design For CNC Milling by Adam Bender","title":"Design Guides"},{"location":"guides/design-for-cnc-milling/#3d-manufacturing-services","text":"3D Hubs Fictiv","title":"3D Manufacturing Services"},{"location":"guides/design-for-cnc-routing/","text":"","title":"Design for cnc routing"},{"location":"guides/design-for-laser-cutting/","text":"Design for Laser Cutting This guide provides a variety of resources for designing for subtractive manufacturing methods such as laser cutting and vinyl cutting. Background Design Process Design Guides","title":"Design for Laser Cutting"},{"location":"guides/design-for-laser-cutting/#design-for-laser-cutting","text":"This guide provides a variety of resources for designing for subtractive manufacturing methods such as laser cutting and vinyl cutting.","title":"Design for Laser Cutting"},{"location":"guides/design-for-laser-cutting/#background","text":"","title":"Background"},{"location":"guides/design-for-laser-cutting/#design-process","text":"","title":"Design Process"},{"location":"guides/design-for-laser-cutting/#design-guides","text":"","title":"Design Guides"},{"location":"guides/final-projects/","text":"Final Projects Final Project Proposal Submit a proposal for a final project you intend to develop for the course. Use the development of this proposal as an opportunity to ask questions about any subject matter you learned about in class and are interested in becoming more skilled with and/or knowledgeable in. Your proposal should be formatted as a blog post on your critical making blog with all supporting media contained within the post. Your proposal should include the following: Project Title Project Members ~ 3 people max You are welcome to work on a project with or without group members. If you choose to work in a group, who is working on the project? What will each person contribute to the project? Project Summary ~ 1 page max What is it? What's it's purpose? What problem(s) are you solving? What will it do? How will it work? What challenges do you anticipate? In what ways does it or will it relate to your other work in Entrepreneurial Design, Design Leadership, and/or UX? Key components of your project What resources, skills, and technologies are needed to realize it? What kind of fidelity do you want to achieve? What \"materials\" do you need to use? Wood, Metal, Plastics, 3d models, CAD, 3d Printing, Electronics, Arduino, Sensors/Devices, Processing, CNC Milling, Mobile Devices, VR Equipment, etc What research have you done and/or still need to do? Milestones you have hit thus far and what you plan to do in order to realize it in the next 3-4 weeks. If you need to order parts and supplies, what do you need? What questions do you have? Where do you feel you are lacking in skill and need assistance? Final Project Presentation The final project will be presented in the final week of class. Due to the university mandate requiring course work completed remotely after Thanksgiving, you will need to prepare a presentation that can be delivered live during the final remote class session or as a pre recorded presentaiton. Final Project Documentation Documentation is to be submitted the form of a blog post with all supporting media necessary to explain the project development and outcomes. The general criteria outlined above applies to this final post. Be sure to include links to previous blog posts that document aspects of the project and any resources used in the process. What problem did you set out to solve? What is your project all about? How did you accomplish your goals? What resources did you make use of? What challenges did you encounter and how did you overcome them? What worked? What didn't? If this is a part of a larger long-term project, what milestones did you hit? What's next for this project? (Future Work) What are your major takeaways? What did you learn / discover? Last Updated: 10/22/20","title":"Final Projects"},{"location":"guides/final-projects/#final-projects","text":"","title":"Final Projects"},{"location":"guides/final-projects/#final-project-proposal","text":"Submit a proposal for a final project you intend to develop for the course. Use the development of this proposal as an opportunity to ask questions about any subject matter you learned about in class and are interested in becoming more skilled with and/or knowledgeable in. Your proposal should be formatted as a blog post on your critical making blog with all supporting media contained within the post. Your proposal should include the following: Project Title Project Members ~ 3 people max You are welcome to work on a project with or without group members. If you choose to work in a group, who is working on the project? What will each person contribute to the project? Project Summary ~ 1 page max What is it? What's it's purpose? What problem(s) are you solving? What will it do? How will it work? What challenges do you anticipate? In what ways does it or will it relate to your other work in Entrepreneurial Design, Design Leadership, and/or UX? Key components of your project What resources, skills, and technologies are needed to realize it? What kind of fidelity do you want to achieve? What \"materials\" do you need to use? Wood, Metal, Plastics, 3d models, CAD, 3d Printing, Electronics, Arduino, Sensors/Devices, Processing, CNC Milling, Mobile Devices, VR Equipment, etc What research have you done and/or still need to do? Milestones you have hit thus far and what you plan to do in order to realize it in the next 3-4 weeks. If you need to order parts and supplies, what do you need? What questions do you have? Where do you feel you are lacking in skill and need assistance?","title":"Final Project Proposal"},{"location":"guides/final-projects/#final-project-presentation","text":"The final project will be presented in the final week of class. Due to the university mandate requiring course work completed remotely after Thanksgiving, you will need to prepare a presentation that can be delivered live during the final remote class session or as a pre recorded presentaiton.","title":"Final Project Presentation"},{"location":"guides/final-projects/#final-project-documentation","text":"Documentation is to be submitted the form of a blog post with all supporting media necessary to explain the project development and outcomes. The general criteria outlined above applies to this final post. Be sure to include links to previous blog posts that document aspects of the project and any resources used in the process. What problem did you set out to solve? What is your project all about? How did you accomplish your goals? What resources did you make use of? What challenges did you encounter and how did you overcome them? What worked? What didn't? If this is a part of a larger long-term project, what milestones did you hit? What's next for this project? (Future Work) What are your major takeaways? What did you learn / discover? Last Updated: 10/22/20","title":"Final Project Documentation"},{"location":"guides/making-animated-gifs/","text":"Making Animated Gifs This guide demonstrates a few ways to make animated GIFs from generated content or by extracting frames from existing content. What is a GIF? At a basic level, a GIF is an animated image made up of a series of images or frames of a video. It's typically very small in size, which means the quality is far less than standard or high definition video and often appears a bit grainy if highly compressed. They are useful for sharing bite-size bundles of visual content. For instance, say you are trying to share a visual concept or UI design as a series of short animations. The most compact and way to do this is to generate GIFs vs using a high-res movie file. Many times, the same meaning can be conveyed in short simple bits of content. Tools for Capturing Images and Video macOS Screenshot Utilities CMD + Shift + 3 = Capture all screens CMD + Shift + 4, Define capture area CMD + Shift + 4 > SPACEBAR to select window CMD + Shift + 5 = All capture options including video capture Tools for Making Gifs Software Gif Brewery 3 - macOS LICEcap - macOS / Win Web Based Convert to GIF - This tool will convert almost any file format to a gif. ezgif - Simple GIF maker Giphy - Generates and hosts gifs for the web GIFMaker.me Other Tools Instasave - Simple tool for saving images and videos from Instagram posts and stories.","title":"Making Animated Gifs"},{"location":"guides/making-animated-gifs/#making-animated-gifs","text":"This guide demonstrates a few ways to make animated GIFs from generated content or by extracting frames from existing content. What is a GIF? At a basic level, a GIF is an animated image made up of a series of images or frames of a video. It's typically very small in size, which means the quality is far less than standard or high definition video and often appears a bit grainy if highly compressed. They are useful for sharing bite-size bundles of visual content. For instance, say you are trying to share a visual concept or UI design as a series of short animations. The most compact and way to do this is to generate GIFs vs using a high-res movie file. Many times, the same meaning can be conveyed in short simple bits of content.","title":"Making Animated Gifs"},{"location":"guides/making-animated-gifs/#tools-for-capturing-images-and-video","text":"macOS Screenshot Utilities CMD + Shift + 3 = Capture all screens CMD + Shift + 4, Define capture area CMD + Shift + 4 > SPACEBAR to select window CMD + Shift + 5 = All capture options including video capture","title":"Tools for Capturing Images and Video"},{"location":"guides/making-animated-gifs/#tools-for-making-gifs","text":"Software Gif Brewery 3 - macOS LICEcap - macOS / Win Web Based Convert to GIF - This tool will convert almost any file format to a gif. ezgif - Simple GIF maker Giphy - Generates and hosts gifs for the web GIFMaker.me","title":"Tools for Making Gifs"},{"location":"guides/making-animated-gifs/#other-tools","text":"Instasave - Simple tool for saving images and videos from Instagram posts and stories.","title":"Other Tools"},{"location":"guides/mobile-screen-capture/","text":"Mobile Screen Capture This guide demonstrates how to capture images and record video from your iOS mobile device. Taking Screenshots By pressing the Home button and Power button you can quickly capture a screenshot on any iOS device. The image shows up in your Photos app. Record Video on Device Add screen record button to Control Center (Shown when you swipe up). Settings > Control Center > Customize Controls Include Screen Recording in the list Press record and wait for the 3 sec countdown to begin Interact with device and press stop when done The video will be saved as an MP4 in your Photos. You can Edit (trim) video before or after transfering to your computer. Transfer your video via USB, iCloud, Dropbox, etc to a computer as needed. Record Video While Tethered to Computer Connect mobile device running iOS to computer via USB Lightning Cable. Launch QuickTime Player Choose File > New Movie Recording Click the small arrow next to the record button and choose Camera and Microphone to be your device. You may need to unlock your device before the screen shows up. If your camera or microphone doesn't show up, you may need to goto Security & Privacy in System Preferences and enable Microphone access for QuickTime Player as shown here . Press red/grey record button to begin video capture. Adjust volume as needed. Note some applications, such as Music, don't send audio. Save MOV file. You can convert any kind of video file to gif as shown below using a tool shown in Making Animated Gifs . This workflow is useful for documenting and sharing mobile based projects and experiments.","title":"Mobile Screen Capture"},{"location":"guides/mobile-screen-capture/#mobile-screen-capture","text":"This guide demonstrates how to capture images and record video from your iOS mobile device.","title":"Mobile Screen Capture"},{"location":"guides/mobile-screen-capture/#taking-screenshots","text":"By pressing the Home button and Power button you can quickly capture a screenshot on any iOS device. The image shows up in your Photos app.","title":"Taking Screenshots"},{"location":"guides/mobile-screen-capture/#record-video-on-device","text":"Add screen record button to Control Center (Shown when you swipe up). Settings > Control Center > Customize Controls Include Screen Recording in the list Press record and wait for the 3 sec countdown to begin Interact with device and press stop when done The video will be saved as an MP4 in your Photos. You can Edit (trim) video before or after transfering to your computer. Transfer your video via USB, iCloud, Dropbox, etc to a computer as needed.","title":"Record Video on Device"},{"location":"guides/mobile-screen-capture/#record-video-while-tethered-to-computer","text":"Connect mobile device running iOS to computer via USB Lightning Cable. Launch QuickTime Player Choose File > New Movie Recording Click the small arrow next to the record button and choose Camera and Microphone to be your device. You may need to unlock your device before the screen shows up. If your camera or microphone doesn't show up, you may need to goto Security & Privacy in System Preferences and enable Microphone access for QuickTime Player as shown here . Press red/grey record button to begin video capture. Adjust volume as needed. Note some applications, such as Music, don't send audio. Save MOV file. You can convert any kind of video file to gif as shown below using a tool shown in Making Animated Gifs . This workflow is useful for documenting and sharing mobile based projects and experiments.","title":"Record Video While Tethered to Computer"},{"location":"guides/writing-blog-posts/","text":"Writing Blog Posts This guide is to help you write blog posts with the purpose of documenting your work done in CM Studio courses. Getting Started Before you can write blog posts you need a place to put the blog posts you write. Most students in the program choose to use Medium because other courses make use of it for assignments, but you can use any platform you wish. Take a look at some alternatives under Blogs, Wikis, and Content Management Systems (CMS) if you would like to use another tool. Once you have a blog, you are ready to write posts. You can follow the criteria below and customize for any deliverable. What's in a post? A title that clearly describes the subject matter. It is recommended that a post includes a variety of media and content to support the subject matter. For example: text, images, video, graphics, photos, mockups, screen captures, tutorials, 3d model viewers (sketchfab), sketches, code, gifs, references, etc. Anything that is required to effectively communicate the details of a project, process, prototype, or idea. The subject matter is in response to the topics of the week. Ideally, it falls in line with your interests, research area, project, creative process, etc. For example, you might consider doing a series of tutorials on a topic that interests you or a process/workflow you are currently exploring through the course. Posts should be written to the best of your abilities and for a public audience. The post and any accompanying visual content (images, video) may be shared on social media.","title":"Writing Blog Posts"},{"location":"guides/writing-blog-posts/#writing-blog-posts","text":"This guide is to help you write blog posts with the purpose of documenting your work done in CM Studio courses.","title":"Writing Blog Posts"},{"location":"guides/writing-blog-posts/#getting-started","text":"Before you can write blog posts you need a place to put the blog posts you write. Most students in the program choose to use Medium because other courses make use of it for assignments, but you can use any platform you wish. Take a look at some alternatives under Blogs, Wikis, and Content Management Systems (CMS) if you would like to use another tool. Once you have a blog, you are ready to write posts. You can follow the criteria below and customize for any deliverable.","title":"Getting Started"},{"location":"guides/writing-blog-posts/#whats-in-a-post","text":"A title that clearly describes the subject matter. It is recommended that a post includes a variety of media and content to support the subject matter. For example: text, images, video, graphics, photos, mockups, screen captures, tutorials, 3d model viewers (sketchfab), sketches, code, gifs, references, etc. Anything that is required to effectively communicate the details of a project, process, prototype, or idea. The subject matter is in response to the topics of the week. Ideally, it falls in line with your interests, research area, project, creative process, etc. For example, you might consider doing a series of tutorials on a topic that interests you or a process/workflow you are currently exploring through the course. Posts should be written to the best of your abilities and for a public audience. The post and any accompanying visual content (images, video) may be shared on social media.","title":"What's in a post?"},{"location":"imd/imd-looking-outwards/","text":"Looking Outwards [0]: The XR Landscape Technology & The Sacred Space: Exploring Contemporary Religious Experiences by Gia Almuaili Reality, But Make It Virtual by Caro Beresford-Wood Immersive Design: AR / VR by Yeon Choi Cool Tech is Cool by Steven Douglas IMD_AR Game by Min Kim Augmented Reality\u2014The Future Is Digital(ish) by Megan Kwiatkowski Scratching the Surface of VR by Nick Lunt AR/VR Journalism by Derek Palmer History in Augmented Reality by Tess Stevens VR in Traditional Education by Nicole Tang The XR Landscape by Yangmin Zhang Looking Outwards [1]: Motion Design Cinema 4D & The Octane Render by Gia Almuaili Admiring Motion Design by Caro Beresford-Wood Inspiring Motion designs/ers by Yeon Choi Cool Motion Graphics are Cool by Steven Douglas Motion design inspiration by Min Kim Looking Outwards 1 \u2014 Motion Design by Megan Kwiatkowski A Quick Look at the Motion in Motion Design by Nick Lunt Motion and Attention by Derek Palmer Motion Design by Tess Stevens Storytelling In Motion Design by Nicole Tang Motion Design Exploration by Yangmin Zhang Looking Outwards [2]: Report on XR Assets Unity-Built Apps & Video Games by Gia Almuaili The Wondrous Worlds of Cinema 4D and Unity by Caro Beresford-Wood CM: Report on XR assets by Yeon Choi Cool AR Stuff is Cool by Steven Douglas Intro to AR Game by Min Kim Looking Outwards 2 \u2014 Rick&Morty Meet Virtual Reality by Megan Kwiatkowski Bone Breaking VR Physics and Beautifully Animated Graphics by Nick Lunt Looking Outwards 2: Wrapping And Fixing XR Assets by Derek Palmer XR Asset Creation Experiments by Tess Stevens Continue Exploration for VR & AR by Yangmin Zhang Project #1: Asset Creation & Visualization Asset Creation & Visualization: Cartoons & Assets by Gia Almuaili Cinema4D, Torch AR, and a Whole Lot of Troubleshooting by Caro Beresford-Wood CM: Project 1 \u2014 C4D Low Poly by Yeon Choi Dealing with Trauma via Interactive AR Storytelling by Steven Douglas Project 1 \u2014 Asset Creation & Visualization by Megan Kwiatkowski I Made Some 3D Model Monstrosities in Blender by Nick Lunt IMD Project 1: AR Perspectives and Narrative by Derek Palmer Dancing Aliens, etc. C4D, Make Human, and Mixamo by Tess Stevens My Unity World by Nicole Tang Looking Outwards [3]: Identifying Functionality in Scripts Trying to Animate in Unity by Gia Almuaili Exploring Scripts in Unity by Caro Beresford-Wood C# is Cool by Steven Douglas Scripting Rotation in Unity by Derek Palmer Identifying Functionality in Scripts by Tess Stevens Little Game in Unity by Yangmin Zhang Looking Outwards [4]: Understanding AR Foundation Design Opportunities for AR by Gia Almuaili The Wondrous World of AR Foundation by Caro Beresford-Wood CM: AR Foundation and design opportunities by Yeon Choi AR Foundation is Cool by Steven Douglas Unity's AR Foundation by Min Kim AR is Hecking Awesome by Nick Lunt AR Foundation and Social Games by Derek Palmer Investigating AR Foundation by Tess Stevens Project #2: Build a Unity Based Mobile App Unity & Xcode by Gia Almuaili CM: Project 2 Unity & AR by Yeon Choi Master Chief and Some Text by Steven Douglas IMD Project 2: Accelerometer Ergonomics (Float-a-Ball) by Derek Palmer Building a Unity Mobile App by Tess Stevens Looking Outwards [5]: UI and UX for XR Research: UI & UX for XR by Gia Almuaili UI and UX in XR by Caro Beresford-Wood CM: UI UX and XR by Yeon Choi UI, UX, VR, AR by Steven Douglas The User Experience of XR - Designing For Empathy by Megan Kwiatkowski IMD: Multi-user Contextual AR Design by Derek Palmer UX and UI for XR by Tess Stevens","title":"Imd looking outwards"},{"location":"imd/imd-looking-outwards/#looking-outwards-0-the-xr-landscape","text":"Technology & The Sacred Space: Exploring Contemporary Religious Experiences by Gia Almuaili Reality, But Make It Virtual by Caro Beresford-Wood Immersive Design: AR / VR by Yeon Choi Cool Tech is Cool by Steven Douglas IMD_AR Game by Min Kim Augmented Reality\u2014The Future Is Digital(ish) by Megan Kwiatkowski Scratching the Surface of VR by Nick Lunt AR/VR Journalism by Derek Palmer History in Augmented Reality by Tess Stevens VR in Traditional Education by Nicole Tang The XR Landscape by Yangmin Zhang","title":"Looking Outwards [0]: The XR Landscape"},{"location":"imd/imd-looking-outwards/#looking-outwards-1-motion-design","text":"Cinema 4D & The Octane Render by Gia Almuaili Admiring Motion Design by Caro Beresford-Wood Inspiring Motion designs/ers by Yeon Choi Cool Motion Graphics are Cool by Steven Douglas Motion design inspiration by Min Kim Looking Outwards 1 \u2014 Motion Design by Megan Kwiatkowski A Quick Look at the Motion in Motion Design by Nick Lunt Motion and Attention by Derek Palmer Motion Design by Tess Stevens Storytelling In Motion Design by Nicole Tang Motion Design Exploration by Yangmin Zhang","title":"Looking Outwards [1]: Motion Design"},{"location":"imd/imd-looking-outwards/#looking-outwards-2-report-on-xr-assets","text":"Unity-Built Apps & Video Games by Gia Almuaili The Wondrous Worlds of Cinema 4D and Unity by Caro Beresford-Wood CM: Report on XR assets by Yeon Choi Cool AR Stuff is Cool by Steven Douglas Intro to AR Game by Min Kim Looking Outwards 2 \u2014 Rick&Morty Meet Virtual Reality by Megan Kwiatkowski Bone Breaking VR Physics and Beautifully Animated Graphics by Nick Lunt Looking Outwards 2: Wrapping And Fixing XR Assets by Derek Palmer XR Asset Creation Experiments by Tess Stevens Continue Exploration for VR & AR by Yangmin Zhang","title":"Looking Outwards [2]: Report on XR Assets"},{"location":"imd/imd-looking-outwards/#project-1-asset-creation-visualization","text":"Asset Creation & Visualization: Cartoons & Assets by Gia Almuaili Cinema4D, Torch AR, and a Whole Lot of Troubleshooting by Caro Beresford-Wood CM: Project 1 \u2014 C4D Low Poly by Yeon Choi Dealing with Trauma via Interactive AR Storytelling by Steven Douglas Project 1 \u2014 Asset Creation & Visualization by Megan Kwiatkowski I Made Some 3D Model Monstrosities in Blender by Nick Lunt IMD Project 1: AR Perspectives and Narrative by Derek Palmer Dancing Aliens, etc. C4D, Make Human, and Mixamo by Tess Stevens My Unity World by Nicole Tang","title":"Project #1: Asset Creation &amp; Visualization"},{"location":"imd/imd-looking-outwards/#looking-outwards-3-identifying-functionality-in-scripts","text":"Trying to Animate in Unity by Gia Almuaili Exploring Scripts in Unity by Caro Beresford-Wood C# is Cool by Steven Douglas Scripting Rotation in Unity by Derek Palmer Identifying Functionality in Scripts by Tess Stevens Little Game in Unity by Yangmin Zhang","title":"Looking Outwards [3]: Identifying Functionality in Scripts"},{"location":"imd/imd-looking-outwards/#looking-outwards-4-understanding-ar-foundation","text":"Design Opportunities for AR by Gia Almuaili The Wondrous World of AR Foundation by Caro Beresford-Wood CM: AR Foundation and design opportunities by Yeon Choi AR Foundation is Cool by Steven Douglas Unity's AR Foundation by Min Kim AR is Hecking Awesome by Nick Lunt AR Foundation and Social Games by Derek Palmer Investigating AR Foundation by Tess Stevens","title":"Looking Outwards [4]: Understanding AR Foundation"},{"location":"imd/imd-looking-outwards/#project-2-build-a-unity-based-mobile-app","text":"Unity & Xcode by Gia Almuaili CM: Project 2 Unity & AR by Yeon Choi Master Chief and Some Text by Steven Douglas IMD Project 2: Accelerometer Ergonomics (Float-a-Ball) by Derek Palmer Building a Unity Mobile App by Tess Stevens","title":"Project #2: Build a Unity Based Mobile App"},{"location":"imd/imd-looking-outwards/#looking-outwards-5-ui-and-ux-for-xr","text":"Research: UI & UX for XR by Gia Almuaili UI and UX in XR by Caro Beresford-Wood CM: UI UX and XR by Yeon Choi UI, UX, VR, AR by Steven Douglas The User Experience of XR - Designing For Empathy by Megan Kwiatkowski IMD: Multi-user Contextual AR Design by Derek Palmer UX and UI for XR by Tess Stevens","title":"Looking Outwards [5]: UI and UX for XR"},{"location":"pc/","text":"Parts and Supplies Sparkfun Adafruit Digikey Mouser Arrow Tools for Prototyping Electronics Multimeter - Measuring Voltage, Current, Resistance. Try to do this with the Arduino and its pins. How to use a multimeter Soldering Soldering Tutorial for Beginners: Five Easy Steps (Video) How to Solder (Instructables) Wires Working with wire How to Strip a wire","title":"Tools"},{"location":"pc/#parts-and-supplies","text":"Sparkfun Adafruit Digikey Mouser Arrow","title":"Parts and Supplies"},{"location":"pc/#tools-for-prototyping-electronics","text":"Multimeter - Measuring Voltage, Current, Resistance. Try to do this with the Arduino and its pins. How to use a multimeter Soldering Soldering Tutorial for Beginners: Five Easy Steps (Video) How to Solder (Instructables) Wires Working with wire How to Strip a wire","title":"Tools for Prototyping Electronics"},{"location":"pc/learning-arduino/","text":"This section contains resources for learning how to work with Arduino microcontrollers. Note this is a living document and is constantly being updated. Some things may come and go over time. Getting Started Arduino - What IS it? - Great overview What is an Arduino? A Beginners Guide to Arduino Arduino IDE Arduino Language Reference Arduino Hardware Arduino Uno Specs Arduino Prototyping Techniques History & Ethos Massimo Banzi: How Arduino is open-sourcing imagination (TED Talk) The Untold History of Arduino by Hernando Barrag\u00e1n - A great article on the history of Arduino and how it came to be. The Making of Arduino (2011) Open Source Hardware Association (OSHWA) Circuit Simulators Autodesk Tinkercad Circuits / Arduino UNO w/ TinkerCAD Circuits Tutorial - Youtube playlist of how-to videos. Arduino Boards Arduino UNO Sparkfun Arduino Uno Adafruit Arduino Uno Sparkfun Redboard Arduino Pro Mini Arduino Mega Sparkfun ESP32 Thing - Good for WiFi enabled projects! ESP32 ESP8266 Based Boards Sparkfun ESP8266 Thing NodeMCU (ESP8266) ( Amazon ), A Beginner's Guide to the ESP8266 Arduino Products Arduino Buying Guide by Sparkfun Adafruit Arduino Products Sparkfun Arduino Boards Sparkfun Arduino Products Examples / Tutorials Built In Examples Sparkfun Arduino Tutorials Adafruit Arduino Learning System Projects Instructables 20 Unbelievable Arduino Projects Arduino Playground 20 Projects to Celebrate Arduino Day Hackster.io Arduino Projects DIY Hacking Arduino Arduino Projects on Pintrest Arduino Project Hub 20 Arduino Projects with DIY Instructions - A great set of tutorials for building things with Arduino.","title":"Learning Arduino"},{"location":"pc/learning-arduino/#getting-started","text":"Arduino - What IS it? - Great overview What is an Arduino? A Beginners Guide to Arduino Arduino IDE Arduino Language Reference Arduino Hardware Arduino Uno Specs Arduino Prototyping Techniques","title":"Getting Started"},{"location":"pc/learning-arduino/#history-ethos","text":"Massimo Banzi: How Arduino is open-sourcing imagination (TED Talk) The Untold History of Arduino by Hernando Barrag\u00e1n - A great article on the history of Arduino and how it came to be. The Making of Arduino (2011) Open Source Hardware Association (OSHWA)","title":"History &amp; Ethos"},{"location":"pc/learning-arduino/#circuit-simulators","text":"Autodesk Tinkercad Circuits / Arduino UNO w/ TinkerCAD Circuits Tutorial - Youtube playlist of how-to videos.","title":"Circuit Simulators"},{"location":"pc/learning-arduino/#arduino-boards","text":"Arduino UNO Sparkfun Arduino Uno Adafruit Arduino Uno Sparkfun Redboard Arduino Pro Mini Arduino Mega Sparkfun ESP32 Thing - Good for WiFi enabled projects! ESP32 ESP8266 Based Boards Sparkfun ESP8266 Thing NodeMCU (ESP8266) ( Amazon ), A Beginner's Guide to the ESP8266","title":"Arduino Boards"},{"location":"pc/learning-arduino/#arduino-products","text":"Arduino Buying Guide by Sparkfun Adafruit Arduino Products Sparkfun Arduino Boards Sparkfun Arduino Products","title":"Arduino Products"},{"location":"pc/learning-arduino/#examples-tutorials","text":"Built In Examples Sparkfun Arduino Tutorials Adafruit Arduino Learning System","title":"Examples / Tutorials"},{"location":"pc/learning-arduino/#projects","text":"Instructables 20 Unbelievable Arduino Projects Arduino Playground 20 Projects to Celebrate Arduino Day Hackster.io Arduino Projects DIY Hacking Arduino Arduino Projects on Pintrest Arduino Project Hub 20 Arduino Projects with DIY Instructions - A great set of tutorials for building things with Arduino.","title":"Projects"},{"location":"pc/learning-eagle/","text":"This section contains resources for learning how to work with Eagle CAD. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner Tutorials Sparkfun Using EAGLE: Schematic Sparkfun Using EAGLE: Board Layout Bantam Mill: Intro to Creating Circuits with EAGLE From the Archives: Convert Gerber Files to G-Code with FlatCAM","title":"Learning Eagle (CAD)"},{"location":"pc/learning-eagle/#beginner","text":"","title":"Beginner"},{"location":"pc/learning-eagle/#tutorials","text":"Sparkfun Using EAGLE: Schematic Sparkfun Using EAGLE: Board Layout Bantam Mill: Intro to Creating Circuits with EAGLE From the Archives: Convert Gerber Files to G-Code with FlatCAM","title":"Tutorials"},{"location":"pc/learning-electronics/","text":"This section contains resources for learning the basics of electronics and tools used for working with electronics. Note this is a living document and is constantly being updated. Some things may come and go over time. Basic Electronics What is Electricity? Electricity Explained (Youtube) Sparkfun - Where Do I Start? Ohms Law: Voltage, Current, Resistance, Power Analog vs Digital Series and Parallel Circuits Resistors LEDS ADCs and DACs How to Power a Project","title":"Learning Electronics"},{"location":"pc/learning-electronics/#basic-electronics","text":"What is Electricity? Electricity Explained (Youtube) Sparkfun - Where Do I Start? Ohms Law: Voltage, Current, Resistance, Power Analog vs Digital Series and Parallel Circuits Resistors LEDS ADCs and DACs How to Power a Project","title":"Basic Electronics"},{"location":"pc/learning-rpi/","text":"This section contains resources for learning how to work with Raspberry Pi's. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner Raspberry Pi Foundation Raspberry Pi Downloads Raspberry Pi Setup Raspberry Pi Help Getting Started I recommend everyone purchase their own Raspberry Pi device and 16 or 32GB MicroSD card(s) . We do have a few Raspberry Pi boards in the shop but are low on MicroSD cards. We have plenty of Arduino boards to use so no need to purchase one unless you want to own one. You can pick up a Raspberry Pi 3 on Amazon or Microcenter (Retail Store in Denver). If you want a more complete starter kit you can find similar systems on Amazon, Sparkfun , and other online retailers. Packages with more components will typically cost more. Note that the Raspberry Pi 3 B+ was just released (on Pi Day 3/14/2018) and it costs a bit more than its predecessor (3 Model B). It doesn't matter if you have this new version or the slightly older version. Typical Raspberry Pi Setup Raspberry Pi 3 ~ $35 16, 32, or 64 GB MicroSD Card (16 GB is a good size to start with) ~ $10 for 16 GB HDMI Cable (To plug in display) ~ $6 USB Keyboard ~ $5-15 Est Total: $66 Terminal / Command Line Learning Terminal ssh, vi, scp (Transferring Data to/from Raspberry Pi's) Raspberry Pi 3 Model B / Amazon Raspberry Pi 3 Model B+ / Amazon Raspberry Pi A+ Tools and Frameworks RetroPi Openframe","title":"Learning Raspberry Pi"},{"location":"pc/learning-rpi/#beginner","text":"Raspberry Pi Foundation Raspberry Pi Downloads Raspberry Pi Setup Raspberry Pi Help","title":"Beginner"},{"location":"pc/learning-rpi/#getting-started","text":"I recommend everyone purchase their own Raspberry Pi device and 16 or 32GB MicroSD card(s) . We do have a few Raspberry Pi boards in the shop but are low on MicroSD cards. We have plenty of Arduino boards to use so no need to purchase one unless you want to own one. You can pick up a Raspberry Pi 3 on Amazon or Microcenter (Retail Store in Denver). If you want a more complete starter kit you can find similar systems on Amazon, Sparkfun , and other online retailers. Packages with more components will typically cost more. Note that the Raspberry Pi 3 B+ was just released (on Pi Day 3/14/2018) and it costs a bit more than its predecessor (3 Model B). It doesn't matter if you have this new version or the slightly older version. Typical Raspberry Pi Setup Raspberry Pi 3 ~ $35 16, 32, or 64 GB MicroSD Card (16 GB is a good size to start with) ~ $10 for 16 GB HDMI Cable (To plug in display) ~ $6 USB Keyboard ~ $5-15 Est Total: $66 Terminal / Command Line Learning Terminal ssh, vi, scp (Transferring Data to/from Raspberry Pi's) Raspberry Pi 3 Model B / Amazon Raspberry Pi 3 Model B+ / Amazon Raspberry Pi A+","title":"Getting Started"},{"location":"pc/learning-rpi/#tools-and-frameworks","text":"RetroPi Openframe","title":"Tools and Frameworks"},{"location":"ppd/ppd-looking-outwards/","text":"Looking Outwards [0]: The Parametric Design Landscape The Parametric Design Landscape by Yvonne Danyluck Parametric Forms in Everyday Life by Vanessa Frye Parametric Design by Mark Grundberg Looking Outwards [0]: The Parametric Design Landscape - Areas Ripe for Parametric Design Exploration by Clayton Kenny Utilizing Parametric Design by Dave Laskowski Research in Parametric Design by Aitana Rothfeld Parametric Design by Josh Sheetz Looking Outwards [1]: Patterns in Product Design The Parametric Design Landscape by Yvonne Danyluck Patterns in Product Design by Vanessa Frye Exploring Fractal Patterns by Mark Grundberg Looking Outwards [1]: Patterns in Product Design by Clayton Kenny Tessellate: looking at the application of symmetry and patterns of products by Dave Laskowski Patterns. Patterns Everywhere. by Aitana Rothfeld Parametric Patterns by Josh Sheetz Looking Outwards [2]: Patterns with Purpose Algorithmic Patterns by Yvonne Danyluck Breeze Block Designs Outside of Architecture by Vanessa Frye Fractals 2.0 by Mark Grundberg Moir\u00e9 Musings by Clayton Kenny Tactile in Motion by Dave Laskowski Tactile Patterning by Aitana Rothfeld Making Parametric Design Tangible by Josh Sheetz Looking Outwards [3]: CNC Milled Products CNC Milling by Yvonne Danyluck CNC Milled Products\u2013Fashion vs. Function by Vanessa Frye Holy Ship! Look at that CNC Milling by Mark Grundberg CNC Milled Products by Clayton Kenny CNC Milled Products by Dave Laskowski Slice and Dice: Learning about CNC milling by Aitana Rothfeld Bantam Boys by Josh Sheetz Looking Outwards [4]: 3D Printed Products 3D Printed Products and Processes by Yvonne Danyluck 3D Printing Everyday Products Opens the Door for Customization by Vanessa Frye 3D Printing Possibilities by Mark Grundberg 3D Printed Products by Clayton Kenny Exploring the Third Dimension by Dave Laskowski Topographic 3D Printing by Aitana Rothfeld 3D Printing and its Infinite Applications by Josh Sheetz","title":"Ppd looking outwards"},{"location":"ppd/ppd-looking-outwards/#looking-outwards-0-the-parametric-design-landscape","text":"The Parametric Design Landscape by Yvonne Danyluck Parametric Forms in Everyday Life by Vanessa Frye Parametric Design by Mark Grundberg Looking Outwards [0]: The Parametric Design Landscape - Areas Ripe for Parametric Design Exploration by Clayton Kenny Utilizing Parametric Design by Dave Laskowski Research in Parametric Design by Aitana Rothfeld Parametric Design by Josh Sheetz","title":"Looking Outwards [0]: The Parametric Design Landscape"},{"location":"ppd/ppd-looking-outwards/#looking-outwards-1-patterns-in-product-design","text":"The Parametric Design Landscape by Yvonne Danyluck Patterns in Product Design by Vanessa Frye Exploring Fractal Patterns by Mark Grundberg Looking Outwards [1]: Patterns in Product Design by Clayton Kenny Tessellate: looking at the application of symmetry and patterns of products by Dave Laskowski Patterns. Patterns Everywhere. by Aitana Rothfeld Parametric Patterns by Josh Sheetz","title":"Looking Outwards [1]: Patterns in Product Design"},{"location":"ppd/ppd-looking-outwards/#looking-outwards-2-patterns-with-purpose","text":"Algorithmic Patterns by Yvonne Danyluck Breeze Block Designs Outside of Architecture by Vanessa Frye Fractals 2.0 by Mark Grundberg Moir\u00e9 Musings by Clayton Kenny Tactile in Motion by Dave Laskowski Tactile Patterning by Aitana Rothfeld Making Parametric Design Tangible by Josh Sheetz","title":"Looking Outwards [2]: Patterns with Purpose"},{"location":"ppd/ppd-looking-outwards/#looking-outwards-3-cnc-milled-products","text":"CNC Milling by Yvonne Danyluck CNC Milled Products\u2013Fashion vs. Function by Vanessa Frye Holy Ship! Look at that CNC Milling by Mark Grundberg CNC Milled Products by Clayton Kenny CNC Milled Products by Dave Laskowski Slice and Dice: Learning about CNC milling by Aitana Rothfeld Bantam Boys by Josh Sheetz","title":"Looking Outwards [3]: CNC Milled Products"},{"location":"ppd/ppd-looking-outwards/#looking-outwards-4-3d-printed-products","text":"3D Printed Products and Processes by Yvonne Danyluck 3D Printing Everyday Products Opens the Door for Customization by Vanessa Frye 3D Printing Possibilities by Mark Grundberg 3D Printed Products by Clayton Kenny Exploring the Third Dimension by Dave Laskowski Topographic 3D Printing by Aitana Rothfeld 3D Printing and its Infinite Applications by Josh Sheetz","title":"Looking Outwards [4]: 3D Printed Products"},{"location":"studio-handbook/","text":"This handbook covers useful information about CMCI Studio spaces, rules, technology, and equipment. It is recommended that all students and faculty read through this page and refer to it often. Send any questions, comments, or suggestions via email or slack (@rjduran). Note this is a living document and is constantly being updated. West Studio Features: Secure 24/7 Access Large tables and chairs Kitchen AV Editing Workstation Photo Studio Configurable performance space Lighting Grid North Studio Features: Secure 24/7 Access Workshop Rapid Prototyping Large tables and chairs Printers Laptops VR Equipment WIFI High speed WIFI access is available in both studio spaces. The password for access is posted on the wall in each room. Access Points (SSID) Location CMCI-STUDIO-1 West Studio CMCI-STUDIO-2 North Studio Studio Rules The Studio space is a 24/7 facility. The Studio masters program is one of many activities that take place in the space. You will have an individualized FOB to enter the building. Contact faculty asap if your FOB goes missing. Food and drinks are allowed, but alcohol is NOT permitted on the premises. Bathrooms are through the door on the east side of the courtyard. You need a FOB to access. The kitchen is for your use. But you are expected to clean dishes etc. If you are the last person here, you are expected to turn off the lights and ensure that all doors are secure before you leave. The courtyard is a shared space with all the other building tenants. Treat the space as you would your home or office. You are expected to clean up after yourself. Do not stream or download illegial content on CMCI Studio network. General Safety TODO Printers To access the paper printer you need to be connected to one of the local wifi access points shown above. The following printers are available for use. Make/Model Type Location Website Brother MCF-L6800DW Black/White North Studio Support MacOS: Add the printer by going to System Preferences > Printers & Scanners and click the + sign. You should get the option to add the \"Brother MCF-L6800DW\" printer. After doing so you should be able to send jobs to print. Projectors Room Lights Lighting Grid Mobile Displays Photo Studio Equipment insert camera list here Media Workstations AV Editing VR & Rendering Room Cameras Streaming Content VR Equipment Laptops Usage Policy The Critical Making Studio has Razer Blade (14\") laptops for use with advanced graphics and media applications such as VR, 3d modeling, and programming. The laptops are to remain at the studio at all times. No exceptions. Personal files should be backed up using USB drives and/or a cloud based service such as Dropbox or Google Drive. Do not expect your files to be available on any one laptop the next time you use it. Please report any technical issues to RJ asap. Login The laptops are setup to be identical with following user account and installed software. Account: Student Password: student Software Rhino 5 + Grasshopper Fusion 360 Unity 5.6.4 Unity 2017.2.1 Unity 2017.3.0 Steam SteamVR Maya 2018 Adobe Creative Cloud - Login Required Blender Meshmixer Google Chrome Firefox Visual Studio 2017 Community Ultimaker Cura Screencast-O-Matic Notepad++ Meshlab DAZ 3D File Server The Critical Making Studio has a local network shared folder for transferring large projects between computers. You can access it locally at the studio or remotely from outside the studio. Server Use Make sure you keep backups of your projects on your local machines in case the server is ever down or someone deletes a folder. Be aware that once you delete a folder from the server its gone forever. You may make any folders you want or use any of the folders with your name. Local Access Connect to CMCI-STUDIO-2 network in the North Studio via Wifi or Ethernet cable. On MacOS: Go > Connect to Server (CMD + K) Enter: smb://CMCI_STUDIO/cm_share Click Connect Enter Username and Password when prompted. The shared folder should appear in the Finder. If it doesn\u2019t, go to Go > Network (SHIFT+CMD+K) and you will see the \"CMCI_STUDIO\" server with \"cm_share\" available. On Windows: Open Windows Explorer and choose Tools > Map Network Drive. Choose a drive number from the Drive drop-down menu. Enter: \\\\CMCI_STUDIO\\cm_share Click Finish Enter Username and Password when prompted. The shared folder should appear in the Windows Explorer as a network drive. Remote Access On MacOS: Go > Connect to Server (CMD + K) Enter: https://cmcistudio.synology.me:5006 Click Connect Enter Username and Password when prompted. The shared folder should appear in the Finder. If it doesn\u2019t, go to Go > Network (SHIFT+CMD+K) and you will see the \"cmcistudio.synology.me:5006\" server with \u201ccm_share\u201d available.","title":"Studio Handbook"},{"location":"studio-handbook/#west-studio","text":"Features: Secure 24/7 Access Large tables and chairs Kitchen AV Editing Workstation Photo Studio Configurable performance space Lighting Grid","title":"West Studio"},{"location":"studio-handbook/#north-studio","text":"Features: Secure 24/7 Access Workshop Rapid Prototyping Large tables and chairs Printers Laptops VR Equipment","title":"North Studio"},{"location":"studio-handbook/#wifi","text":"High speed WIFI access is available in both studio spaces. The password for access is posted on the wall in each room. Access Points (SSID) Location CMCI-STUDIO-1 West Studio CMCI-STUDIO-2 North Studio","title":"WIFI"},{"location":"studio-handbook/#studio-rules","text":"The Studio space is a 24/7 facility. The Studio masters program is one of many activities that take place in the space. You will have an individualized FOB to enter the building. Contact faculty asap if your FOB goes missing. Food and drinks are allowed, but alcohol is NOT permitted on the premises. Bathrooms are through the door on the east side of the courtyard. You need a FOB to access. The kitchen is for your use. But you are expected to clean dishes etc. If you are the last person here, you are expected to turn off the lights and ensure that all doors are secure before you leave. The courtyard is a shared space with all the other building tenants. Treat the space as you would your home or office. You are expected to clean up after yourself. Do not stream or download illegial content on CMCI Studio network.","title":"Studio Rules"},{"location":"studio-handbook/#general-safety","text":"TODO","title":"General Safety"},{"location":"studio-handbook/#printers","text":"To access the paper printer you need to be connected to one of the local wifi access points shown above. The following printers are available for use. Make/Model Type Location Website Brother MCF-L6800DW Black/White North Studio Support MacOS: Add the printer by going to System Preferences > Printers & Scanners and click the + sign. You should get the option to add the \"Brother MCF-L6800DW\" printer. After doing so you should be able to send jobs to print.","title":"Printers"},{"location":"studio-handbook/#projectors","text":"","title":"Projectors"},{"location":"studio-handbook/#room-lights","text":"","title":"Room Lights"},{"location":"studio-handbook/#lighting-grid","text":"","title":"Lighting Grid"},{"location":"studio-handbook/#mobile-displays","text":"","title":"Mobile Displays"},{"location":"studio-handbook/#photo-studio","text":"","title":"Photo Studio"},{"location":"studio-handbook/#equipment","text":"insert camera list here","title":"Equipment"},{"location":"studio-handbook/#media-workstations","text":"","title":"Media Workstations"},{"location":"studio-handbook/#av-editing","text":"","title":"AV Editing"},{"location":"studio-handbook/#vr-rendering","text":"","title":"VR &amp; Rendering"},{"location":"studio-handbook/#room-cameras","text":"","title":"Room Cameras"},{"location":"studio-handbook/#streaming-content","text":"","title":"Streaming Content"},{"location":"studio-handbook/#vr-equipment","text":"","title":"VR Equipment"},{"location":"studio-handbook/#laptops","text":"Usage Policy The Critical Making Studio has Razer Blade (14\") laptops for use with advanced graphics and media applications such as VR, 3d modeling, and programming. The laptops are to remain at the studio at all times. No exceptions. Personal files should be backed up using USB drives and/or a cloud based service such as Dropbox or Google Drive. Do not expect your files to be available on any one laptop the next time you use it. Please report any technical issues to RJ asap. Login The laptops are setup to be identical with following user account and installed software. Account: Student Password: student","title":"Laptops"},{"location":"studio-handbook/#software","text":"Rhino 5 + Grasshopper Fusion 360 Unity 5.6.4 Unity 2017.2.1 Unity 2017.3.0 Steam SteamVR Maya 2018 Adobe Creative Cloud - Login Required Blender Meshmixer Google Chrome Firefox Visual Studio 2017 Community Ultimaker Cura Screencast-O-Matic Notepad++ Meshlab DAZ 3D","title":"Software"},{"location":"studio-handbook/#file-server","text":"The Critical Making Studio has a local network shared folder for transferring large projects between computers. You can access it locally at the studio or remotely from outside the studio. Server Use Make sure you keep backups of your projects on your local machines in case the server is ever down or someone deletes a folder. Be aware that once you delete a folder from the server its gone forever. You may make any folders you want or use any of the folders with your name.","title":"File Server"},{"location":"studio-handbook/#local-access","text":"Connect to CMCI-STUDIO-2 network in the North Studio via Wifi or Ethernet cable. On MacOS: Go > Connect to Server (CMD + K) Enter: smb://CMCI_STUDIO/cm_share Click Connect Enter Username and Password when prompted. The shared folder should appear in the Finder. If it doesn\u2019t, go to Go > Network (SHIFT+CMD+K) and you will see the \"CMCI_STUDIO\" server with \"cm_share\" available. On Windows: Open Windows Explorer and choose Tools > Map Network Drive. Choose a drive number from the Drive drop-down menu. Enter: \\\\CMCI_STUDIO\\cm_share Click Finish Enter Username and Password when prompted. The shared folder should appear in the Windows Explorer as a network drive.","title":"Local Access"},{"location":"studio-handbook/#remote-access","text":"On MacOS: Go > Connect to Server (CMD + K) Enter: https://cmcistudio.synology.me:5006 Click Connect Enter Username and Password when prompted. The shared folder should appear in the Finder. If it doesn\u2019t, go to Go > Network (SHIFT+CMD+K) and you will see the \"cmcistudio.synology.me:5006\" server with \u201ccm_share\u201d available.","title":"Remote Access"},{"location":"studio-handbook/policies/","text":"CU Policies and Procedures Classroom Behavior Students and faculty each have responsibility for maintaining an appropriate learning environment. Those who fail to adhere to such behavioral standards may be subject to discipline. Professional courtesy and sensitivity are especially important with respect to individuals and topics dealing with differences of race, color, culture, religion, creed, politics, veteran\u2019s status, sexual orientation, gender, gender identity and gender expression, age, disability, and nationalities. Class rosters are provided to the instructor with the student's legal name. I will gladly honor your request to address you by an alternate name or gender pronoun. Please advise me of this preference early in the semester so that I may make appropriate changes to my records. See policies at: http://www.colorado.edu/policies/classbehavior.html and at http://www.colorado.edu/studentaffairs/judicialaffairs Disability If you qualify for accommodations because of a disability, please submit to your professor a letter from Disability Services in a timely manner (for exam accommodations provide your letter at least one week prior to the exam) so that your needs can be addressed. Disability Services determines accommodations based on documented disabilities. Contact Disability Services at 303-492-8671 or by e-mail at dsinfo@colorado.edu. If you have a temporary medical condition or injury, see Temporary Medical Conditions: Injuries, Surgeries, and Illnesses guidelines under Quick Links at Disability Services website and discuss your needs with your professor. Religious Observance Campus policy regarding religious observances requires that faculty make every effort to deal reasonably and fairly with all students who, because of religious obligations, have conflicts with scheduled exams, assignments or required attendance. Please notify me as quickly as possible regarding any possible absences so that we can plan your work accordingly. See full details at http://www.colorado.edu/policies/fac_relig.html Discrimination and Harassment The University of Colorado Boulder (CU-Boulder) is committed to maintaining a positive learning, working, and living environment. The University of Colorado does not discriminate on the basis of race, color, national origin, sex, age, disability, creed, religion, sexual orientation, or veteran status in admission and access to, and treatment and employment in, its educational programs and activities. (Regent Law, Article 10, amended 11/8/2001). CU-Boulder will not tolerate acts of discrimination or harassment based upon Protected Classes or related retaliation against or by any employee or student. For purposes of this CU-Boulder policy, \"Protected Classes\" refers to race, color, national origin, sex, pregnancy, age, disability, creed, religion, sexual orientation, gender identity, gender expression, or veteran status. Individuals who believe they have been discriminated against should contact the Office of Discrimination and Harassment (ODH) at 303-492-2127 or the Office of Student Conduct (OSC) at 303-492-5550. Information about the ODH, the above referenced policies, and the campus resources available to assist individuals regarding discrimination or harassment can be obtained at http://hr.colorado.edu/dh/ Honor Code All students of the University of Colorado at Boulder are responsible for knowing and adhering to the academic integrity policy of this institution. Violations of this policy may include: cheating, plagiarism, aid of academic dishonesty, fabrication, lying, bribery, and threatening behavior. All incidents of academic misconduct shall be reported to the Honor Code Council (honor@colorado.edu; 303-735-2273). Students who are found to be in violation of the academic integrity policy will be subject to both academic sanctions from the faculty member and non-academic sanctions (including but not limited to university probation, suspension, or expulsion). Other information on the Honor Code can be found at http://www.colorado.edu/policies/honor.html and at http://honorcode.colorado.edu Athletic Events The Boulder Campus has two separate but similar policies governing conflicts between a student's athletic events and his or her classes and exams. One policy governs students involved in intercollegiate varsity athletic events. The other policy governs students involved in Club Sports events. Each policy is accompanied by a detailed report with guidance on how instructors may deal with conflicts when they arise. Both policies may be viewed in detail on the Boulder Faculty Assembly's website: Policy on conflicts involving Intercollegiate Athletics, http://www.colorado.edu/FacultyGovernance/committees/IAC.html Policy on conflicts involving Club Sports http://www.colorado.edu/FacultyGovernance/committees/studentaffairs.html The two policies are substantially similar, having the following terms in common: That it is the student's responsibility to notify each instructor, in the first week of the semester and in writing, about any known conflicts between academic requirements and athletic events. That instructors have full authority to decide whether and/or how to accommodate those conflicts. While an instructor has the right to refuse to make accommodations, he or she is permitted to provide such accommodations. That coaches are forbidden from initiating contact with instructors regarding schedule conflicts, grades, or academic progress. The Intercollegiate Athletics Office of Academic Support Services and the Recreation Center's Collegiate Club Sports coordinators may contact instructors about certain topics. There is no rule preventing faculty from contacting these support organizations.Policy terms that are specific to intercollegiate varsity events, as opposed to club sports events, include: That intercollegiate varsity athletic events during final exams, which are normally forbidden by university policy, must be approved in writing by the BFA Intercollegiate Athletics Committee well in advance of the event. Students involved in these events must then work with their instructors in regard to any missed work.","title":"CU Policies and Procedures"},{"location":"studio-handbook/policies/#cu-policies-and-procedures","text":"","title":"CU Policies and Procedures"},{"location":"studio-handbook/policies/#classroom-behavior","text":"Students and faculty each have responsibility for maintaining an appropriate learning environment. Those who fail to adhere to such behavioral standards may be subject to discipline. Professional courtesy and sensitivity are especially important with respect to individuals and topics dealing with differences of race, color, culture, religion, creed, politics, veteran\u2019s status, sexual orientation, gender, gender identity and gender expression, age, disability, and nationalities. Class rosters are provided to the instructor with the student's legal name. I will gladly honor your request to address you by an alternate name or gender pronoun. Please advise me of this preference early in the semester so that I may make appropriate changes to my records. See policies at: http://www.colorado.edu/policies/classbehavior.html and at http://www.colorado.edu/studentaffairs/judicialaffairs","title":"Classroom Behavior"},{"location":"studio-handbook/policies/#disability","text":"If you qualify for accommodations because of a disability, please submit to your professor a letter from Disability Services in a timely manner (for exam accommodations provide your letter at least one week prior to the exam) so that your needs can be addressed. Disability Services determines accommodations based on documented disabilities. Contact Disability Services at 303-492-8671 or by e-mail at dsinfo@colorado.edu. If you have a temporary medical condition or injury, see Temporary Medical Conditions: Injuries, Surgeries, and Illnesses guidelines under Quick Links at Disability Services website and discuss your needs with your professor.","title":"Disability"},{"location":"studio-handbook/policies/#religious-observance","text":"Campus policy regarding religious observances requires that faculty make every effort to deal reasonably and fairly with all students who, because of religious obligations, have conflicts with scheduled exams, assignments or required attendance. Please notify me as quickly as possible regarding any possible absences so that we can plan your work accordingly. See full details at http://www.colorado.edu/policies/fac_relig.html","title":"Religious Observance"},{"location":"studio-handbook/policies/#discrimination-and-harassment","text":"The University of Colorado Boulder (CU-Boulder) is committed to maintaining a positive learning, working, and living environment. The University of Colorado does not discriminate on the basis of race, color, national origin, sex, age, disability, creed, religion, sexual orientation, or veteran status in admission and access to, and treatment and employment in, its educational programs and activities. (Regent Law, Article 10, amended 11/8/2001). CU-Boulder will not tolerate acts of discrimination or harassment based upon Protected Classes or related retaliation against or by any employee or student. For purposes of this CU-Boulder policy, \"Protected Classes\" refers to race, color, national origin, sex, pregnancy, age, disability, creed, religion, sexual orientation, gender identity, gender expression, or veteran status. Individuals who believe they have been discriminated against should contact the Office of Discrimination and Harassment (ODH) at 303-492-2127 or the Office of Student Conduct (OSC) at 303-492-5550. Information about the ODH, the above referenced policies, and the campus resources available to assist individuals regarding discrimination or harassment can be obtained at http://hr.colorado.edu/dh/","title":"Discrimination and Harassment"},{"location":"studio-handbook/policies/#honor-code","text":"All students of the University of Colorado at Boulder are responsible for knowing and adhering to the academic integrity policy of this institution. Violations of this policy may include: cheating, plagiarism, aid of academic dishonesty, fabrication, lying, bribery, and threatening behavior. All incidents of academic misconduct shall be reported to the Honor Code Council (honor@colorado.edu; 303-735-2273). Students who are found to be in violation of the academic integrity policy will be subject to both academic sanctions from the faculty member and non-academic sanctions (including but not limited to university probation, suspension, or expulsion). Other information on the Honor Code can be found at http://www.colorado.edu/policies/honor.html and at http://honorcode.colorado.edu","title":"Honor Code"},{"location":"studio-handbook/policies/#athletic-events","text":"The Boulder Campus has two separate but similar policies governing conflicts between a student's athletic events and his or her classes and exams. One policy governs students involved in intercollegiate varsity athletic events. The other policy governs students involved in Club Sports events. Each policy is accompanied by a detailed report with guidance on how instructors may deal with conflicts when they arise. Both policies may be viewed in detail on the Boulder Faculty Assembly's website: Policy on conflicts involving Intercollegiate Athletics, http://www.colorado.edu/FacultyGovernance/committees/IAC.html Policy on conflicts involving Club Sports http://www.colorado.edu/FacultyGovernance/committees/studentaffairs.html The two policies are substantially similar, having the following terms in common: That it is the student's responsibility to notify each instructor, in the first week of the semester and in writing, about any known conflicts between academic requirements and athletic events. That instructors have full authority to decide whether and/or how to accommodate those conflicts. While an instructor has the right to refuse to make accommodations, he or she is permitted to provide such accommodations. That coaches are forbidden from initiating contact with instructors regarding schedule conflicts, grades, or academic progress. The Intercollegiate Athletics Office of Academic Support Services and the Recreation Center's Collegiate Club Sports coordinators may contact instructors about certain topics. There is no rule preventing faculty from contacting these support organizations.Policy terms that are specific to intercollegiate varsity events, as opposed to club sports events, include: That intercollegiate varsity athletic events during final exams, which are normally forbidden by university policy, must be approved in writing by the BFA Intercollegiate Athletics Committee well in advance of the event. Students involved in these events must then work with their instructors in regard to any missed work.","title":"Athletic Events"},{"location":"xr/","text":"XR Platforms HTC Vive Vive Developer Vive Wave - Developer Portal for China Oculus Rift Google Daydream Game Engines Unity Unreal Reality Capture Structure Sensor 3D Scanner Autodesk Remake CAD / Mesh Conversion CAD Assistant - This will convert between almost any format. Meshlab","title":"Tools"},{"location":"xr/#xr","text":"","title":"XR"},{"location":"xr/#platforms","text":"HTC Vive Vive Developer Vive Wave - Developer Portal for China Oculus Rift Google Daydream","title":"Platforms"},{"location":"xr/#game-engines","text":"Unity Unreal","title":"Game Engines"},{"location":"xr/#reality-capture","text":"Structure Sensor 3D Scanner Autodesk Remake","title":"Reality Capture"},{"location":"xr/#cad-mesh-conversion","text":"CAD Assistant - This will convert between almost any format. Meshlab","title":"CAD / Mesh Conversion"},{"location":"xr/learning-unity/","text":"This section contains resources for learning how to work with Unity3D , a game engine for building immersive experiences, games, and more. Note this is a living document and is constantly being updated. Some things may come and go over time. Unity Basics Unity Interface Navigation Hierarchy Windows - Scene, Game Console Inspector Custom Layouts Tools - QUERTY Project / File Organization Assets Folder If you delete it in Unity it deletes it from the folder. Careful. .meta files generated by Unity. They need to go with the source file if you move it in the explorer (windows) or finder (MacOS). Make subdirectories to keep it organized Ex. Scenes, Scripts, Models, Textures, Prefabs, Physical Materials, Materials Adding Objects to a Scene Manipulating Objects Inspecting Objects Nesting Objects - Parents and Children Working with Game Objects Adding Components Rigid Body Game Play Init Objects, Compile Scripts, etc Changing parameters in Unity before and during gameplay Importing Assets Import your own assets (from CAD package - Rhino, Fusion, Maya, Blender, etc) Import assets from Asset store Import assets you find on the web Intro to scripting Scripting...What is scripting? What's in a script? Monodevelop and Visual Studio Make a GameObject Make a new script and add it as a Component to your new GameObject Print to the console from your script Debug.Log(\"Hello World!!\"); Unity + SteamVR The SteamVR Plugin is an easy way to integrate VR functionality into Unity. It's recommended to import the Unity package via Asset store within Unity. Note that SteamVR won't work unless there is VR capable hardware connected (ie. HTC VIVE) and you are running the Unity project on a Windows 10 machine. Required Software Unity 2018 and up - Installed via Unity Hub. SteamVR Runtime 1.2.10 - Installed via Steam. SteamVR Plugin 2.2.0 (Last Update: Jan 30, 2019) Github Docs Unity Asset Store OpenVR - SteamVR is using OpenVR behind the scenes to communicate with the SteamVR Runtime. The Wiki for OpenVR talks about more of the underlying API. You don't need to download anything else. Build a Unity project and add the SteamVR plugin Make a new Unity project. Name it \"MySteamVRProject.\" Import plugin SteamVR from asset store Search for SteamVR and click Import. Click Import when prompted. A dialog comes up that shows what files will be included.It may take a moment to include everything in the package. Click Accept All when prompted with the recommended project settings. You will see a confirmation that says \u201cYou have made the right choice\u201d. Click Ok. Now you should see the SteamVR folder under Assets. Disable or remove the default Main Camera in the Inspector Keep the included Directional Light or add a Point Light and disable any unused lights. Add a Plane and Cube to the scene Move the Cube up in the Z direction by 1 unit. Add the Player prefab found under SteamVR/InteractionSystem/Core/Prefabs. This includes the camera and controller objects. Generate the action.js file by navigating to Unity menu Window > SteamVR Input. Click Yes when prompted to save a copy of the example json files. Click Save and Generate on the SteamVR Input dialog. Once that\u2019s done there will be an example scene file in Assets/SteamVR/InteractionSystem/Samples/Interactions_Example.unity. Explore this scene or go back to the default SampleScene file you started with. Start adding other objects into the scene. Hit play and put on the VIVE References Player How to Add Teleportation Create an empty GameObject Locate and add the Teleporting prefab found under SteamVR/InteractionSystem/Teleport/Prefabs. 3. This is the primary object for managing teleportation functionality. Add one or more TeleportPoint game objects found under SteamVR/InteractionSystem/Teleport/Prefabs. These should be places at specific locations you would like to teleport to. Add one or more Teleport Areas Create a Plane and adjust the size and location. Rename the game object to TeleportArea Position the plane object 0.05 units in the Y direction so it\u2019s just above the ground plane. Add the Teleport Area component Hit play and put on the VIVE References Getting Started with the Interaction System Teleport TeleportPoint TeleportArea How to Add Object Interaction (Pickup & Throw) Add a Cube GameObject to the scene Add the Interactable component to enable interaction features such as highlighting. Add the Throwable component to be able to pick up and throw the object. References Getting Started with the Interaction System Interactable Throwable C# Scripting Resources Unity Scripting References Scripting Manual Scripting API Scripting Tutorials Execution Order of Event Functions Unity Scripting Tutorials Conventions and Syntax Data Types Variables and Functions Vector Maths If Statements Loops Enabling and Disabling Components Activating GameObjects Translate and Rotate GetButton and GetKey Colliders Colliders as Triggers C# References The C# Player's Guide (3rd Edition) / pdf Microsoft C# Quick Start Tutorials Unity Scripts Unity Script Collection - Great resource! Scripting Behavior The Nature of Code ( Processing Examples ) Q: How do you go about translating code from one language to another? A: Learn enough of the syntax for both programming lanages to translate from one language to another. Oscillation Examples Teleporter Examples Making Objects Slide w/ Physic Materials","title":"Learning Unity"},{"location":"xr/learning-unity/#unity-basics","text":"Unity Interface Navigation Hierarchy Windows - Scene, Game Console Inspector Custom Layouts Tools - QUERTY Project / File Organization Assets Folder If you delete it in Unity it deletes it from the folder. Careful. .meta files generated by Unity. They need to go with the source file if you move it in the explorer (windows) or finder (MacOS). Make subdirectories to keep it organized Ex. Scenes, Scripts, Models, Textures, Prefabs, Physical Materials, Materials Adding Objects to a Scene Manipulating Objects Inspecting Objects Nesting Objects - Parents and Children Working with Game Objects Adding Components Rigid Body Game Play Init Objects, Compile Scripts, etc Changing parameters in Unity before and during gameplay Importing Assets Import your own assets (from CAD package - Rhino, Fusion, Maya, Blender, etc) Import assets from Asset store Import assets you find on the web Intro to scripting Scripting...What is scripting? What's in a script? Monodevelop and Visual Studio Make a GameObject Make a new script and add it as a Component to your new GameObject Print to the console from your script Debug.Log(\"Hello World!!\");","title":"Unity Basics"},{"location":"xr/learning-unity/#unity-steamvr","text":"The SteamVR Plugin is an easy way to integrate VR functionality into Unity. It's recommended to import the Unity package via Asset store within Unity. Note that SteamVR won't work unless there is VR capable hardware connected (ie. HTC VIVE) and you are running the Unity project on a Windows 10 machine. Required Software Unity 2018 and up - Installed via Unity Hub. SteamVR Runtime 1.2.10 - Installed via Steam. SteamVR Plugin 2.2.0 (Last Update: Jan 30, 2019) Github Docs Unity Asset Store OpenVR - SteamVR is using OpenVR behind the scenes to communicate with the SteamVR Runtime. The Wiki for OpenVR talks about more of the underlying API. You don't need to download anything else. Build a Unity project and add the SteamVR plugin Make a new Unity project. Name it \"MySteamVRProject.\" Import plugin SteamVR from asset store Search for SteamVR and click Import. Click Import when prompted. A dialog comes up that shows what files will be included.It may take a moment to include everything in the package. Click Accept All when prompted with the recommended project settings. You will see a confirmation that says \u201cYou have made the right choice\u201d. Click Ok. Now you should see the SteamVR folder under Assets. Disable or remove the default Main Camera in the Inspector Keep the included Directional Light or add a Point Light and disable any unused lights. Add a Plane and Cube to the scene Move the Cube up in the Z direction by 1 unit. Add the Player prefab found under SteamVR/InteractionSystem/Core/Prefabs. This includes the camera and controller objects. Generate the action.js file by navigating to Unity menu Window > SteamVR Input. Click Yes when prompted to save a copy of the example json files. Click Save and Generate on the SteamVR Input dialog. Once that\u2019s done there will be an example scene file in Assets/SteamVR/InteractionSystem/Samples/Interactions_Example.unity. Explore this scene or go back to the default SampleScene file you started with. Start adding other objects into the scene. Hit play and put on the VIVE References Player How to Add Teleportation Create an empty GameObject Locate and add the Teleporting prefab found under SteamVR/InteractionSystem/Teleport/Prefabs. 3. This is the primary object for managing teleportation functionality. Add one or more TeleportPoint game objects found under SteamVR/InteractionSystem/Teleport/Prefabs. These should be places at specific locations you would like to teleport to. Add one or more Teleport Areas Create a Plane and adjust the size and location. Rename the game object to TeleportArea Position the plane object 0.05 units in the Y direction so it\u2019s just above the ground plane. Add the Teleport Area component Hit play and put on the VIVE References Getting Started with the Interaction System Teleport TeleportPoint TeleportArea How to Add Object Interaction (Pickup & Throw) Add a Cube GameObject to the scene Add the Interactable component to enable interaction features such as highlighting. Add the Throwable component to be able to pick up and throw the object. References Getting Started with the Interaction System Interactable Throwable","title":"Unity + SteamVR"},{"location":"xr/learning-unity/#c-scripting-resources","text":"Unity Scripting References Scripting Manual Scripting API Scripting Tutorials Execution Order of Event Functions Unity Scripting Tutorials Conventions and Syntax Data Types Variables and Functions Vector Maths If Statements Loops Enabling and Disabling Components Activating GameObjects Translate and Rotate GetButton and GetKey Colliders Colliders as Triggers C# References The C# Player's Guide (3rd Edition) / pdf Microsoft C# Quick Start Tutorials Unity Scripts Unity Script Collection - Great resource!","title":"C# Scripting Resources"},{"location":"xr/learning-unity/#scripting-behavior","text":"The Nature of Code ( Processing Examples ) Q: How do you go about translating code from one language to another? A: Learn enough of the syntax for both programming lanages to translate from one language to another. Oscillation Examples Teleporter Examples Making Objects Slide w/ Physic Materials","title":"Scripting Behavior"},{"location":"xr/reality-capture/","text":"Download the pre-compiled binary for macos and try it out. https://github.com/wjakob/instant-meshes This is an article about the tool and its use in a cad program called MODO. It talks about the next steps in scanning and points at the following research. https://www.foundry.com/%20insights/vr-ar-mr/mitsuba-renderer-instant-meshes Field-Aligned Online Surface Reconstruction. Check out the video. http://rgl.epfl.ch/publications/Schertler2017Field","title":"Reality capture"}]}